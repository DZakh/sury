// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "sury/src/S.res.mjs";
import * as U from "../utils/U.res.mjs";
import Ava from "ava";

Ava("Creates schema with the name schema from t type", t => U.assertEqualSchemas(t, S.string, S.string, undefined));

Ava("Creates schema with the type name and schema at the for non t types", t => U.assertEqualSchemas(t, S.int, S.int, undefined));

let reusedTypesSchema = S.schema(s => [
  s.m(S.string),
  s.m(S.int),
  s.m(S.bool),
  s.m(S.float)
]);

Ava("Can reuse schemas from other types", t => U.assertEqualSchemas(t, reusedTypesSchema, S.tuple(s => [
  s.item(0, S.string),
  s.item(1, S.int),
  s.item(2, S.bool),
  s.item(3, S.float)
]), undefined));

let stringWithDefaultSchema = S.Option.getOr(param => S.option(S.string, param), "Foo");

Ava("Creates schema with default", t => U.assertEqualSchemas(t, stringWithDefaultSchema, S.Option.getOr(param => S.option(S.string, param), "Foo"), undefined));

let partial_arg = S.url(S.string, undefined);

let stringWithDefaultAndMatchesSchema = S.Option.getOr(param => S.option(partial_arg, param), "Foo");

Ava("Creates schema with default using @s.matches", t => {
  let partial_arg = S.url(S.string, undefined);
  U.assertEqualSchemas(t, stringWithDefaultAndMatchesSchema, S.Option.getOr(param => S.option(partial_arg, param), "Foo"), undefined);
});

let stringWithDefaultNullAndMatchesSchema = S.Option.getOr(S.$$null(S.url(S.string, undefined)), "Foo");

Ava("Creates schema with default null using @s.matches", t => U.assertEqualSchemas(t, stringWithDefaultNullAndMatchesSchema, S.Option.getOr(S.$$null(S.url(S.string, undefined)), "Foo"), undefined));

function ignoredNullWithMatchesSchema(param) {
  return S.option(S.string, param);
}

Ava("@s.null doesn't override @s.matches(S.option(_))", t => U.assertEqualSchemas(t, ignoredNullWithMatchesSchema, param => S.option(S.string, param), undefined));

let schema = S.string;

let fooSchema = S.int;

export {
  schema,
  fooSchema,
  reusedTypesSchema,
}
/*  Not a pure module */
