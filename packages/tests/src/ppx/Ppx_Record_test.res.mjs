// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "rescript-schema/src/S.res.mjs";
import * as U from "../utils/U.res.mjs";
import Ava from "ava";

var simpleRecordSchema = S.schema(function (s) {
      return {
              label: s.m(S.string),
              value: s.m(S.$$int)
            };
    });

Ava("Simple record schema", (function (t) {
        U.assertEqualSchemas(t, simpleRecordSchema, S.object(function (s) {
                  return {
                          label: s.f("label", S.string),
                          value: s.f("value", S.$$int)
                        };
                }), undefined);
        t.deepEqual(S.parseOrThrow({label:"foo",value:1}, simpleRecordSchema), {
              label: "foo",
              value: 1
            }, undefined);
      }));

var recordWithAliasSchema = S.schema(function (s) {
      return {
              "aliased-label": s.m(S.string),
              value: s.m(S.$$int)
            };
    });

Ava("Record schema with alias for field name", (function (t) {
        U.assertEqualSchemas(t, recordWithAliasSchema, S.object(function (s) {
                  return {
                          "aliased-label": s.f("aliased-label", S.string),
                          value: s.f("value", S.$$int)
                        };
                }), undefined);
        t.deepEqual(S.parseOrThrow({"aliased-label":"foo",value:1}, recordWithAliasSchema), {
              "aliased-label": "foo",
              value: 1
            }, undefined);
      }));

var recordWithOptionalSchema = S.schema(function (s) {
      return {
              label: s.m(S.option(S.string)),
              value: s.m(S.option(S.$$int))
            };
    });

Ava("Record schema with optional fields", (function (t) {
        U.assertEqualSchemas(t, recordWithOptionalSchema, S.object(function (s) {
                  return {
                          label: s.f("label", S.option(S.string)),
                          value: s.f("value", S.option(S.$$int))
                        };
                }), undefined);
        t.deepEqual(S.parseOrThrow({"label":"foo",value:1}, recordWithOptionalSchema), {
              label: "foo",
              value: 1
            }, undefined);
        t.deepEqual(S.parseOrThrow({}, recordWithOptionalSchema), {
              label: undefined,
              value: undefined
            }, undefined);
      }));

var recordWithNullableFieldSchema = S.schema(function (s) {
      return {
              subscription: s.m(S.option(S.$$null(S.string)))
            };
    });

Ava("Record schema with nullable field", (function (t) {
        U.assertEqualSchemas(t, recordWithNullableFieldSchema, S.object(function (s) {
                  return {
                          subscription: s.f("subscription", S.option(S.$$null(S.string)))
                        };
                }), undefined);
        t.deepEqual(S.parseOrThrow({"subscription":null}, recordWithNullableFieldSchema), {
              subscription: undefined
            }, undefined);
      }));

export {
  simpleRecordSchema ,
  recordWithAliasSchema ,
  recordWithOptionalSchema ,
  recordWithNullableFieldSchema ,
}
/* simpleRecordSchema Not a pure module */
