// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "sury/src/S.res.mjs";
import * as U from "../utils/U.res.mjs";
import Ava from "ava";
import * as Primitive_option from "rescript/lib/es6/Primitive_option.js";

let simpleRecordSchema = S.schema(s => ({
  label: s.m(S.string),
  value: s.m(S.int)
}));

Ava("Simple record schema", t => {
  U.assertEqualSchemas(t, simpleRecordSchema, S.object(s => ({
    label: s.f("label", S.string),
    value: s.f("value", S.int)
  })), undefined);
  t.deepEqual(S.parseOrThrow({label:"foo",value:1}, simpleRecordSchema), {
    label: "foo",
    value: 1
  }, undefined);
});

let recordWithAliasSchema = S.schema(s => ({
  "aliased-label": s.m(S.string),
  value: s.m(S.int)
}));

Ava("Record schema with alias for field name", t => {
  U.assertEqualSchemas(t, recordWithAliasSchema, S.object(s => ({
    "aliased-label": s.f("aliased-label", S.string),
    value: s.f("value", S.int)
  })), undefined);
  t.deepEqual(S.parseOrThrow({"aliased-label":"foo",value:1}, recordWithAliasSchema), {
    "aliased-label": "foo",
    value: 1
  }, undefined);
});

let recordWithOptionalSchema = S.schema(s => ({
  label: s.m(param => S.option(S.string, param)),
  value: s.m(param => S.option(S.int, param))
}));

Ava("Record schema with optional fields", t => {
  U.assertEqualSchemas(t, recordWithOptionalSchema, S.object(s => ({
    label: s.f("label", param => S.option(S.string, param)),
    value: s.f("value", param => S.option(S.int, param))
  })), undefined);
  t.deepEqual(S.parseOrThrow({"label":"foo",value:1}, recordWithOptionalSchema), {
    label: "foo",
    value: 1
  }, undefined);
  t.deepEqual(S.parseOrThrow({}, recordWithOptionalSchema), {
    label: undefined,
    value: undefined
  }, undefined);
});

let recordWithNullableFieldSchema = S.schema(s => {
  let partial_arg = S.$$null(S.string);
  return {
    subscription: s.m(param => S.option(partial_arg, param))
  };
});

Ava("Record schema with nullable field", t => {
  U.assertEqualSchemas(t, recordWithNullableFieldSchema, S.object(s => {
    let partial_arg = S.$$null(S.string);
    return {
      subscription: s.f("subscription", param => S.option(partial_arg, param))
    };
  }), undefined);
  t.deepEqual(S.parseOrThrow({}, recordWithNullableFieldSchema), {
    subscription: undefined
  }, undefined);
  t.deepEqual(S.parseOrThrow({"subscription":null}, recordWithNullableFieldSchema), {
    subscription: Primitive_option.some(undefined)
  }, undefined);
});

export {
  simpleRecordSchema,
  recordWithAliasSchema,
  recordWithOptionalSchema,
  recordWithNullableFieldSchema,
}
/* simpleRecordSchema Not a pure module */
