// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "rescript-schema/src/S.res.mjs";
import * as U from "../utils/U.res.mjs";
import Ava from "ava";

Ava("String schema", (function (t) {
        U.assertEqualSchemas(t, S.string, S.string, undefined);
      }));

Ava("Int schema", (function (t) {
        U.assertEqualSchemas(t, S.$$int, S.$$int, undefined);
      }));

Ava("Float schema", (function (t) {
        U.assertEqualSchemas(t, S.$$float, S.$$float, undefined);
      }));

Ava("Bool schema", (function (t) {
        U.assertEqualSchemas(t, S.bool, S.bool, undefined);
      }));

Ava("Unit schema", (function (t) {
        U.assertEqualSchemas(t, S.unit, S.unit, undefined);
      }));

Ava("Unknown schema", (function (t) {
        U.assertEqualSchemas(t, S.unknown, S.unknown, undefined);
      }));

Ava("Never schema", (function (t) {
        U.assertEqualSchemas(t, S.never, S.never, undefined);
      }));

var myOptionOfStringSchema = S.option(S.string);

Ava("Option of string schema", (function (t) {
        U.assertEqualSchemas(t, myOptionOfStringSchema, S.option(S.string), undefined);
      }));

var myArrayOfStringSchema = S.array(S.string);

Ava("Array of string schema", (function (t) {
        U.assertEqualSchemas(t, myArrayOfStringSchema, S.array(S.string), undefined);
      }));

var myListOfStringSchema = S.list(S.string);

Ava("List of string schema", (function (t) {
        U.assertEqualSchemas(t, myListOfStringSchema, S.list(S.string), undefined);
      }));

var myDictOfStringSchema = S.dict(S.string);

Ava("Dict of string schema", (function (t) {
        U.assertEqualSchemas(t, myDictOfStringSchema, S.dict(S.string), undefined);
      }));

var myDictOfStringFromJsSchema = S.dict(S.string);

Ava("Dict of string schema from Js", (function (t) {
        U.assertEqualSchemas(t, myDictOfStringSchema, S.dict(S.string), undefined);
      }));

var myDictOfStringFromCoreSchema = S.dict(S.string);

Ava("Dict of string schema from Core", (function (t) {
        U.assertEqualSchemas(t, myDictOfStringFromCoreSchema, S.dict(S.string), undefined);
      }));

var myJsonSchema = S.json(true);

Ava("Json schema", (function (t) {
        U.assertEqualSchemas(t, myJsonSchema, S.json(true), undefined);
      }));

var myJsonFromCoreSchema = S.json(true);

Ava("Json schema from Core", (function (t) {
        U.assertEqualSchemas(t, myJsonFromCoreSchema, S.json(true), undefined);
      }));

var myTupleSchema = S.schema(function (s) {
      return [
              s.m(S.string),
              s.m(S.$$int)
            ];
    });

Ava("Tuple schema", (function (t) {
        U.assertEqualSchemas(t, myTupleSchema, S.tuple2(S.string, S.$$int), undefined);
      }));

var myBigTupleSchema = S.schema(function (s) {
      return [
              s.m(S.string),
              s.m(S.string),
              s.m(S.string),
              s.m(S.$$int),
              s.m(S.$$int),
              s.m(S.$$int),
              s.m(S.$$float),
              s.m(S.$$float),
              s.m(S.$$float),
              s.m(S.bool),
              s.m(S.bool),
              s.m(S.bool)
            ];
    });

Ava("Big tuple schema", (function (t) {
        U.assertEqualSchemas(t, myBigTupleSchema, S.tuple(function (s) {
                  return [
                          s.item(0, S.string),
                          s.item(1, S.string),
                          s.item(2, S.string),
                          s.item(3, S.$$int),
                          s.item(4, S.$$int),
                          s.item(5, S.$$int),
                          s.item(6, S.$$float),
                          s.item(7, S.$$float),
                          s.item(8, S.$$float),
                          s.item(9, S.bool),
                          s.item(10, S.bool),
                          s.item(11, S.bool)
                        ];
                }), undefined);
      }));

var myCustomStringSchema = S.email(S.string, undefined);

Ava("Custom string schema", (function (t) {
        U.assertEqualSchemas(t, myCustomStringSchema, S.email(S.string, undefined), undefined);
      }));

var myCustomLiteralStringSchema = S.email(S.literal("123"), undefined);

Ava("Custom litaral string schema", (function (t) {
        U.assertEqualSchemas(t, myCustomLiteralStringSchema, S.email(S.literal("123"), undefined), undefined);
      }));

var myCustomOptionalStringSchema = S.option(S.email(S.string, undefined));

Ava("Custom optional string schema", (function (t) {
        U.assertEqualSchemas(t, myCustomOptionalStringSchema, S.option(S.email(S.string, undefined)), undefined);
      }));

var myNullOfStringSchema = S.$$null(S.string);

Ava("Null of string schema", (function (t) {
        U.assertEqualSchemas(t, myNullOfStringSchema, S.$$null(S.string), undefined);
      }));

var myStringSchema = S.string;

var myIntSchema = S.$$int;

var myFloatSchema = S.$$float;

var myBoolSchema = S.bool;

var myUnitSchema = S.unit;

var myUnknownSchema = S.unknown;

var myNeverSchema = S.never;

export {
  myStringSchema ,
  myIntSchema ,
  myFloatSchema ,
  myBoolSchema ,
  myUnitSchema ,
  myUnknownSchema ,
  myNeverSchema ,
  myOptionOfStringSchema ,
  myArrayOfStringSchema ,
  myListOfStringSchema ,
  myDictOfStringSchema ,
  myDictOfStringFromJsSchema ,
  myDictOfStringFromCoreSchema ,
  myJsonSchema ,
  myJsonFromCoreSchema ,
  myTupleSchema ,
  myBigTupleSchema ,
  myCustomStringSchema ,
  myCustomLiteralStringSchema ,
  myCustomOptionalStringSchema ,
  myNullOfStringSchema ,
}
/*  Not a pure module */
