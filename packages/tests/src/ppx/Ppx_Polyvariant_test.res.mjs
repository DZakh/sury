// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "sury/src/S.res.mjs";
import * as U from "../utils/U.res.mjs";
import Ava from "ava";

let polySchema = S.union([
  S.literal("one"),
  S.literal("two")
]);

Ava("Polymorphic variant", t => U.assertEqualSchemas(t, polySchema, S.union([
  S.literal("one"),
  S.literal("two")
]), undefined));

let polyWithSingleItemSchema = S.literal("single");

Ava("Polymorphic variant with single item becomes a literal schema of the item", t => U.assertEqualSchemas(t, polyWithSingleItemSchema, S.literal("single"), undefined));

let polyEmbededSchema = S.shape(S.string, param => "one");

Ava("Embed custom schema for polymorphic variants", t => U.assertEqualSchemas(t, polyEmbededSchema, S.shape(S.string, param => "one"), undefined));

let dictFieldSchema = S.dict(S.literal("one"));

Ava("Supported as a dict field", t => U.assertEqualSchemas(t, dictFieldSchema, S.dict(S.literal("one")), undefined));

let recordFieldSchema = S.schema(s => ({
  poly: s.m(S.literal("one"))
}));

Ava("Supported as a record field", t => U.assertEqualSchemas(t, recordFieldSchema, S.object(s => ({
  poly: s.f("poly", S.literal("one"))
})), undefined));

let objectFieldSchema = S.schema(s => ({
  poly: s.m(S.literal("one"))
}));

Ava("Supported as a object field", t => U.assertEqualSchemas(t, objectFieldSchema, S.object(s => ({
  poly: s.f("poly", S.literal("one"))
})), undefined));

export {
  polySchema,
  polyWithSingleItemSchema,
  polyEmbededSchema,
  dictFieldSchema,
  recordFieldSchema,
  objectFieldSchema,
}
/* polySchema Not a pure module */
