// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "sury/src/S.res.mjs";
import * as Benchmark from "benchmark";
import * as Stdlib_Array from "rescript/lib/es6/Stdlib_Array.js";

function addWithPrepare(suite, name, fn) {
  return suite.add(name, fn());
}

function run(suite) {
  suite.on("cycle", event => {
    console.log(event.target.toString());
  }).run();
}

function makeTestObject() {
  return (Object.freeze({
    number: 1,
    negNumber: -1,
    maxNumber: Number.MAX_VALUE,
    string: 'string',
    longString:
      'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Vivendum intellegat et qui, ei denique consequuntur vix. Semper aeterno percipit ut his, sea ex utinam referrentur repudiandae. No epicuri hendrerit consetetur sit, sit dicta adipiscing ex, in facete detracto deterruisset duo. Quot populo ad qui. Sit fugit nostrum et. Ad per diam dicant interesset, lorem iusto sensibus ut sed. No dicam aperiam vis. Pri posse graeco definitiones cu, id eam populo quaestio adipiscing, usu quod malorum te. Ex nam agam veri, dicunt efficiantur ad qui, ad legere adversarium sit. Commune platonem mel id, brute adipiscing duo an. Vivendum intellegat et qui, ei denique consequuntur vix. Offendit eleifend moderatius ex vix, quem odio mazim et qui, purto expetendis cotidieque quo cu, veri persius vituperata ei nec. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.',
    boolean: true,
    deeplyNested: {
      foo: 'bar',
      num: 1,
      bool: false,
    },
  }));
}

function makeAdvancedObjectSchema() {
  return S.object(s => ({
    number: s.f("number", S.float),
    negNumber: s.f("negNumber", S.float),
    maxNumber: s.f("maxNumber", S.float),
    string: s.f("string", S.string),
    longString: s.f("longString", S.string),
    boolean: s.f("boolean", S.bool),
    deeplyNested: s.f("deeplyNested", S.object(s => ({
      foo: s.f("foo", S.string),
      num: s.f("num", S.float),
      bool: s.f("bool", S.bool)
    })))
  }));
}

function makeObjectSchema() {
  return S.schema(s => ({
    number: s.m(S.float),
    negNumber: s.m(S.float),
    maxNumber: s.m(S.float),
    string: s.m(S.string),
    longString: s.m(S.string),
    boolean: s.m(S.bool),
    deeplyNested: {
      foo: s.m(S.string),
      num: s.m(S.float),
      bool: s.m(S.bool)
    }
  }));
}

S.setGlobalConfig({
  disableNanNumberValidation: true
});

let schema = S.recursive(schema => S.union([
  S.object(s => {
    s.tag("type", "A");
    return {
      TAG: "A",
      _0: s.f("nested", S.array(schema))
    };
  }),
  S.literal("B"),
  S.literal("C"),
  S.literal("D"),
  S.literal("E"),
  S.literal("F"),
  S.literal("G"),
  S.literal("H"),
  S.literal("I"),
  S.literal("J"),
  S.literal("K"),
  S.literal("L"),
  S.literal("M"),
  S.literal("N"),
  S.literal("O"),
  S.literal("P"),
  S.literal("Q"),
  S.literal("R"),
  S.literal("S"),
  S.literal("T"),
  S.literal("U"),
  S.literal("V"),
  S.literal("W"),
  S.literal("X"),
  S.literal("Y"),
  S.object(s => {
    s.tag("type", "Z");
    return {
      TAG: "Z",
      _0: s.f("nested", S.array(schema))
    };
  })
]));

let testData1 = {
  TAG: "Z",
  _0: Stdlib_Array.make(25, {
    TAG: "Z",
    _0: Stdlib_Array.make(25, {
      TAG: "Z",
      _0: Stdlib_Array.make(25, "Y")
    })
  })
};

let testData2 = {
  TAG: "A",
  _0: Stdlib_Array.make(25, {
    TAG: "A",
    _0: Stdlib_Array.make(25, {
      TAG: "A",
      _0: Stdlib_Array.make(25, "B")
    })
  })
};

function test() {
  console.time("testData1 serialize");
  let json = S.reverseConvertOrThrow(testData1, schema);
  console.timeEnd("testData1 serialize");
  console.time("testData1 parse");
  S.parseOrThrow(json, schema);
  console.timeEnd("testData1 parse");
  console.time("testData2 serialize");
  let json$1 = S.reverseConvertOrThrow(testData2, schema);
  console.timeEnd("testData2 serialize");
  console.time("testData2 parse");
  S.parseOrThrow(json$1, schema);
  console.timeEnd("testData2 parse");
}

test();

let data = makeTestObject();

console.time("makeObjectSchema");

let schema$1 = makeObjectSchema();

console.timeEnd("makeObjectSchema");

console.time("parseOrThrow: 1");

S.parseOrThrow(data, schema$1);

console.timeEnd("parseOrThrow: 1");

console.time("parseOrThrow: 2");

S.parseOrThrow(data, schema$1);

console.timeEnd("parseOrThrow: 2");

console.time("parseOrThrow: 3");

S.parseOrThrow(data, schema$1);

console.timeEnd("parseOrThrow: 3");

console.time("serializeWith: 1");

S.reverseConvertOrThrow(data, schema$1);

console.timeEnd("serializeWith: 1");

console.time("serializeWith: 2");

S.reverseConvertOrThrow(data, schema$1);

console.timeEnd("serializeWith: 2");

console.time("serializeWith: 3");

S.reverseConvertOrThrow(data, schema$1);

console.timeEnd("serializeWith: 3");

console.time("S.Error.make");

S.ErrorClass.constructor({
  TAG: "OperationFailed",
  _0: "Should be positive"
}, S.Flag.typeValidation, S.Path.empty);

console.timeEnd("S.Error.make");

run(addWithPrepare(addWithPrepare(addWithPrepare(addWithPrepare(addWithPrepare(addWithPrepare(addWithPrepare(addWithPrepare(addWithPrepare(addWithPrepare(addWithPrepare(addWithPrepare(addWithPrepare(addWithPrepare(addWithPrepare(new (Benchmark.default.Suite)().add("S.schema - make", () => makeObjectSchema()), "S.schema - make + parse", () => {
  let data = makeTestObject();
  return () => {
    let schema = makeObjectSchema();
    return S.parseOrThrow(data, schema);
  };
}), "S.schema - parse", () => {
  let schema = makeObjectSchema();
  let data = makeTestObject();
  return () => S.parseOrThrow(data, schema);
}), "S.schema - parse strict", () => {
  S.setGlobalConfig({
    defaultAdditionalItems: "strict",
    disableNanNumberValidation: true
  });
  let schema = makeObjectSchema();
  S.setGlobalConfig({
    disableNanNumberValidation: true
  });
  let data = makeTestObject();
  return () => S.parseOrThrow(data, schema);
}).add("S.schema - make + reverse", () => S.reverse(makeObjectSchema())), "S.schema - make + reverse convert", () => {
  let data = makeTestObject();
  return () => {
    let schema = makeObjectSchema();
    return S.reverseConvertOrThrow(data, schema);
  };
}), "S.schema - reverse convert", () => {
  let schema = makeObjectSchema();
  let data = makeTestObject();
  return () => S.reverseConvertOrThrow(data, schema);
}), "S.schema - reverse convert (compiled)", () => {
  let schema = makeObjectSchema();
  let data = makeTestObject();
  let fn = S.compile(schema, "Output", "Input", "Sync", false);
  return () => fn(data);
}), "S.schema - assert", () => {
  let schema = makeObjectSchema();
  let data = makeTestObject();
  return () => S.assertOrThrow(data, schema);
}), "S.schema - assert (compiled)", () => {
  let schema = makeObjectSchema();
  let data = makeTestObject();
  let assertFn = S.compile(schema, "Any", "Assert", "Sync", true);
  return () => assertFn(data);
}), "S.schema - assert strict", () => {
  S.setGlobalConfig({
    defaultAdditionalItems: "strict",
    disableNanNumberValidation: true
  });
  let schema = makeObjectSchema();
  S.setGlobalConfig({
    disableNanNumberValidation: true
  });
  let data = makeTestObject();
  return () => S.assertOrThrow(data, schema);
}).add("S.object - make", () => makeAdvancedObjectSchema()), "S.object - make + parse", () => {
  let data = makeTestObject();
  return () => {
    let schema = makeAdvancedObjectSchema();
    return S.parseOrThrow(data, schema);
  };
}), "S.object - parse", () => {
  let schema = makeAdvancedObjectSchema();
  let data = makeTestObject();
  return () => S.parseOrThrow(data, schema);
}).add("S.object - make + reverse", () => S.reverse(makeAdvancedObjectSchema())), "S.object - make + reverse convert", () => {
  let data = makeTestObject();
  return () => {
    let schema = makeAdvancedObjectSchema();
    return S.reverseConvertOrThrow(data, schema);
  };
}), "S.object - reverse convert", () => {
  let schema = makeAdvancedObjectSchema();
  let data = makeTestObject();
  return () => S.reverseConvertOrThrow(data, schema);
}), "S.string - parse", () => (() => S.parseOrThrow("Hello world!", S.string))), "S.string - reverse convert", () => (() => S.reverseConvertOrThrow("Hello world!", S.string))));

/*  Not a pure module */
