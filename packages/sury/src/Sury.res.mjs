// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as JSONSchema from "./JSONSchema.res.mjs";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

var immutableEmpty = {};

var immutableEmpty$1 = [];

var copy = ((d) => ({...d}));

function fromString(string) {
  var _idx = 0;
  while(true) {
    var idx = _idx;
    var match = string[idx];
    if (match === undefined) {
      return "\"" + string + "\"";
    }
    if (match === "\"") {
      return JSON.stringify(string);
    }
    _idx = idx + 1 | 0;
    continue ;
  };
}

function toArray(path) {
  if (path === "") {
    return [];
  } else {
    return JSON.parse(path.split("\"][\"").join("\",\""));
  }
}

function fromLocation($$location) {
  return "[" + fromString($$location) + "]";
}

function fromArray(array) {
  var len = array.length;
  if (len !== 1) {
    if (len !== 0) {
      return "[" + array.map(fromString).join("][") + "]";
    } else {
      return "";
    }
  }
  var $$location = array[0];
  return "[" + fromString($$location) + "]";
}

function concat(path, concatedPath) {
  return path + concatedPath;
}

var vendor = "sury";

var s = Symbol(vendor);

var itemSymbol = Symbol(vendor + ":item");

var $$Error = /* @__PURE__ */Caml_exceptions.create("Sury.Error");

var isLiteral = (s => "const" in s);

function isOptional(schema) {
  var match = schema.type;
  switch (match) {
    case "undefined" :
        return true;
    case "union" :
        return schema.has["undefined"];
    default:
      return false;
  }
}

var globalConfig = {
  d: undefined,
  a: "strip",
  n: false
};

class SuryError extends Error {
  constructor(code, flag, path) {
    super();
    this.flag = flag;
    this.code = code;
    this.path = path;
  }
}

var d = Object.defineProperty, p = SuryError.prototype;
d(p, 'message', {
  get() {
      return message(this);
  }
})
d(p, 'reason', {
  get() {
      return reason(this);
  }
})
d(p, 'name', {value: 'SuryError'})
d(p, 's', {value: s})
d(p, '_1', {
  get() {
    return this
  },
});
d(p, 'RE_EXN_ID', {
  value: $$Error,
});

var Schema = function(type) {this.type=type}, sp = Object.create(null);
d(sp, 'with', {
  get() {
    return (fn, ...args) => fn(this, ...args)
  },
});
// Also has ~standard below
Schema.prototype = sp;
;

function getOrRethrow(exn) {
  if ((exn&&exn.s===s)) {
    return exn;
  }
  throw exn;
}

var unknown = new Schema("unknown");

var bool = new Schema("boolean");

var symbol = new Schema("symbol");

var string = new Schema("string");

var $$int = new Schema("number");

$$int.format = "int32";

var $$float = new Schema("number");

var bigint = new Schema("bigint");

function has(acc, flag) {
  return (acc & flag) !== 0;
}

var copyWithoutCache = ((schema) => {
  let c = new Schema(schema.type)
  for (let k in schema) {
    if (k > "a" || k === "$ref" || k === "$defs") {
      c[k] = schema[k]
    }
  }
  return c
});

function updateOutput(schema, fn) {
  var root = copyWithoutCache(schema);
  var mut = root;
  while(mut.to) {
    var next = copyWithoutCache(mut.to);
    mut.to = next;
    mut = next;
  };
  fn(mut);
  return root;
}

var resetCacheInPlace = ((schema) => {
  for (let k in schema) {
    if (Number(k[0])) {
      delete schema[k];
    }
  }
});

function stringify(unknown) {
  var typeOfValue = typeof unknown;
  if (typeOfValue === "number" || typeOfValue === "function" || typeOfValue === "boolean" || typeOfValue === "symbol") {
    return unknown.toString();
  }
  if (typeOfValue === "string") {
    return "\"" + unknown + "\"";
  }
  if (typeOfValue !== "object") {
    if (typeOfValue === "undefined") {
      return "undefined";
    } else {
      return unknown + "n";
    }
  }
  if (unknown === null) {
    return "null";
  }
  if (Array.isArray(unknown)) {
    var string = "[";
    for(var i = 0 ,i_finish = unknown.length; i < i_finish; ++i){
      if (i !== 0) {
        string = string + ", ";
      }
      string = string + stringify(unknown[i]);
    }
    return string + "]";
  }
  if (unknown.constructor !== Object) {
    return Object.prototype.toString.call(unknown);
  }
  var keys = Object.keys(unknown);
  var string$1 = "{ ";
  for(var i$1 = 0 ,i_finish$1 = keys.length; i$1 < i_finish$1; ++i$1){
    var key = keys[i$1];
    var value = unknown[key];
    string$1 = string$1 + key + ": " + stringify(value) + "; ";
  }
  return string$1 + "}";
}

function toExpression(schema) {
  var tag = schema.type;
  var $$const = schema.const;
  var name = schema.name;
  if (name !== undefined) {
    return name;
  }
  if ($$const !== undefined) {
    return stringify($$const);
  }
  var format = schema.format;
  var anyOf = schema.anyOf;
  if (anyOf !== undefined) {
    return anyOf.map(toExpression).join(" | ");
  }
  if (format !== undefined) {
    return format;
  }
  switch (tag) {
    case "nan" :
        return "NaN";
    case "instance" :
        return schema.class.name;
    case "array" :
        var additionalItems = schema.additionalItems;
        var items = schema.items;
        if (typeof additionalItems !== "object") {
          return "[" + items.map(function (item) {
                        return toExpression(item.schema);
                      }).join(", ") + "]";
        }
        var itemName = toExpression(additionalItems);
        return (
                additionalItems.type === "union" ? "(" + itemName + ")" : itemName
              ) + "[]";
    case "object" :
        var additionalItems$1 = schema.additionalItems;
        var items$1 = schema.items;
        if (items$1.length === 0) {
          if (typeof additionalItems$1 === "object") {
            return "{ [key: string]: " + toExpression(additionalItems$1) + "; }";
          } else {
            return "{}";
          }
        } else {
          return "{ " + items$1.map(function (item) {
                        return item.location + ": " + toExpression(item.schema) + ";";
                      }).join(" ") + " }";
        }
    default:
      return tag;
  }
}

var value = SuryError;

function constructor(prim0, prim1, prim2) {
  return new SuryError(prim0, prim1, prim2);
}

function reason(error, nestedLevelOpt) {
  var nestedLevel = nestedLevelOpt !== undefined ? nestedLevelOpt : 0;
  var reason$1 = error.code;
  if (typeof reason$1 !== "object") {
    return "Encountered unexpected async transform or refine. Use parseAsyncOrThrow operation instead";
  }
  switch (reason$1.TAG) {
    case "OperationFailed" :
        return reason$1._0;
    case "InvalidOperation" :
        return reason$1.description;
    case "InvalidType" :
        var unionErrors = reason$1.unionErrors;
        var m = "Expected " + toExpression(reason$1.expected) + ", received " + stringify(reason$1.received);
        if (unionErrors !== undefined) {
          var lineBreak = "\n" + " ".repeat((nestedLevel << 1));
          var reasonsDict = {};
          for(var idx = 0 ,idx_finish = unionErrors.length; idx < idx_finish; ++idx){
            var error$1 = unionErrors[idx];
            var reason$2 = reason(error$1, nestedLevel + 1);
            var nonEmptyPath = error$1.path;
            var $$location = nonEmptyPath === "" ? "" : "At " + nonEmptyPath + ": ";
            var line = "- " + $$location + reason$2;
            if (!reasonsDict[line]) {
              reasonsDict[line] = 1;
              m = m + lineBreak + line;
            }
            
          }
        }
        return m;
    case "ExcessField" :
        return "Unrecognized key \"" + reason$1._0 + "\"";
    case "InvalidJsonSchema" :
        return toExpression(reason$1._0) + " is not valid JSON";
    
  }
}

function reason$1(error) {
  return reason(error, undefined);
}

function message(error) {
  var op = error.flag;
  var text = "Failed ";
  if (op & 2) {
    text = text + "async ";
  }
  text = text + (
    op & 1 ? (
        op & 4 ? "asserting" : "parsing"
      ) : "converting"
  );
  if (op & 8) {
    text = text + " to JSON" + (
      op & 16 ? " string" : ""
    );
  }
  var nonEmptyPath = error.path;
  var tmp = nonEmptyPath === "" ? "" : " at " + nonEmptyPath;
  return text + tmp + ": " + reason(error, undefined);
}

var ErrorClass = {
  value: value,
  constructor: constructor,
  reason: reason$1,
  message: message
};

function embed(b, value) {
  var e = b.g.e;
  var l = e.length;
  e[l] = value;
  return "e[" + l + "]";
}

function inlineConst(b, schema) {
  var match = schema.type;
  switch (match) {
    case "string" :
        var $$const = schema.const;
        return fromString($$const);
    case "bigint" :
        var $$const$1 = schema.const;
        return $$const$1 + "n";
    case "undefined" :
        return "void 0";
    case "symbol" :
    case "function" :
    case "instance" :
        break;
    default:
      return schema.const;
  }
  var $$const$2 = schema.const;
  return embed(b, $$const$2);
}

function secondAllocate(v) {
  var b = this;
  b.l = b.l + "," + v;
}

function initialAllocate(v) {
  var b = this;
  b.l = v;
  b.a = secondAllocate;
}

function rootScope(flag, defs) {
  var $$global = {
    c: "",
    l: "",
    a: initialAllocate,
    v: -1,
    o: flag,
    f: "",
    e: [],
    d: defs
  };
  $$global.g = $$global;
  return $$global;
}

function allocateScope(b) {
  ((delete b.a));
  var varsAllocation = b.l;
  if (varsAllocation === "") {
    return b.f + b.c;
  } else {
    return b.f + "let " + varsAllocation + ";" + b.c;
  }
}

function varWithoutAllocation($$global) {
  var newCounter = $$global.v + 1;
  $$global.v = newCounter;
  return "v" + newCounter;
}

function _var(_b) {
  return this.i;
}

function _notVar(b) {
  var val = this;
  var v = varWithoutAllocation(b.g);
  var i = val.i;
  if (i === "") {
    val.b.a(v);
  } else if (b.a !== (void 0)) {
    b.a(v + "=" + i);
  } else {
    b.c = b.c + (v + "=" + i + ";");
    b.g.a(v);
  }
  val.v = _var;
  val.i = v;
  return v;
}

function allocateVal(b, schema) {
  var v = varWithoutAllocation(b.g);
  b.a(v);
  return {
          b: b,
          v: _var,
          i: v,
          f: 1,
          s: schema
        };
}

function objectJoin(inlinedLocation, value) {
  return inlinedLocation + ":" + value + ",";
}

function arrayJoin(_inlinedLocation, value) {
  return value + ",";
}

function make(b, isArray) {
  return {
          b: b,
          v: _notVar,
          i: "",
          f: 0,
          s: unknown,
          j: isArray ? arrayJoin : objectJoin,
          c: 0,
          p: ""
        };
}

function add(objectVal, inlinedLocation, val) {
  objectVal[inlinedLocation] = val;
  if (val.f & 2) {
    objectVal.p = objectVal.p + val.i + ",";
    objectVal.i = objectVal.i + objectVal.j(inlinedLocation, "a[" + (objectVal.c++) + "]");
  } else {
    objectVal.i = objectVal.i + objectVal.j(inlinedLocation, val.i);
  }
}

function merge(target, subObjectVal) {
  var inlinedLocations = Object.keys(subObjectVal);
  for(var idx = (subObjectVal.j ? 8 : 5) ,idx_finish = inlinedLocations.length; idx < idx_finish; ++idx){
    var inlinedLocation = inlinedLocations[idx];
    add(target, inlinedLocation, subObjectVal[inlinedLocation]);
  }
}

function complete(objectVal, isArray, schema) {
  objectVal.i = isArray ? "[" + objectVal.i + "]" : "{" + objectVal.i + "}";
  if (objectVal.c) {
    objectVal.f = objectVal.f | 2;
    objectVal.i = "Promise.all([" + objectVal.p + "]).then(a=>(" + objectVal.i + "))";
  }
  objectVal.f = objectVal.f | 1;
  objectVal.s = schema;
  return objectVal;
}

function addKey(b, input, key, val) {
  return input.v(b) + "[" + key + "]=" + val.i;
}

function set(b, input, val) {
  if (input === val) {
    return "";
  }
  var inputVar = input.v(b);
  var match = input.f & 2;
  var match$1 = val.f & 2;
  if (match) {
    if (!match$1) {
      return inputVar + "=Promise.resolve(" + val.i + ")";
    }
    
  } else if (match$1) {
    input.f = input.f | 2;
    return inputVar + "=" + val.i;
  }
  return inputVar + "=" + val.i;
}

function get(b, targetVal, inlinedLocation) {
  var val = targetVal[inlinedLocation];
  if (val !== undefined) {
    return val;
  }
  var val$1 = {
    b: b,
    v: _notVar,
    i: targetVal.v(b) + ("[" + inlinedLocation + "]"),
    f: 0,
    s: unknown
  };
  targetVal[inlinedLocation] = val$1;
  return val$1;
}

function setInlined(b, input, inlined) {
  return input.v(b) + "=" + inlined;
}

function map(inlinedFn, input) {
  return {
          b: input.b,
          v: _notVar,
          i: inlinedFn + "(" + input.i + ")",
          f: 0,
          s: unknown
        };
}

function transform(b, input, operation) {
  if (!(input.f & 2)) {
    return operation(b, input);
  }
  var bb = {
    c: "",
    l: "",
    a: initialAllocate,
    f: "",
    g: b.g
  };
  var operationInput = {
    b: b,
    v: _var,
    i: varWithoutAllocation(bb.g),
    f: 0,
    s: unknown
  };
  var operationOutputVal = operation(bb, operationInput);
  var operationCode = allocateScope(bb);
  return {
          b: input.b,
          v: _notVar,
          i: input.i + ".then(" + operationInput.v(b) + "=>{" + operationCode + "return " + operationOutputVal.i + "})",
          f: 3,
          s: unknown
        };
}

function raise(b, code, path) {
  throw new SuryError(code, b.g.o, path);
}

function embedSyncOperation(b, input, fn) {
  if (input.f & 2) {
    return {
            b: input.b,
            v: _notVar,
            i: input.i + ".then(" + embed(b, fn) + ")",
            f: 3,
            s: unknown
          };
  } else {
    return map(embed(b, fn), input);
  }
}

function failWithArg(b, path, fn, arg) {
  return embed(b, (function (arg) {
                return raise(b, fn(arg), path);
              })) + "(" + arg + ")";
}

function fail(b, message, path) {
  return embed(b, (function () {
                return raise(b, {
                            TAG: "OperationFailed",
                            _0: message
                          }, path);
              })) + "()";
}

function effectCtx(b, selfSchema, path) {
  return {
          schema: selfSchema,
          fail: (function (message, customPathOpt) {
              var customPath = customPathOpt !== undefined ? customPathOpt : "";
              return raise(b, {
                          TAG: "OperationFailed",
                          _0: message
                        }, path + customPath);
            })
        };
}

function invalidOperation(b, path, description) {
  return raise(b, {
              TAG: "InvalidOperation",
              description: description
            }, path);
}

function withPathPrepend(b, input, path, maybeDynamicLocationVar, appendSafe, fn) {
  if (path === "" && maybeDynamicLocationVar === undefined) {
    return fn(b, input, path);
  }
  try {
    var $$catch = function (b, errorVar) {
      b.c = errorVar + ".path=" + fromString(path) + "+" + (
        maybeDynamicLocationVar !== undefined ? "'[\"'+" + maybeDynamicLocationVar + "+'\"]'+" : ""
      ) + errorVar + ".path";
    };
    var fn$1 = function (b) {
      return fn(b, input, "");
    };
    var prevCode = b.c;
    b.c = "";
    var errorVar = varWithoutAllocation(b.g);
    var maybeResolveVal = $$catch(b, errorVar);
    var catchCode = "if(" + (errorVar + "&&" + errorVar + ".s===s") + "){" + b.c;
    b.c = "";
    var bb = {
      c: "",
      l: "",
      a: initialAllocate,
      f: "",
      g: b.g
    };
    var fnOutput = fn$1(bb);
    b.c = b.c + allocateScope(bb);
    var isNoop = fnOutput.i === input.i && b.c === "";
    if (appendSafe !== undefined) {
      appendSafe(b, fnOutput);
    }
    if (isNoop) {
      return fnOutput;
    }
    var isAsync = fnOutput.f & 2;
    var output = input === fnOutput ? input : (
        appendSafe !== undefined ? fnOutput : ({
              b: b,
              v: _notVar,
              i: "",
              f: isAsync ? 2 : 0,
              s: unknown
            })
      );
    var catchCode$1 = maybeResolveVal !== undefined ? (function (catchLocation) {
          return catchCode + (
                  catchLocation === 1 ? "return " + maybeResolveVal.i : set(b, output, maybeResolveVal)
                ) + ("}else{throw " + errorVar + "}");
        }) : (function (param) {
          return catchCode + "}throw " + errorVar;
        });
    b.c = prevCode + ("try{" + b.c + (
        isAsync ? setInlined(b, output, fnOutput.i + ".catch(" + errorVar + "=>{" + catchCode$1(1) + "})") : set(b, output, fnOutput)
      ) + "}catch(" + errorVar + "){" + catchCode$1(0) + "}");
    return output;
  }
  catch (exn){
    var error = getOrRethrow(exn);
    throw new SuryError(error.code, error.flag, path + "[]" + error.path);
  }
}

function validation(b, inputVar, schema, negative) {
  var eq = negative ? "!==" : "===";
  var and_ = negative ? "||" : "&&";
  var exp = negative ? "!" : "";
  var tag = schema.type;
  switch (tag) {
    case "null" :
        return inputVar + eq + "null";
    case "undefined" :
        return inputVar + eq + "void 0";
    case "nan" :
        return exp + ("Number.isNaN(" + inputVar + ")");
    default:
      var match = schema.const;
      if (match !== undefined) {
        return inputVar + eq + inlineConst(b, schema);
      }
      switch (tag) {
        case "instance" :
            var $$class = schema.class;
            var c = inputVar + " instanceof " + embed(b, $$class);
            if (negative) {
              return "!(" + c + ")";
            } else {
              return c;
            }
        case "array" :
            return exp + "Array.isArray(" + inputVar + ")";
        case "object" :
            return "typeof " + inputVar + eq + "\"" + tag + "\"" + and_ + exp + inputVar;
        default:
          return "typeof " + inputVar + eq + "\"" + tag + "\"";
      }
  }
}

function refinement(b, inputVar, schema, negative) {
  var eq = negative ? "!==" : "===";
  var and_ = negative ? "||" : "&&";
  var not_ = negative ? "" : "!";
  var lt = negative ? ">" : "<";
  var gt = negative ? "<" : ">";
  var match = schema.type;
  var tag;
  var exit = 0;
  var match$1 = schema.const;
  if (match$1 !== undefined) {
    return "";
  }
  var match$2 = schema.format;
  if (match$2 !== undefined) {
    if (match$2 === "int32") {
      return and_ + inputVar + lt + "2147483647" + and_ + inputVar + gt + "-2147483648" + and_ + inputVar + "%1" + eq + "0";
    }
    exit = 2;
  } else {
    exit = 2;
  }
  if (exit === 2) {
    switch (match) {
      case "number" :
          if (globalConfig.n) {
            return "";
          } else {
            return and_ + not_ + "Number.isNaN(" + inputVar + ")";
          }
      case "array" :
      case "object" :
          tag = match;
          break;
      default:
        return "";
    }
  }
  var additionalItems = schema.additionalItems;
  var items = schema.items;
  var length = items.length;
  var code = tag === "array" ? (
      additionalItems === "strip" || additionalItems === "strict" ? (
          additionalItems === "strip" ? and_ + inputVar + ".length" + gt + length : and_ + inputVar + ".length" + eq + length
        ) : ""
    ) : (
      additionalItems === "strip" ? "" : and_ + not_ + "Array.isArray(" + inputVar + ")"
    );
  for(var idx = 0 ,idx_finish = items.length; idx < idx_finish; ++idx){
    var match$3 = items[idx];
    var inlinedLocation = match$3.inlinedLocation;
    var item = match$3.schema;
    var itemCode;
    if (isLiteral(item) || schema.unnest) {
      itemCode = validation(b, inputVar + ("[" + inlinedLocation + "]"), item, negative);
    } else if (item.type === "object") {
      var inputVar$1 = inputVar + ("[" + inlinedLocation + "]");
      itemCode = validation(b, inputVar$1, item, negative) + refinement(b, inputVar$1, item, negative);
    } else {
      itemCode = "";
    }
    if (itemCode !== "") {
      code = code + and_ + itemCode;
    }
    
  }
  return code;
}

function typeFilterCode(b, schema, input, path) {
  var match = schema.type;
  switch (match) {
    case "never" :
    case "unknown" :
    case "union" :
    case "ref" :
        return "";
    default:
      var inputVar = input.v(b);
      return "if(" + validation(b, inputVar, schema, true) + refinement(b, inputVar, schema, true) + "){" + failWithArg(b, path, (function (input) {
                    return {
                            TAG: "InvalidType",
                            expected: schema,
                            received: input
                          };
                  }), inputVar) + "}";
  }
}

function withCoerceScope(b, input, path, target, coercion) {
  var inputVar = input.v(b);
  return coercion(b, inputVar, failWithArg(b, path, (function (input) {
                    return {
                            TAG: "InvalidType",
                            expected: target,
                            received: input
                          };
                  }), inputVar));
}

function typeValidation(b, schema, input, path) {
  if (b.g.o & 1 || isLiteral(schema)) {
    b.c = b.c + typeFilterCode(b, schema, input, path);
    return ;
  }
  
}

function noopOperation(i) {
  return i;
}

var nonJsonableTags = new Set([
      "unknown",
      "nan",
      "bigint",
      "function",
      "instance",
      "symbol"
    ]);

function setHas(has, tag) {
  has[tag === "union" || tag === "ref" ? "unknown" : tag] = true;
}

function parse(prevB, schema, inputArg, path) {
  var b = {
    c: "",
    l: "",
    a: initialAllocate,
    f: "",
    g: prevB.g
  };
  if (schema.$defs) {
    b.g.d = schema.$defs;
  }
  if (inputArg.s.type === "unknown" && (b.g.o & 1 || isLiteral(schema))) {
    if (!schema.noValidation) {
      b.f = typeFilterCode(prevB, schema, inputArg, path);
    }
    inputArg.f = inputArg.f | 1;
    inputArg.s = schema;
  }
  var input = inputArg;
  var ref = schema.$ref;
  if (ref !== undefined) {
    var defs = b.g.d;
    var identifier = ref.slice(8);
    var def = defs[identifier];
    var flag = schema.noValidation ? (b.g.o | 1) ^ 1 : b.g.o;
    var fn = def[flag];
    var recOperation;
    if (fn !== undefined) {
      var fn$1 = Caml_option.valFromOption(fn);
      recOperation = fn$1 === 0 ? embed(b, def) + ("[" + flag + "]") : embed(b, fn$1);
    } else {
      def[flag] = 0;
      var fn$2 = internalCompile(def, flag, b.g.d);
      def[flag] = fn$2;
      recOperation = embed(b, fn$2);
    }
    input = withPathPrepend(b, input, path, undefined, undefined, (function (param, input, param$1) {
            var output = map(recOperation, input);
            if (def.isAsync === undefined) {
              var defsMut = copy(defs);
              defsMut[identifier] = unknown;
              isAsyncInternal(def, defsMut);
            }
            if (def.isAsync) {
              output.f = output.f | 2;
            }
            return output;
          }));
    input.v(b);
  }
  var refiner = schema.refiner;
  if (refiner !== undefined) {
    input = refiner(b, input, schema, path);
  }
  var to = schema.to;
  if (to !== undefined) {
    var parser = schema.parser;
    if (parser !== undefined) {
      input = parser(b, input, schema, path);
    } else {
      var target = schema.to;
      var isFromLiteral = isLiteral(schema);
      var isTargetLiteral = isLiteral(target);
      var exit = 0;
      var fromTag = schema.type;
      var exit$1 = 0;
      var exit$2 = 0;
      var targetTag = target.type;
      if (isFromLiteral && isTargetLiteral) {
        input = {
          b: b,
          v: _notVar,
          i: inlineConst(b, target),
          f: 1,
          s: target
        };
      } else if (!(fromTag === targetTag && isFromLiteral && !isTargetLiteral) && targetTag !== "unknown") {
        switch (fromTag) {
          case "string" :
              var match = target.type;
              var exit$3 = 0;
              switch (match) {
                case "string" :
                    var match$1 = target.const;
                    if (match$1 !== undefined) {
                      exit = 1;
                    }
                    break;
                case "number" :
                case "bigint" :
                case "boolean" :
                case "null" :
                case "undefined" :
                case "nan" :
                    exit$3 = 4;
                    break;
                default:
                  exit$1 = 2;
              }
              if (exit$3 === 4) {
                var $$const = target.const;
                if (isTargetLiteral) {
                  input = withCoerceScope(b, input, path, target, (function (b, inputVar, failCoercion) {
                          b.c = b.c + (inputVar + "===\"" + $$const + "\"||" + failCoercion + ";");
                          return {
                                  b: b,
                                  v: _notVar,
                                  i: inlineConst(b, target),
                                  f: 1,
                                  s: target
                                };
                        }));
                } else {
                  switch (match) {
                    case "number" :
                        var format = target.format;
                        input = withCoerceScope(b, input, path, target, (function (b, inputVar, failCoercion) {
                                var output = {
                                  b: b,
                                  v: _notVar,
                                  i: "+" + inputVar,
                                  f: 1,
                                  s: target
                                };
                                var outputVar = output.v(b);
                                b.c = b.c + (
                                  format !== undefined ? "(" + refinement(b, outputVar, target, true).slice(2) + ")" : "Number.isNaN(" + outputVar + ")"
                                ) + ("&&" + failCoercion + ";");
                                return output;
                              }));
                        break;
                    case "bigint" :
                        input = withCoerceScope(b, input, path, target, (function (b, inputVar, failCoercion) {
                                var output = allocateVal(b, target);
                                b.c = b.c + ("try{" + output.i + "=BigInt(" + inputVar + ")}catch(_){" + failCoercion + "}");
                                return output;
                              }));
                        break;
                    case "boolean" :
                        input = withCoerceScope(b, input, path, target, (function (b, inputVar, failCoercion) {
                                var output = allocateVal(b, target);
                                b.c = b.c + ("(" + output.i + "=" + inputVar + "===\"true\")||" + inputVar + "===\"false\"||" + failCoercion + ";");
                                return output;
                              }));
                        break;
                    default:
                      exit$1 = 2;
                  }
                }
              }
              break;
          case "number" :
              var match$2 = schema.format;
              if (match$2 === "int32") {
                var match$3 = target.type;
                if (match$3 === "number") {
                  var match$4 = target.format;
                  if (match$4 !== undefined) {
                    exit$2 = 3;
                  }
                  
                } else {
                  exit$2 = 3;
                }
              } else {
                exit$2 = 3;
              }
              break;
          case "unknown" :
              exit = 1;
              break;
          case "bigint" :
          case "boolean" :
          case "null" :
          case "undefined" :
          case "nan" :
              exit$2 = 3;
              break;
          default:
            exit$1 = 2;
        }
      }
      if (exit$2 === 3) {
        var $$const$1 = schema.const;
        var match$5 = target.type;
        if (match$5 === "string") {
          if (isFromLiteral) {
            input = {
              b: b,
              v: _notVar,
              i: "\"" + $$const$1 + "\"",
              f: 1,
              s: target
            };
          } else {
            var exit$4 = 0;
            switch (fromTag) {
              case "number" :
              case "bigint" :
              case "boolean" :
                  exit$4 = 4;
                  break;
              default:
                exit$1 = 2;
            }
            if (exit$4 === 4) {
              var match$6 = target.type;
              if (match$6 === "string") {
                input = {
                  b: b,
                  v: _notVar,
                  i: "\"\"+" + input.i,
                  f: 1,
                  s: target
                };
              } else {
                exit$1 = 2;
              }
            }
            
          }
        } else {
          exit$1 = 2;
        }
      }
      if (exit$1 === 2) {
        var message = "Coercion from " + toExpression(schema) + " to " + toExpression(target) + " is not supported";
        throw new Error("[Sury] " + message);
      }
      if (exit === 1) {
        input.f = (input.f | 1) ^ 1;
      }
      
    }
    input = parse(b, to, input, path);
  }
  prevB.c = prevB.c + allocateScope(b);
  return input;
}

function jsonableValidation(output, parent, path, flag) {
  var tag = output.type;
  if (tag === "undefined" && parent.type !== "object" || nonJsonableTags.has(tag)) {
    throw new SuryError({
              TAG: "InvalidJsonSchema",
              _0: parent
            }, flag, path);
  }
  if (tag === "union") {
    output.anyOf.forEach(function (s) {
          jsonableValidation(s, parent, path, flag);
        });
    return ;
  }
  if (!(tag === "array" || tag === "object")) {
    return ;
  }
  var additionalItems = output.additionalItems;
  var items = output.items;
  if (items === undefined) {
    return ;
  }
  if (additionalItems === "strip" || additionalItems === "strict") {
    additionalItems === "strip";
  } else {
    jsonableValidation(additionalItems, parent, path, flag);
  }
  items.forEach(function (item) {
        jsonableValidation(item.schema, output, path + ("[" + item.inlinedLocation + "]"), flag);
      });
}

function reverse(schema) {
  var reversedHead;
  var current = schema;
  while(current) {
    var mut = copyWithoutCache(current);
    var next = mut.to;
    var to = reversedHead;
    if (to !== undefined) {
      mut.to = to;
    } else {
      ((delete mut.to));
    }
    var parser = mut.parser;
    var serializer = mut.serializer;
    if (serializer !== undefined) {
      mut.parser = serializer;
    } else {
      ((delete mut.parser));
    }
    if (parser !== undefined) {
      mut.serializer = parser;
    } else {
      ((delete mut.serializer));
    }
    var items = mut.items;
    if (items !== undefined) {
      var properties = {};
      var newItems = new Array(items.length);
      for(var idx = 0 ,idx_finish = items.length; idx < idx_finish; ++idx){
        var item = items[idx];
        var reversed_schema = reverse(item.schema);
        var reversed_location = item.location;
        var reversed_inlinedLocation = item.inlinedLocation;
        var reversed = {
          schema: reversed_schema,
          location: reversed_location,
          inlinedLocation: reversed_inlinedLocation
        };
        if (item.r) {
          reversed.r = item.r;
        }
        properties[item.location] = reversed_schema;
        newItems[idx] = reversed;
      }
      mut.items = newItems;
      var match = mut.properties;
      if (match !== undefined) {
        mut.properties = properties;
      }
      
    }
    if (typeof mut.additionalItems === "object") {
      mut.additionalItems = reverse(mut.additionalItems);
    }
    var anyOf = mut.anyOf;
    if (anyOf !== undefined) {
      var has = {};
      var newAnyOf = [];
      for(var idx$1 = 0 ,idx_finish$1 = anyOf.length; idx$1 < idx_finish$1; ++idx$1){
        var s = anyOf[idx$1];
        var reversed$1 = reverse(s);
        newAnyOf.push(reversed$1);
        setHas(has, reversed$1.type);
      }
      mut.has = has;
      mut.anyOf = newAnyOf;
    }
    var defs = mut.$defs;
    if (defs !== undefined) {
      var reversedDefs = {};
      for(var idx$2 = 0 ,idx_finish$2 = Object.keys(defs).length; idx$2 < idx_finish$2; ++idx$2){
        var key = Object.keys(defs)[idx$2];
        reversedDefs[key] = reverse(defs[key]);
      }
      mut.$defs = reversedDefs;
    }
    reversedHead = mut;
    current = next;
  };
  return reversedHead;
}

function internalCompile(schema, flag, defs) {
  var b = rootScope(flag, defs);
  if (flag & 8) {
    var output = reverse(schema);
    jsonableValidation(output, output, "", flag);
  }
  var input = {
    b: b,
    v: _var,
    i: "i",
    f: has(flag, 1) || isLiteral(schema) ? 0 : 1,
    s: unknown
  };
  var output$1 = parse(b, schema, input, "");
  var code = allocateScope(b);
  var isAsync = has(output$1.f, 2);
  schema.isAsync = isAsync;
  if (code === "" && output$1 === input && !(flag & 22)) {
    return noopOperation;
  }
  var inlinedOutput = flag & 4 ? "void 0" : output$1.i;
  if (flag & 16) {
    inlinedOutput = "JSON.stringify(" + inlinedOutput + ")";
  }
  if (flag & 2 && !isAsync && !defs) {
    inlinedOutput = "Promise.resolve(" + inlinedOutput + ")";
  }
  var inlinedFunction = "i=>{" + code + "return " + inlinedOutput + "}";
  return new Function("e", "s", "return " + inlinedFunction)(b.g.e, s);
}

function isAsyncInternal(schema, defs) {
  try {
    var b = rootScope(2, defs);
    var input = {
      b: b,
      v: _var,
      i: "i",
      f: 0,
      s: unknown
    };
    var output = parse(b, schema, input, "");
    var isAsync = has(output.f, 2);
    schema.isAsync = isAsync;
    return isAsync;
  }
  catch (exn){
    getOrRethrow(exn);
    return false;
  }
}

function getOutputSchema(_schema) {
  while(true) {
    var schema = _schema;
    var to = schema.to;
    if (to === undefined) {
      return schema;
    }
    _schema = to;
    continue ;
  };
}

function operationFn(s, o) {
  if ((o in s)) {
    return (s[o]);
  }
  var f = internalCompile(o & 32 ? reverse(s) : s, o, 0);
  ((s[o] = f));
  return f;
}

d(sp, "~standard", {
      get: (function () {
          var schema = this;
          return {
                  version: 1,
                  vendor: vendor,
                  validate: (function (input) {
                      try {
                        return {
                                value: operationFn(schema, 1)(input)
                              };
                      }
                      catch (exn){
                        var error = getOrRethrow(exn);
                        return {
                                issues: [{
                                    message: message(error),
                                    path: error.path === "" ? undefined : toArray(error.path)
                                  }]
                              };
                      }
                    })
                };
        })
    });

function compile(schema, input, output, mode, typeValidationOpt) {
  var typeValidation = typeValidationOpt !== undefined ? typeValidationOpt : true;
  var flag = 0;
  var exit = 0;
  switch (output) {
    case "Output" :
    case "Input" :
        exit = 1;
        break;
    case "Assert" :
        flag = flag | 4;
        break;
    case "Json" :
        flag = flag | 8;
        break;
    case "JsonString" :
        flag = flag | 24;
        break;
    
  }
  if (exit === 1 && output === input) {
    throw new Error("[Sury] Can't compile operation to converting value to self");
  }
  if (mode !== "Sync") {
    flag = flag | 2;
  }
  if (typeValidation) {
    flag = flag | 1;
  }
  if (input === "Output") {
    flag = flag | 32;
  }
  var fn = operationFn(schema, flag);
  if (input !== "JsonString") {
    return fn;
  }
  var flag$1 = flag;
  return function (jsonString) {
    try {
      return fn(JSON.parse(jsonString));
    }
    catch (exn){
      throw new SuryError({
                TAG: "OperationFailed",
                _0: exn.message
              }, flag$1, "");
    }
  };
}

function parseOrThrow(any, schema) {
  return operationFn(schema, 1)(any);
}

function parseJsonStringOrThrow(jsonString, schema) {
  var tmp;
  try {
    tmp = JSON.parse(jsonString);
  }
  catch (exn){
    throw new SuryError({
              TAG: "OperationFailed",
              _0: exn.message
            }, 1, "");
  }
  return parseOrThrow(tmp, schema);
}

function parseAsyncOrThrow(any, schema) {
  return operationFn(schema, 3)(any);
}

function convertOrThrow(input, schema) {
  return operationFn(schema, 0)(input);
}

function convertToJsonOrThrow(any, schema) {
  return operationFn(schema, 8)(any);
}

function convertToJsonStringOrThrow(input, schema) {
  return operationFn(schema, 24)(input);
}

function convertAsyncOrThrow(any, schema) {
  return operationFn(schema, 2)(any);
}

function reverseConvertOrThrow(value, schema) {
  return operationFn(schema, 32)(value);
}

function reverseConvertToJsonOrThrow(value, schema) {
  return operationFn(schema, 40)(value);
}

function reverseConvertToJsonStringOrThrow(value, schema, spaceOpt) {
  var space = spaceOpt !== undefined ? spaceOpt : 0;
  return JSON.stringify(reverseConvertToJsonOrThrow(value, schema), null, space);
}

function assertOrThrow(any, schema) {
  return operationFn(schema, 5)(any);
}

var $$undefined = new Schema("undefined");

$$undefined.const = (void 0);

var $$null = new Schema("null");

$$null.const = null;

function parse$1(value) {
  if (value === null) {
    return $$null;
  }
  var $$typeof = typeof value;
  var schema;
  if ($$typeof === "object") {
    var i = new Schema("instance");
    i.class = value.constructor;
    schema = i;
  } else {
    schema = $$typeof === "undefined" ? $$undefined : (
        $$typeof === "number" ? (
            Number.isNaN(value) ? new Schema("nan") : new Schema($$typeof)
          ) : new Schema($$typeof)
      );
  }
  schema.const = value;
  return schema;
}

function isAsync(schema) {
  var v = schema.isAsync;
  if (v !== undefined) {
    return v;
  } else {
    return isAsyncInternal(schema, 0);
  }
}

function wrapExnToFailure(exn) {
  if ((exn&&exn.s===s)) {
    return {
            success: false,
            error: exn
          };
  }
  throw exn;
}

function js_safe(fn) {
  try {
    return {
            success: true,
            value: fn()
          };
  }
  catch (exn){
    return wrapExnToFailure(exn);
  }
}

function js_safeAsync(fn) {
  try {
    return fn().then((function (value) {
                  return {
                          success: true,
                          value: value
                        };
                }), wrapExnToFailure);
  }
  catch (exn){
    return Promise.resolve(wrapExnToFailure(exn));
  }
}

function make$1(namespace, name) {
  return "m:" + namespace + ":" + name;
}

function internal(name) {
  return "m:" + name;
}

var Id = {
  make: make$1,
  internal: internal
};

function get$1(schema, id) {
  return schema[id];
}

function set$1(schema, id, metadata) {
  var mut = copyWithoutCache(schema);
  mut[id] = metadata;
  return mut;
}

var defsPath = "#/$defs/";

function recursive(name, fn) {
  var ref = defsPath + name;
  var refSchema = new Schema("ref");
  refSchema.$ref = ref;
  refSchema.name = name;
  var isNestedRec = globalConfig.d;
  if (!isNestedRec) {
    globalConfig.d = {};
  }
  var def = fn(refSchema);
  if (def.name) {
    refSchema.name = def.name;
  } else {
    def.name = name;
  }
  globalConfig.d[name] = def;
  if (isNestedRec) {
    return refSchema;
  }
  var schema = new Schema("ref");
  schema.name = def.name;
  schema.$ref = ref;
  schema.$defs = globalConfig.d;
  globalConfig.d = undefined;
  return schema;
}

function noValidation(schema, value) {
  var mut = copyWithoutCache(schema);
  mut.noValidation = value;
  return mut;
}

function internalRefine(schema, refiner) {
  return updateOutput(schema, (function (mut) {
                var prevRefiner = mut.refiner;
                mut.refiner = (function (b, input, selfSchema, path) {
                    return transform(b, prevRefiner !== undefined ? prevRefiner(b, input, selfSchema, path) : input, (function (b, input) {
                                  var rCode = refiner(b, input.v(b), selfSchema, path);
                                  b.c = b.c + rCode;
                                  return input;
                                }));
                  });
              }));
}

function refine(schema, refiner) {
  return internalRefine(schema, (function (b, inputVar, selfSchema, path) {
                return embed(b, refiner(effectCtx(b, selfSchema, path))) + "(" + inputVar + ");";
              }));
}

function addRefinement(schema, metadataId, refinement, refiner) {
  var refinements = schema[metadataId];
  return internalRefine(set$1(schema, metadataId, refinements !== undefined ? refinements.concat(refinement) : [refinement]), refiner);
}

function transform$1(schema, transformer) {
  return updateOutput(schema, (function (mut) {
                mut.parser = (function (b, input, selfSchema, path) {
                    var match = transformer(effectCtx(b, selfSchema, path));
                    var parser = match.p;
                    if (parser !== undefined) {
                      if (match.a !== undefined) {
                        return invalidOperation(b, path, "The S.transform doesn't allow parser and asyncParser at the same time. Remove parser in favor of asyncParser");
                      } else {
                        return embedSyncOperation(b, input, parser);
                      }
                    }
                    var asyncParser = match.a;
                    if (asyncParser !== undefined) {
                      if (!(b.g.o & 2)) {
                        raise(b, "UnexpectedAsync", "");
                      }
                      var val = embedSyncOperation(b, input, asyncParser);
                      val.f = val.f | 2;
                      return val;
                    } else if (match.s !== undefined) {
                      return invalidOperation(b, path, "The S.transform parser is missing");
                    } else {
                      return input;
                    }
                  });
                var to = new Schema("unknown");
                mut.to = (to.serializer = (function (b, input, selfSchema, path) {
                      var match = transformer(effectCtx(b, selfSchema, path));
                      var serializer = match.s;
                      if (serializer !== undefined) {
                        return embedSyncOperation(b, input, serializer);
                      } else if (match.a !== undefined || match.p !== undefined) {
                        return invalidOperation(b, path, "The S.transform serializer is missing");
                      } else {
                        return input;
                      }
                    }), to);
                ((delete mut.isAsync));
              }));
}

var nullAsUnit = new Schema("null");

nullAsUnit.const = null;

nullAsUnit.to = $$undefined;

function neverBuilder(b, input, selfSchema, path) {
  b.c = b.c + failWithArg(b, path, (function (input) {
          return {
                  TAG: "InvalidType",
                  expected: selfSchema,
                  received: input
                };
        }), input.i) + ";";
  return input;
}

var never = new Schema("never");

never.refiner = neverBuilder;

function getItemCode(b, schema, input, output, param, path) {
  try {
    var bb = {
      c: "",
      l: "",
      a: initialAllocate,
      f: "",
      g: b.g
    };
    var input$1 = {
      b: input.b,
      v: input.v,
      i: input.i,
      f: input.f,
      s: input.s
    };
    var itemOutput = parse(bb, schema, input$1, path);
    if (itemOutput !== input$1) {
      itemOutput.b = bb;
      if (schema.type === "unknown") {
        var reversed = reverse(schema);
        bb.c = bb.c + typeFilterCode(bb, reversed, itemOutput, path);
      }
      if (itemOutput.f & 2) {
        output.f = output.f | 2;
      }
      bb.c = bb.c + (output.v(b) + "=" + itemOutput.i);
    }
    return allocateScope(bb);
  }
  catch (exn){
    return "throw " + embed(b, getOrRethrow(exn));
  }
}

function isPriority(tag, byKey) {
  if ((tag === "array" || tag === "instance") && byKey["object"]) {
    return true;
  } else if (tag === "nan") {
    return byKey["number"];
  } else {
    return false;
  }
}

function refiner(b, input, selfSchema, path) {
  var fail = function (caught) {
    return embed(b, (function (param) {
                  var args = arguments;
                  return raise(b, {
                              TAG: "InvalidType",
                              expected: selfSchema,
                              received: args[0],
                              unionErrors: args.length > 1 ? Array.from(args).slice(1) : undefined
                            }, path);
                })) + "(" + input.v(b) + caught + ")";
  };
  var schemas = selfSchema.anyOf;
  var typeValidation = b.g.o & 1;
  var initialInline = input.i;
  var deoptIdx = -1;
  var lastIdx = schemas.length - 1 | 0;
  var byKey = {};
  var keys = [];
  for(var idx = 0; idx <= lastIdx; ++idx){
    var schema = schemas[idx];
    var tag = schema.type;
    var exit = 0;
    switch (tag) {
      case "never" :
      case "unknown" :
      case "union" :
      case "ref" :
          exit = 1;
          break;
      default:
        var key = tag === "instance" ? schema.class.name : tag;
        var arr = byKey[key];
        if (arr !== undefined) {
          if (tag !== "undefined" && tag !== "null" && tag !== "nan") {
            arr.push(schema);
          }
          
        } else {
          if (isPriority(tag, byKey)) {
            keys.unshift(key);
          } else {
            keys.push(key);
          }
          byKey[key] = [schema];
        }
    }
    if (exit === 1) {
      deoptIdx = idx;
      byKey = {};
      keys = [];
    }
    
  }
  var deoptIdx$1 = deoptIdx;
  var byKey$1 = byKey;
  var keys$1 = keys;
  var start = "";
  var end = "";
  var caught = "";
  var exit$1 = false;
  if (deoptIdx$1 !== -1) {
    for(var idx$1 = 0; idx$1 <= deoptIdx$1; ++idx$1){
      if (!exit$1) {
        var schema$1 = schemas[idx$1];
        var itemCode = getItemCode(b, schema$1, input, input, true, path);
        if (itemCode) {
          var errorVar = "e" + idx$1;
          start = start + ("try{" + itemCode + "}catch(" + errorVar + "){");
          end = "}" + end;
          caught = caught + "," + errorVar;
        } else {
          exit$1 = true;
        }
      }
      
    }
  }
  if (!exit$1) {
    var nextElse = false;
    var noop = "";
    for(var idx$2 = 0 ,idx_finish = keys$1.length; idx$2 < idx_finish; ++idx$2){
      var schemas$1 = byKey$1[keys$1[idx$2]];
      var isMultiple = schemas$1.length > 1;
      var firstSchema = schemas$1[0];
      var cond = 0;
      var body;
      if (isMultiple) {
        var inputVar = input.v(b);
        var itemStart = "";
        var itemEnd = "";
        var itemNextElse = false;
        var itemNoop = {
          contents: ""
        };
        var caught$1 = "";
        var byDiscriminant = {};
        var itemIdx = 0;
        var lastIdx$1 = schemas$1.length - 1 | 0;
        while(itemIdx <= lastIdx$1) {
          var schema$2 = schemas$1[itemIdx];
          var itemCond = (
            isLiteral(schema$2) ? validation(b, inputVar, schema$2, false) : ""
          ) + refinement(b, inputVar, schema$2, false).slice(2);
          var itemCode$1 = getItemCode(b, schema$2, input, input, false, path);
          if (itemCond) {
            if (itemCode$1) {
              var match = byDiscriminant[itemCond];
              if (match !== undefined) {
                if (typeof match === "string") {
                  byDiscriminant[itemCond] = [
                    match,
                    itemCode$1
                  ];
                } else {
                  match.push(itemCode$1);
                }
              } else {
                byDiscriminant[itemCond] = itemCode$1;
              }
            } else {
              itemNoop.contents = itemNoop.contents ? itemNoop.contents + "||" + itemCond : itemCond;
            }
          }
          if (!itemCond || itemIdx === lastIdx$1) {
            var accedDiscriminants = Object.keys(byDiscriminant);
            for(var idx$3 = 0 ,idx_finish$1 = accedDiscriminants.length; idx$3 < idx_finish$1; ++idx$3){
              var discrim = accedDiscriminants[idx$3];
              var if_ = itemNextElse ? "else if" : "if";
              itemStart = itemStart + if_ + ("(" + discrim + "){");
              var code = byDiscriminant[discrim];
              if (typeof code === "string") {
                itemStart = itemStart + code + "}";
              } else {
                var caught$2 = "";
                for(var idx$4 = 0 ,idx_finish$2 = code.length; idx$4 < idx_finish$2; ++idx$4){
                  var code$1 = code[idx$4];
                  var errorVar$1 = "e" + idx$4;
                  itemStart = itemStart + ("try{" + code$1 + "}catch(" + errorVar$1 + "){");
                  caught$2 = caught$2 + "," + errorVar$1;
                }
                itemStart = itemStart + fail(caught$2) + "}".repeat(code.length) + "}";
              }
              itemNextElse = true;
            }
            byDiscriminant = {};
          }
          if (!itemCond) {
            if (itemCode$1) {
              if (itemNoop.contents) {
                var if_$1 = itemNextElse ? "else if" : "if";
                itemStart = itemStart + if_$1 + ("(!(" + itemNoop.contents + ")){");
                itemEnd = "}" + itemEnd;
                itemNoop.contents = "";
                itemNextElse = false;
              }
              var errorVar$2 = "e" + itemIdx;
              itemStart = itemStart + ((
                  itemNextElse ? "else{" : ""
                ) + "try{" + itemCode$1 + "}catch(" + errorVar$2 + "){");
              itemEnd = (
                itemNextElse ? "}" : ""
              ) + "}" + itemEnd;
              caught$1 = caught$1 + "," + errorVar$2;
              itemNextElse = false;
            } else {
              itemNoop.contents = "";
              itemIdx = lastIdx$1;
            }
          }
          itemIdx = itemIdx + 1;
        };
        cond = (function(firstSchema){
        return function (inputVar) {
          return validation(b, inputVar, {
                      type: firstSchema.type,
                      parser: 0
                    }, false);
        }
        }(firstSchema));
        if (itemNoop.contents) {
          if (itemStart) {
            if (typeValidation) {
              var if_$2 = itemNextElse ? "else if" : "if";
              itemStart = itemStart + if_$2 + ("(!(" + itemNoop.contents + ")){" + fail(caught$1) + "}");
            }
            
          } else {
            var condBefore = cond;
            cond = (function(itemNoop,condBefore){
            return function (inputVar) {
              return condBefore(inputVar) + ("&&(" + itemNoop.contents + ")");
            }
            }(itemNoop,condBefore));
          }
        } else if (typeValidation && itemStart) {
          var errorCode = fail(caught$1);
          itemStart = itemStart + (
            itemNextElse ? "else{" + errorCode + "}" : errorCode
          );
        }
        body = itemStart + itemEnd;
      } else {
        cond = (function(firstSchema){
        return function (inputVar) {
          return validation(b, inputVar, firstSchema, false) + refinement(b, inputVar, firstSchema, false);
        }
        }(firstSchema));
        body = getItemCode(b, firstSchema, input, input, false, path);
      }
      if (body || isPriority(firstSchema.type, byKey$1)) {
        var if_$3 = nextElse ? "else if" : "if";
        start = start + if_$3 + ("(" + cond(input.v(b)) + "){" + body + "}");
        nextElse = true;
      } else if (typeValidation) {
        var cond$1 = cond(input.v(b));
        noop = noop ? noop + "||" + cond$1 : cond$1;
      }
      
    }
    if (typeValidation || deoptIdx$1 === lastIdx) {
      var errorCode$1 = fail(caught);
      var tmp;
      if (noop) {
        var if_$4 = nextElse ? "else if" : "if";
        tmp = if_$4 + ("(!(" + noop + ")){" + errorCode$1 + "}");
      } else {
        tmp = nextElse ? "else{" + errorCode$1 + "}" : errorCode$1;
      }
      start = start + tmp;
    }
    
  }
  b.c = b.c + start + end;
  if (input.f & 2) {
    return {
            b: b,
            v: _notVar,
            i: "Promise.resolve(" + input.i + ")",
            f: 3,
            s: unknown
          };
  } else if (input.v === _var) {
    if (b.c === "" && input.b.c === "" && (input.b.l === input.i + "=" + initialInline || initialInline === "i")) {
      input.b.l = "";
      input.b.a = initialAllocate;
      input.v = _notVar;
      input.i = initialInline;
      return input;
    } else {
      return {
              b: input.b,
              v: input.v,
              i: input.i,
              f: input.f,
              s: input.s
            };
    }
  } else {
    return input;
  }
}

function factory(schemas) {
  var len = schemas.length;
  if (len === 1) {
    return schemas[0];
  }
  if (len !== 0) {
    var has = {};
    var anyOf = new Set();
    for(var idx = 0 ,idx_finish = schemas.length; idx < idx_finish; ++idx){
      var schema = schemas[idx];
      if (schema.type === "union" && schema.to === undefined) {
        schema.anyOf.forEach(function (item) {
              anyOf.add(item);
            });
        Object.assign(has, schema.has);
      } else {
        anyOf.add(schema);
        setHas(has, schema.type);
      }
    }
    var mut = new Schema("union");
    mut.anyOf = Array.from(anyOf);
    mut.refiner = refiner;
    mut.has = has;
    return mut;
  }
  throw new Error("[Sury] S.union requires at least one item");
}

var nestedLoc = "BS_PRIVATE_NESTED_SOME_NONE";

var inlinedNestedLoc = "\"" + nestedLoc + "\"";

function nestedNone() {
  var itemSchema = parse$1(0);
  var item = {
    schema: itemSchema,
    location: nestedLoc,
    inlinedLocation: inlinedNestedLoc
  };
  var properties = {};
  properties[nestedLoc] = itemSchema;
  return {
          type: "object",
          serializer: (function (b, param, selfSchema, param$1) {
              return {
                      b: b,
                      v: _notVar,
                      i: inlineConst(b, selfSchema.to),
                      f: 1,
                      s: selfSchema.to
                    };
            }),
          additionalItems: "strip",
          items: [item],
          properties: properties
        };
}

function parser(b, param, selfSchema, param$1) {
  return {
          b: b,
          v: _notVar,
          i: "{" + inlinedNestedLoc + ":" + getOutputSchema(selfSchema).items[0].schema.const + "}",
          f: 1,
          s: selfSchema.to
        };
}

function nestedOption(item) {
  return updateOutput(item, (function (mut) {
                mut.to = nestedNone();
                mut.parser = parser;
              }));
}

function factory$1(item, unitOpt) {
  var unit = unitOpt !== undefined ? unitOpt : $$undefined;
  var match = getOutputSchema(item);
  var match$1 = match.type;
  switch (match$1) {
    case "undefined" :
        return factory([
                    unit,
                    nestedOption(item)
                  ]);
    case "union" :
        var has = match.has;
        var anyOf = match.anyOf;
        return updateOutput(item, (function (mut) {
                      var mutHas = copy(has);
                      var newAnyOf = [];
                      for(var idx = 0 ,idx_finish = anyOf.length; idx < idx_finish; ++idx){
                        var schema = anyOf[idx];
                        var match = getOutputSchema(schema);
                        var match$1 = match.type;
                        var tmp;
                        if (match$1 === "undefined") {
                          mutHas[unit.type] = true;
                          newAnyOf.push(unit);
                          tmp = nestedOption(schema);
                        } else {
                          var properties = match.properties;
                          if (properties !== undefined) {
                            var nestedSchema = properties[nestedLoc];
                            tmp = nestedSchema !== undefined ? updateOutput(schema, (function(nestedSchema){
                                  return function (mut) {
                                    var newItem_schema = {
                                      type: nestedSchema.type,
                                      parser: nestedSchema.parser,
                                      const: nestedSchema.const + 1
                                    };
                                    var newItem = {
                                      schema: newItem_schema,
                                      location: nestedLoc,
                                      inlinedLocation: inlinedNestedLoc
                                    };
                                    var properties = {};
                                    properties[nestedLoc] = newItem_schema;
                                    mut.items = [newItem];
                                    mut.properties = properties;
                                  }
                                  }(nestedSchema))) : schema;
                          } else {
                            tmp = schema;
                          }
                        }
                        newAnyOf.push(tmp);
                      }
                      if (newAnyOf.length === anyOf.length) {
                        mutHas[unit.type] = true;
                        newAnyOf.push(unit);
                      }
                      mut.anyOf = newAnyOf;
                      mut.has = mutHas;
                    }));
    default:
      return factory([
                  item,
                  unit
                ]);
  }
}

function getWithDefault(schema, $$default) {
  return updateOutput(schema, (function (mut) {
                var anyOf = mut.anyOf;
                if (anyOf !== undefined) {
                  var item;
                  var itemOutputSchema;
                  for(var idx = 0 ,idx_finish = anyOf.length; idx < idx_finish; ++idx){
                    var schema = anyOf[idx];
                    var outputSchema = getOutputSchema(schema);
                    var match = outputSchema.type;
                    if (match !== "undefined") {
                      var match$1 = item;
                      if (match$1 !== undefined) {
                        var message = "Can't set default for " + toExpression(mut);
                        throw new Error("[Sury] " + message);
                      }
                      item = schema;
                      itemOutputSchema = outputSchema;
                    }
                    
                  }
                  var s = item;
                  var item$1;
                  if (s !== undefined) {
                    item$1 = s;
                  } else {
                    var message$1 = "Can't set default for " + toExpression(mut);
                    throw new Error("[Sury] " + message$1);
                  }
                  mut.parser = (function (b, input, selfSchema, param) {
                      return transform(b, input, (function (b, input) {
                                    var inputVar = input.v(b);
                                    var tmp;
                                    tmp = $$default.TAG === "Value" ? inlineConst(b, parse$1($$default._0)) : embed(b, $$default._0) + "()";
                                    return {
                                            b: b,
                                            v: _notVar,
                                            i: inputVar + "===void 0?" + tmp + ":" + inputVar,
                                            f: 1,
                                            s: selfSchema.to
                                          };
                                  }));
                    });
                  var to = copyWithoutCache(itemOutputSchema);
                  var refiner = to.refiner;
                  if (refiner !== undefined) {
                    to.serializer = refiner;
                    ((delete to.refiner));
                  } else {
                    to.serializer = (function (_b, input, param, param$1) {
                        return input;
                      });
                  }
                  mut.to = to;
                  if ($$default.TAG !== "Value") {
                    return ;
                  }
                  try {
                    mut.default = operationFn(item$1, 32)($$default._0);
                    return ;
                  }
                  catch (exn){
                    return ;
                  }
                } else {
                  var message$2 = "Can't set default for " + toExpression(mut);
                  throw new Error("[Sury] " + message$2);
                }
              }));
}

function getOr(schema, defalutValue) {
  return getWithDefault(schema, {
              TAG: "Value",
              _0: defalutValue
            });
}

function getOrWith(schema, defalutCb) {
  return getWithDefault(schema, {
              TAG: "Callback",
              _0: defalutCb
            });
}

var metadataId = "m:Array.refinements";

function refinements(schema) {
  var m = schema[metadataId];
  if (m !== undefined) {
    return m;
  } else {
    return [];
  }
}

function arrayRefiner(b, input, selfSchema, path) {
  var item = selfSchema.additionalItems;
  var inputVar = input.v(b);
  var iteratorVar = varWithoutAllocation(b.g);
  var bb = {
    c: "",
    l: "",
    a: initialAllocate,
    f: "",
    g: b.g
  };
  var itemInput = {
    b: bb,
    v: _notVar,
    i: inputVar + "[" + iteratorVar + "]",
    f: 0,
    s: unknown
  };
  var itemOutput = withPathPrepend(bb, itemInput, path, iteratorVar, undefined, (function (b, input, path) {
          return parse(b, item, input, path);
        }));
  var itemCode = allocateScope(bb);
  var isTransformed = itemInput !== itemOutput;
  var output = isTransformed ? ({
        b: b,
        v: _notVar,
        i: "new Array(" + inputVar + ".length)",
        f: 1,
        s: selfSchema
      }) : input;
  if (isTransformed || itemCode !== "") {
    b.c = b.c + ("for(let " + iteratorVar + "=0;" + iteratorVar + "<" + inputVar + ".length;++" + iteratorVar + "){" + itemCode + (
        isTransformed ? addKey(b, output, iteratorVar, itemOutput) : ""
      ) + "}");
  }
  if (itemOutput.f & 2) {
    return {
            b: output.b,
            v: _notVar,
            i: "Promise.all(" + output.i + ")",
            f: 3,
            s: unknown
          };
  } else {
    return output;
  }
}

function factory$2(item) {
  var mut = new Schema("array");
  mut.additionalItems = item;
  mut.items = immutableEmpty$1;
  mut.refiner = arrayRefiner;
  return mut;
}

function setAdditionalItems(schema, additionalItems, deep) {
  var currentAdditionalItems = schema.additionalItems;
  if (currentAdditionalItems === undefined) {
    return schema;
  }
  var items = schema.items;
  if (!(currentAdditionalItems !== additionalItems && typeof currentAdditionalItems !== "object")) {
    return schema;
  }
  var mut = copyWithoutCache(schema);
  mut.additionalItems = additionalItems;
  if (deep) {
    var newItems = [];
    var newProperties = {};
    for(var idx = 0 ,idx_finish = items.length; idx < idx_finish; ++idx){
      var item = items[idx];
      var newSchema = setAdditionalItems(item.schema, additionalItems, deep);
      var newItem = newSchema === item.schema ? item : ({
            schema: newSchema,
            location: item.location,
            inlinedLocation: item.inlinedLocation
          });
      newProperties[item.location] = newSchema;
      newItems.push(newItem);
    }
    mut.items = newItems;
    mut.properties = newProperties;
  }
  return mut;
}

function strip(schema) {
  return setAdditionalItems(schema, "strip", false);
}

function deepStrip(schema) {
  return setAdditionalItems(schema, "strip", true);
}

function strict(schema) {
  return setAdditionalItems(schema, "strict", false);
}

function deepStrict(schema) {
  return setAdditionalItems(schema, "strict", true);
}

function dictRefiner(b, input, selfSchema, path) {
  var item = selfSchema.additionalItems;
  var inputVar = input.v(b);
  var keyVar = varWithoutAllocation(b.g);
  var bb = {
    c: "",
    l: "",
    a: initialAllocate,
    f: "",
    g: b.g
  };
  var itemInput = {
    b: bb,
    v: _notVar,
    i: inputVar + "[" + keyVar + "]",
    f: 0,
    s: unknown
  };
  var itemOutput = withPathPrepend(bb, itemInput, path, keyVar, undefined, (function (b, input, path) {
          return parse(b, item, input, path);
        }));
  var itemCode = allocateScope(bb);
  var isTransformed = itemInput !== itemOutput;
  var output = isTransformed ? ({
        b: b,
        v: _notVar,
        i: "{}",
        f: 1,
        s: selfSchema
      }) : input;
  if (isTransformed || itemCode !== "") {
    b.c = b.c + ("for(let " + keyVar + " in " + inputVar + "){" + itemCode + (
        isTransformed ? addKey(b, output, keyVar, itemOutput) : ""
      ) + "}");
  }
  if (!(itemOutput.f & 2)) {
    return output;
  }
  var resolveVar = varWithoutAllocation(b.g);
  var rejectVar = varWithoutAllocation(b.g);
  var asyncParseResultVar = varWithoutAllocation(b.g);
  var counterVar = varWithoutAllocation(b.g);
  var outputVar = output.v(b);
  return {
          b: b,
          v: _notVar,
          i: "new Promise((" + resolveVar + "," + rejectVar + ")=>{let " + counterVar + "=Object.keys(" + outputVar + ").length;for(let " + keyVar + " in " + outputVar + "){" + outputVar + "[" + keyVar + "].then(" + asyncParseResultVar + "=>{" + outputVar + "[" + keyVar + "]=" + asyncParseResultVar + ";if(" + counterVar + "--===1){" + resolveVar + "(" + outputVar + ")}}," + rejectVar + ")}})",
          f: 3,
          s: unknown
        };
}

function factory$3(item) {
  var mut = new Schema("object");
  mut.properties = immutableEmpty;
  mut.items = immutableEmpty$1;
  mut.additionalItems = item;
  mut.refiner = dictRefiner;
  return mut;
}

var Tuple = {};

var metadataId$1 = "m:String.refinements";

function refinements$1(schema) {
  var m = schema[metadataId$1];
  if (m !== undefined) {
    return m;
  } else {
    return [];
  }
}

var cuidRegex = /^c[^\s-]{8,}$/i;

var uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;

var emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;

var datetimeRe = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z$/;

var jsonName = "JSON";

var jsonRef = new Schema("ref");

jsonRef.$ref = defsPath + jsonName;

jsonRef.name = jsonName;

var json = new Schema(jsonRef.type);

json.$ref = jsonRef.$ref;

json.name = jsonName;

var defs = {};

defs[jsonName] = {
  type: "union",
  refiner: refiner,
  name: jsonName,
  has: {
        string: true,
        boolean: true,
        number: true,
        null: true,
        object: true,
        array: true,
      },
  anyOf: [
    string,
    bool,
    $$float,
    $$null,
    factory$3(jsonRef),
    factory$2(jsonRef)
  ]
};

json.$defs = defs;

function factory$4(item, spaceOpt) {
  var space = spaceOpt !== undefined ? spaceOpt : 0;
  var mut = new Schema("string");
  mut.parser = (function (b, input, param, path) {
      var jsonVal = allocateVal(b, json);
      b.c = b.c + ("try{" + jsonVal.i + "=JSON.parse(" + input.i + ")}catch(t){" + failWithArg(b, path, (function (message) {
                return {
                        TAG: "OperationFailed",
                        _0: message
                      };
              }), "t.message") + "}");
      typeValidation(b, item, jsonVal, path);
      return jsonVal;
    });
  var to = copyWithoutCache(item);
  to.serializer = (function (b, input, selfSchema, param) {
      jsonableValidation(selfSchema, selfSchema, "", b.g.o);
      return {
              b: b,
              v: _notVar,
              i: "JSON.stringify(" + input.i + (
                space > 0 ? ",null," + space : ""
              ) + ")",
              f: 1,
              s: string
            };
    });
  mut.to = to;
  return mut;
}

var metadataId$2 = "m:Int.refinements";

function refinements$2(schema) {
  var m = schema[metadataId$2];
  if (m !== undefined) {
    return m;
  } else {
    return [];
  }
}

var metadataId$3 = "m:Float.refinements";

function refinements$3(schema) {
  var m = schema[metadataId$3];
  if (m !== undefined) {
    return m;
  } else {
    return [];
  }
}

function to(from, target) {
  if (from === target) {
    return from;
  }
  var anyOf = target.anyOf;
  if (anyOf !== undefined) {
    return factory(anyOf.map(function (target) {
                    return to(from, target);
                  }));
  } else {
    return updateOutput(from, (function (mut) {
                  mut.to = target;
                }));
  }
}

function list(schema) {
  return transform$1(factory$2(schema), (function (param) {
                return {
                        p: Belt_List.fromArray,
                        s: Belt_List.toArray
                      };
              }));
}

function instance(class_) {
  var mut = new Schema("instance");
  mut.class = class_;
  return mut;
}

function meta(schema, data) {
  var mut = copyWithoutCache(schema);
  var name = data.name;
  if (name !== undefined) {
    if (name === "") {
      mut.name = undefined;
    } else {
      mut.name = name;
    }
  }
  var title = data.title;
  if (title !== undefined) {
    if (title === "") {
      mut.title = undefined;
    } else {
      mut.title = title;
    }
  }
  var description = data.description;
  if (description !== undefined) {
    if (description === "") {
      mut.description = undefined;
    } else {
      mut.description = description;
    }
  }
  var deprecated = data.deprecated;
  if (deprecated !== undefined) {
    mut.deprecated = deprecated;
  }
  var examples = data.examples;
  if (examples !== undefined) {
    if (examples.length !== 0) {
      mut.examples = examples.map(operationFn(schema, 32));
    } else {
      mut.examples = undefined;
    }
  }
  return mut;
}

function getFullDitemPath(ditem) {
  switch (ditem.k) {
    case 0 :
        return "[" + ditem.inlinedLocation + "]";
    case 1 :
        return getFullDitemPath(ditem.of) + ditem.p;
    case 2 :
        return ditem.p;
    
  }
}

function definitionToOutput(b, definition, getItemOutput) {
  if (typeof definition === "object" && definition !== null) {
    var item = definition[itemSymbol];
    if (item !== undefined) {
      return getItemOutput(item);
    }
    var isArray = Array.isArray(definition);
    var keys = Object.keys(definition);
    var objectVal = make(b, isArray);
    for(var idx = 0 ,idx_finish = keys.length; idx < idx_finish; ++idx){
      var key = keys[idx];
      add(objectVal, isArray ? "\"" + key + "\"" : fromString(key), definitionToOutput(b, definition[key], getItemOutput));
    }
    return complete(objectVal, isArray, unknown);
  }
  var schema = parse$1(definition);
  return {
          b: b,
          v: _var,
          i: embed(b, definition),
          f: 1,
          s: schema
        };
}

function objectStrictModeCheck(b, input, items, selfSchema, path) {
  if (!(selfSchema.type === "object" && selfSchema.additionalItems === "strict" && b.g.o & 1)) {
    return ;
  }
  var key = allocateVal(b, unknown);
  var keyVar = key.i;
  b.c = b.c + ("for(" + keyVar + " in " + input.v(b) + "){if(");
  if (items.length !== 0) {
    for(var idx = 0 ,idx_finish = items.length; idx < idx_finish; ++idx){
      var match = items[idx];
      if (idx !== 0) {
        b.c = b.c + "&&";
      }
      b.c = b.c + (keyVar + "!==" + match.inlinedLocation);
    }
  } else {
    b.c = b.c + "true";
  }
  b.c = b.c + ("){" + failWithArg(b, path, (function (exccessFieldName) {
            return {
                    TAG: "ExcessField",
                    _0: exccessFieldName
                  };
          }), keyVar) + "}}");
}

function proxify(item) {
  return new Proxy(immutableEmpty, {
              get: (function (param, prop) {
                  if (prop === itemSymbol) {
                    return item;
                  }
                  var inlinedLocation = fromString(prop);
                  var targetReversed = getOutputSchema(item.schema);
                  var items = targetReversed.items;
                  var properties = targetReversed.properties;
                  var maybeField;
                  if (properties !== undefined) {
                    maybeField = properties[prop];
                  } else if (items !== undefined) {
                    var i = items[prop];
                    maybeField = i !== undefined ? i.schema : undefined;
                  } else {
                    maybeField = undefined;
                  }
                  if (maybeField === undefined) {
                    var message = "Cannot read property " + inlinedLocation + " of " + toExpression(targetReversed);
                    throw new Error("[Sury] " + message);
                  }
                  return proxify({
                              k: 1,
                              inlinedLocation: inlinedLocation,
                              location: prop,
                              schema: maybeField,
                              of: item,
                              p: "[" + inlinedLocation + "]"
                            });
                })
            });
}

function schemaRefiner(b, input, selfSchema, path) {
  var additionalItems = selfSchema.additionalItems;
  var items = selfSchema.items;
  var isArray = selfSchema.type === "array";
  if (b.g.o & 64) {
    var objectVal = make(b, isArray);
    for(var idx = 0 ,idx_finish = items.length; idx < idx_finish; ++idx){
      var match = items[idx];
      var inlinedLocation = match.inlinedLocation;
      add(objectVal, inlinedLocation, input[inlinedLocation]);
    }
    return complete(objectVal, isArray, selfSchema);
  }
  var objectVal$1 = make(b, isArray);
  for(var idx$1 = 0 ,idx_finish$1 = items.length; idx$1 < idx_finish$1; ++idx$1){
    var match$1 = items[idx$1];
    var inlinedLocation$1 = match$1.inlinedLocation;
    var schema = match$1.schema;
    var itemInput = get(b, input, inlinedLocation$1);
    var path$1 = path + ("[" + inlinedLocation$1 + "]");
    if (input.f & 1 && (isLiteral(schema) || schema.type === "object")) {
      itemInput.f = itemInput.f | 1;
    }
    add(objectVal$1, inlinedLocation$1, parse(b, schema, itemInput, path$1));
  }
  objectStrictModeCheck(b, input, items, selfSchema, path);
  if ((additionalItems !== "strip" || b.g.o & 32) && items.every(function (item) {
          return objectVal$1[item.inlinedLocation] === input[item.inlinedLocation];
        })) {
    return input;
  } else {
    return complete(objectVal$1, isArray, selfSchema);
  }
}

function definitionToRitem(definition, path, ritemsByItemPath) {
  if (!(typeof definition === "object" && definition !== null)) {
    return {
            k: 1,
            p: path,
            s: copyWithoutCache(parse$1(definition))
          };
  }
  var item = definition[itemSymbol];
  if (item !== undefined) {
    var ritemSchema = copyWithoutCache(getOutputSchema(item.schema));
    ((delete ritemSchema.serializer));
    var ritem = {
      k: 0,
      p: path,
      s: ritemSchema
    };
    item.r = ritem;
    ritemsByItemPath[getFullDitemPath(item)] = ritem;
    return ritem;
  }
  if (Array.isArray(definition)) {
    var items = [];
    for(var idx = 0 ,idx_finish = definition.length; idx < idx_finish; ++idx){
      var $$location = idx.toString();
      var inlinedLocation = "\"" + $$location + "\"";
      var ritem$1 = definitionToRitem(definition[idx], path + ("[" + inlinedLocation + "]"), ritemsByItemPath);
      var item_schema = ritem$1.s;
      var item$1 = {
        schema: item_schema,
        location: $$location,
        inlinedLocation: inlinedLocation
      };
      items[idx] = item$1;
    }
    var mut = new Schema("array");
    return {
            k: 2,
            p: path,
            s: (mut.items = items, mut.additionalItems = "strict", mut.serializer = neverBuilder, mut)
          };
  }
  var fieldNames = Object.keys(definition);
  var properties = {};
  var items$1 = [];
  for(var idx$1 = 0 ,idx_finish$1 = fieldNames.length; idx$1 < idx_finish$1; ++idx$1){
    var $$location$1 = fieldNames[idx$1];
    var inlinedLocation$1 = fromString($$location$1);
    var ritem$2 = definitionToRitem(definition[$$location$1], path + ("[" + inlinedLocation$1 + "]"), ritemsByItemPath);
    var item_schema$1 = ritem$2.s;
    var item$2 = {
      schema: item_schema$1,
      location: $$location$1,
      inlinedLocation: inlinedLocation$1
    };
    items$1[idx$1] = item$2;
    properties[$$location$1] = item_schema$1;
  }
  var mut$1 = new Schema("object");
  return {
          k: 2,
          p: path,
          s: (mut$1.items = items$1, mut$1.properties = properties, mut$1.additionalItems = globalConfig.a, mut$1.serializer = neverBuilder, mut$1)
        };
}

function definitionToSchema(definition) {
  if (!(typeof definition === "object" && definition !== null)) {
    return parse$1(definition);
  }
  if (definition["~standard"]) {
    return definition;
  }
  if (Array.isArray(definition)) {
    for(var idx = 0 ,idx_finish = definition.length; idx < idx_finish; ++idx){
      var schema = definitionToSchema(definition[idx]);
      var $$location = idx.toString();
      var inlinedLocation = "\"" + $$location + "\"";
      definition[idx] = {
        schema: schema,
        location: $$location,
        inlinedLocation: inlinedLocation
      };
    }
    var mut = new Schema("array");
    mut.items = definition;
    mut.additionalItems = "strict";
    mut.refiner = schemaRefiner;
    return mut;
  }
  var cnstr = definition.constructor;
  if (cnstr && cnstr !== Object) {
    return {
            type: "instance",
            const: definition,
            class: cnstr
          };
  }
  var fieldNames = Object.keys(definition);
  var length = fieldNames.length;
  var items = [];
  for(var idx$1 = 0; idx$1 < length; ++idx$1){
    var $$location$1 = fieldNames[idx$1];
    var inlinedLocation$1 = fromString($$location$1);
    var schema$1 = definitionToSchema(definition[$$location$1]);
    var item = {
      schema: schema$1,
      location: $$location$1,
      inlinedLocation: inlinedLocation$1
    };
    definition[$$location$1] = schema$1;
    items[idx$1] = item;
  }
  var mut$1 = new Schema("object");
  mut$1.items = items;
  mut$1.properties = definition;
  mut$1.additionalItems = globalConfig.a;
  mut$1.refiner = schemaRefiner;
  return mut$1;
}

function nested(fieldName) {
  var parentCtx = this;
  var cacheId = "~" + fieldName;
  var ctx = parentCtx[cacheId];
  if (ctx !== undefined) {
    return Caml_option.valFromOption(ctx);
  }
  var schemas = [];
  var properties = {};
  var items = [];
  var schema = new Schema("object");
  schema.items = items;
  schema.properties = properties;
  schema.additionalItems = globalConfig.a;
  schema.refiner = schemaRefiner;
  var target = parentCtx.f(fieldName, schema)[itemSymbol];
  var field = function (fieldName, schema) {
    var inlinedLocation = fromString(fieldName);
    if (properties[fieldName]) {
      throw new Error("[Sury] " + ("The field " + inlinedLocation + " defined twice"));
    }
    var ditem_4 = "[" + inlinedLocation + "]";
    var ditem = {
      k: 1,
      inlinedLocation: inlinedLocation,
      location: fieldName,
      schema: schema,
      of: target,
      p: ditem_4
    };
    properties[fieldName] = schema;
    items.push(ditem);
    schemas.push(schema);
    return proxify(ditem);
  };
  var tag = function (tag$1, asValue) {
    field(tag$1, definitionToSchema(asValue));
  };
  var fieldOr = function (fieldName, schema, or) {
    return field(fieldName, getOr(factory$1(schema, undefined), or));
  };
  var flatten = function (schema) {
    var match = schema.type;
    if (match === "object") {
      var to = schema.to;
      var flattenedItems = schema.items;
      if (to) {
        var message = "Unsupported nested flatten for transformed object schema " + toExpression(schema);
        throw new Error("[Sury] " + message);
      }
      var result = {};
      for(var idx = 0 ,idx_finish = flattenedItems.length; idx < idx_finish; ++idx){
        var item = flattenedItems[idx];
        result[item.location] = field(item.location, item.schema);
      }
      return result;
    }
    var message$1 = "Can't flatten " + toExpression(schema) + " schema";
    throw new Error("[Sury] " + message$1);
  };
  var ctx$1 = {
    field: field,
    f: field,
    fieldOr: fieldOr,
    tag: tag,
    nested: nested,
    flatten: flatten
  };
  parentCtx[cacheId] = ctx$1;
  return ctx$1;
}

function advancedBuilder(definition, flattened) {
  return function (b, input, selfSchema, path) {
    var isFlatten = b.g.o & 64;
    var outputs = isFlatten ? input : ({});
    if (!isFlatten) {
      var items = selfSchema.items;
      for(var idx = 0 ,idx_finish = items.length; idx < idx_finish; ++idx){
        var match = items[idx];
        var inlinedLocation = match.inlinedLocation;
        var schema = match.schema;
        var itemInput = get(b, input, inlinedLocation);
        var path$1 = path + ("[" + inlinedLocation + "]");
        if (input.f & 1 && (isLiteral(schema) || schema.type === "object")) {
          itemInput.f = itemInput.f | 1;
        }
        outputs[inlinedLocation] = parse(b, schema, itemInput, path$1);
      }
      objectStrictModeCheck(b, input, items, selfSchema, path);
    }
    if (flattened !== undefined) {
      var prevFlag = b.g.o;
      b.g.o = prevFlag | 64;
      for(var idx$1 = 0 ,idx_finish$1 = flattened.length; idx$1 < idx_finish$1; ++idx$1){
        var item = flattened[idx$1];
        outputs[item.i] = parse(b, item.schema, input, path);
      }
      b.g.o = prevFlag;
    }
    var getItemOutput = function (item) {
      switch (item.k) {
        case 0 :
            return outputs[item.inlinedLocation];
        case 1 :
            return get(b, getItemOutput(item.of), item.inlinedLocation);
        case 2 :
            return outputs[item.i];
        
      }
    };
    return definitionToOutput(b, definition, getItemOutput);
  };
}

function definitionToTarget(definition, to, flattened) {
  var ritemsByItemPath = {};
  var ritem = definitionToRitem(definition, "", ritemsByItemPath);
  var mut = ritem.s;
  ((delete mut.refiner));
  mut.serializer = (function (b, input, selfSchema, path) {
      var getRitemInput = function (ritem) {
        if (ritem.p === "") {
          return input;
        } else {
          return {
                  b: b,
                  v: _notVar,
                  i: input.v(b) + ritem.p,
                  f: to ? 0 : 1,
                  s: unknown
                };
        }
      };
      var schemaToOutput = function (schema, originalPath) {
        var outputSchema = getOutputSchema(schema);
        if (isLiteral(outputSchema)) {
          return {
                  b: b,
                  v: _notVar,
                  i: inlineConst(b, outputSchema),
                  f: 1,
                  s: outputSchema
                };
        }
        if (isLiteral(schema)) {
          return parse(b, schema, {
                      b: b,
                      v: _notVar,
                      i: inlineConst(b, schema),
                      f: 1,
                      s: schema
                    }, path);
        }
        var tag = outputSchema.type;
        var additionalItems = outputSchema.additionalItems;
        var items = outputSchema.items;
        if (items !== undefined && typeof additionalItems === "string") {
          var isArray = tag === "array";
          var objectVal = make(b, isArray);
          for(var idx = 0 ,idx_finish = items.length; idx < idx_finish; ++idx){
            var item = items[idx];
            var itemPath = originalPath + ("[" + item.inlinedLocation + "]");
            var ritem = ritemsByItemPath[itemPath];
            var itemInput = ritem !== undefined ? parse(b, item.schema, getRitemInput(ritem), ritem.p) : schemaToOutput(item.schema, itemPath);
            add(objectVal, item.inlinedLocation, itemInput);
          }
          return complete(objectVal, isArray, outputSchema);
        }
        var tmp = originalPath === "" ? "Schema isn't registered" : "Schema for " + originalPath + " isn't registered";
        return invalidOperation(b, path, tmp);
      };
      var getItemOutput = function (item, itemPath, shouldReverse) {
        var ritem = item.r;
        if (ritem === undefined) {
          return schemaToOutput(item.schema, itemPath);
        }
        var targetSchema = shouldReverse ? reverse(item.schema) : (
            itemPath === "" ? getOutputSchema(item.schema) : item.schema
          );
        var itemInput = getRitemInput(ritem);
        var path$1 = path + ritem.p;
        if (ritem.p !== "" && b.g.o & 1 && !isLiteral(targetSchema) && targetSchema.type !== "object") {
          b.c = b.c + typeFilterCode(b, targetSchema, itemInput, path$1);
        }
        return parse(b, targetSchema, itemInput, path$1);
      };
      if (to !== undefined) {
        return getItemOutput(to, "", false);
      }
      var originalSchema = selfSchema.to;
      objectStrictModeCheck(b, input, selfSchema.items, selfSchema, path);
      var isArray = originalSchema.type === "array";
      var items = originalSchema.items;
      var objectVal = make(b, isArray);
      if (flattened !== undefined) {
        for(var idx = 0 ,idx_finish = flattened.length; idx < idx_finish; ++idx){
          merge(objectVal, getItemOutput(flattened[idx], "", true));
        }
      }
      for(var idx$1 = 0 ,idx_finish$1 = items.length; idx$1 < idx_finish$1; ++idx$1){
        var item = items[idx$1];
        if (!objectVal[item.inlinedLocation]) {
          add(objectVal, item.inlinedLocation, getItemOutput(item, "[" + item.inlinedLocation + "]", false));
        }
        
      }
      return complete(objectVal, isArray, originalSchema);
    });
  return mut;
}

function shape(schema, definer) {
  return updateOutput(schema, (function (mut) {
                var ditem = {
                  k: 2,
                  schema: schema,
                  p: "",
                  i: 0
                };
                var definition = definer(proxify(ditem));
                mut.parser = (function (b, input, param, param$1) {
                    var getItemOutput = function (item) {
                      switch (item.k) {
                        case 1 :
                            return get(b, getItemOutput(item.of), item.inlinedLocation);
                        case 0 :
                        case 2 :
                            return input;
                        
                      }
                    };
                    return definitionToOutput(b, definition, getItemOutput);
                  });
                mut.to = definitionToTarget(definition, ditem, undefined);
              }));
}

function object(definer) {
  var flattened = (void 0);
  var items = [];
  var properties = {};
  var flatten = function (schema) {
    var match = schema.type;
    if (match === "object") {
      var flattenedItems = schema.items;
      for(var idx = 0 ,idx_finish = flattenedItems.length; idx < idx_finish; ++idx){
        var match$1 = flattenedItems[idx];
        var inlinedLocation = match$1.inlinedLocation;
        var $$location = match$1.location;
        var flattenedSchema = match$1.schema;
        var schema$1 = properties[$$location];
        if (schema$1 !== undefined) {
          if (schema$1 !== flattenedSchema) {
            throw new Error("[Sury] " + ("The field " + inlinedLocation + " defined twice with incompatible schemas"));
          }
          
        } else {
          var item = {
            k: 0,
            schema: flattenedSchema,
            inlinedLocation: inlinedLocation,
            location: $$location
          };
          items.push(item);
          properties[$$location] = flattenedSchema;
        }
      }
      var f = (flattened || (flattened = []));
      var item_2 = f.length;
      var item$1 = {
        k: 2,
        schema: schema,
        p: "",
        i: item_2
      };
      f.push(item$1);
      return proxify(item$1);
    }
    var message = "The '" + toExpression(schema) + "' schema can't be flattened";
    throw new Error("[Sury] " + message);
  };
  var field = function (fieldName, schema) {
    var inlinedLocation = fromString(fieldName);
    if (properties[fieldName]) {
      throw new Error("[Sury] " + ("The field " + inlinedLocation + " defined twice with incompatible schemas"));
    }
    var ditem = {
      k: 0,
      schema: schema,
      inlinedLocation: inlinedLocation,
      location: fieldName
    };
    properties[fieldName] = schema;
    items.push(ditem);
    return proxify(ditem);
  };
  var tag = function (tag$1, asValue) {
    field(tag$1, definitionToSchema(asValue));
  };
  var fieldOr = function (fieldName, schema, or) {
    return field(fieldName, getOr(factory$1(schema, undefined), or));
  };
  var ctx = {
    field: field,
    f: field,
    fieldOr: fieldOr,
    tag: tag,
    nested: nested,
    flatten: flatten
  };
  var definition = definer(ctx);
  var mut = new Schema("object");
  mut.items = items;
  mut.properties = properties;
  mut.additionalItems = globalConfig.a;
  mut.parser = advancedBuilder(definition, flattened);
  mut.to = definitionToTarget(definition, undefined, flattened);
  return mut;
}

function tuple(definer) {
  var items = [];
  var item = function (idx, schema) {
    var $$location = idx.toString();
    var inlinedLocation = "\"" + $$location + "\"";
    if (items[idx]) {
      throw new Error("[Sury] " + ("The item [" + inlinedLocation + "] is defined multiple times"));
    }
    var ditem = {
      k: 0,
      schema: schema,
      inlinedLocation: inlinedLocation,
      location: $$location
    };
    items[idx] = ditem;
    return proxify(ditem);
  };
  var tag = function (idx, asValue) {
    item(idx, definitionToSchema(asValue));
  };
  var ctx = {
    item: item,
    tag: tag
  };
  var definition = definer(ctx);
  for(var idx = 0 ,idx_finish = items.length; idx < idx_finish; ++idx){
    if (!items[idx]) {
      var $$location = idx.toString();
      var inlinedLocation = "\"" + $$location + "\"";
      var ditem = {
        schema: $$undefined,
        location: $$location,
        inlinedLocation: inlinedLocation
      };
      items[idx] = ditem;
    }
    
  }
  var mut = new Schema("array");
  mut.items = items;
  mut.additionalItems = "strict";
  mut.parser = advancedBuilder(definition, undefined);
  mut.to = definitionToTarget(definition, undefined, undefined);
  return mut;
}

function matches(schema) {
  return schema;
}

var ctx = {
  m: matches
};

function factory$5(definer) {
  return definitionToSchema(definer(ctx));
}

function factory$6(item) {
  return factory$1(item, nullAsUnit);
}

function js_schema(definition) {
  return definitionToSchema(definition);
}

function $$enum(values) {
  return factory(values.map(js_schema));
}

function unnestSerializer(b, input, selfSchema, path) {
  var schema = selfSchema.additionalItems;
  var items = schema.items;
  var inputVar = input.v(b);
  var iteratorVar = varWithoutAllocation(b.g);
  var outputVar = varWithoutAllocation(b.g);
  var bb = {
    c: "",
    l: "",
    a: initialAllocate,
    f: "",
    g: b.g
  };
  var itemInput = {
    b: bb,
    v: _var,
    i: inputVar + "[" + iteratorVar + "]",
    f: 0,
    s: unknown
  };
  var itemOutput = withPathPrepend(bb, itemInput, path, iteratorVar, (function (bb, output) {
          var initialArraysCode = "";
          var settingCode = "";
          for(var idx = 0 ,idx_finish = items.length; idx < idx_finish; ++idx){
            var toItem = items[idx];
            initialArraysCode = initialArraysCode + ("new Array(" + inputVar + ".length),");
            settingCode = settingCode + (outputVar + "[" + idx + "][" + iteratorVar + "]=" + get(b, output, toItem.inlinedLocation).i + ";");
          }
          b.a(outputVar + "=[" + initialArraysCode + "]");
          bb.c = bb.c + settingCode;
        }), (function (b, input, path) {
          return parse(b, schema, input, path);
        }));
  var itemCode = allocateScope(bb);
  b.c = b.c + ("for(let " + iteratorVar + "=0;" + iteratorVar + "<" + inputVar + ".length;++" + iteratorVar + "){" + itemCode + "}");
  if (itemOutput.f & 2) {
    return {
            b: b,
            v: _notVar,
            i: "Promise.all(" + outputVar + ")",
            f: 3,
            s: selfSchema.to
          };
  } else {
    return {
            b: b,
            v: _var,
            i: outputVar,
            f: 1,
            s: selfSchema.to
          };
  }
}

function unnest(schema) {
  if (schema.type === "object") {
    var items = schema.items;
    if (items.length === 0) {
      throw new Error("[Sury] Invalid empty object for S.unnest schema.");
    }
    var mut = new Schema("array");
    mut.items = items.map(function (item, idx) {
          var $$location = idx.toString();
          return {
                  schema: factory$2(item.schema),
                  location: $$location,
                  inlinedLocation: "\"" + $$location + "\""
                };
        });
    mut.additionalItems = "strict";
    mut.parser = (function (b, input, selfSchema, path) {
        var inputVar = input.v(b);
        var iteratorVar = varWithoutAllocation(b.g);
        var bb = {
          c: "",
          l: "",
          a: initialAllocate,
          f: "",
          g: b.g
        };
        var itemInput = make(bb, false);
        var lengthCode = "";
        for(var idx = 0 ,idx_finish = items.length; idx < idx_finish; ++idx){
          var item = items[idx];
          add(itemInput, item.inlinedLocation, {
                b: bb,
                v: _notVar,
                i: inputVar + "[" + idx + "][" + iteratorVar + "]",
                f: 0,
                s: unknown
              });
          lengthCode = lengthCode + (inputVar + "[" + idx + "].length,");
        }
        var output = {
          b: b,
          v: _notVar,
          i: "new Array(Math.max(" + lengthCode + "))",
          f: 1,
          s: selfSchema.to
        };
        var outputVar = output.v(b);
        var itemOutput = withPathPrepend(bb, complete(itemInput, false, selfSchema.to), path, iteratorVar, (function (bb, itemOutput) {
                bb.c = bb.c + addKey(bb, output, iteratorVar, itemOutput) + ";";
              }), (function (b, input, path) {
                return parse(b, schema, input, path);
              }));
        var itemCode = allocateScope(bb);
        b.c = b.c + ("for(let " + iteratorVar + "=0;" + iteratorVar + "<" + outputVar + ".length;++" + iteratorVar + "){" + itemCode + "}");
        if (itemOutput.f & 2) {
          return {
                  b: output.b,
                  v: _notVar,
                  i: "Promise.all(" + output.i + ")",
                  f: 3,
                  s: unknown
                };
        } else {
          return output;
        }
      });
    var to = new Schema("array");
    to.items = immutableEmpty$1;
    to.additionalItems = schema;
    to.serializer = unnestSerializer;
    mut.unnest = true;
    mut.to = to;
    return mut;
  }
  throw new Error("[Sury] S.unnest supports only object schemas.");
}

function tuple1(v0) {
  return tuple(function (s) {
              return s.item(0, v0);
            });
}

function tuple2(v0, v1) {
  return definitionToSchema([
              v0,
              v1
            ]);
}

function tuple3(v0, v1, v2) {
  return definitionToSchema([
              v0,
              v1,
              v2
            ]);
}

function intMin(schema, minValue, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "Number must be greater than or equal to " + minValue;
  return addRefinement(schema, metadataId$2, {
              kind: {
                TAG: "Min",
                value: minValue
              },
              message: message
            }, (function (b, inputVar, param, path) {
                return "if(" + inputVar + "<" + embed(b, minValue) + "){" + fail(b, message, path) + "}";
              }));
}

function intMax(schema, maxValue, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "Number must be lower than or equal to " + maxValue;
  return addRefinement(schema, metadataId$2, {
              kind: {
                TAG: "Max",
                value: maxValue
              },
              message: message
            }, (function (b, inputVar, param, path) {
                return "if(" + inputVar + ">" + embed(b, maxValue) + "){" + fail(b, message, path) + "}";
              }));
}

function port(schema, message) {
  var mutStandard = internalRefine(schema, (function (b, inputVar, selfSchema, path) {
          return inputVar + ">0&&" + inputVar + "<65536&&" + inputVar + "%1===0||" + (
                  message !== undefined ? fail(b, message, path) : failWithArg(b, path, (function (input) {
                            return {
                                    TAG: "InvalidType",
                                    expected: selfSchema,
                                    received: input
                                  };
                          }), inputVar)
                ) + ";";
        }));
  mutStandard.format = "port";
  reverse(mutStandard).format = "port";
  return mutStandard;
}

function floatMin(schema, minValue, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "Number must be greater than or equal to " + minValue;
  return addRefinement(schema, metadataId$3, {
              kind: {
                TAG: "Min",
                value: minValue
              },
              message: message
            }, (function (b, inputVar, param, path) {
                return "if(" + inputVar + "<" + embed(b, minValue) + "){" + fail(b, message, path) + "}";
              }));
}

function floatMax(schema, maxValue, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "Number must be lower than or equal to " + maxValue;
  return addRefinement(schema, metadataId$3, {
              kind: {
                TAG: "Max",
                value: maxValue
              },
              message: message
            }, (function (b, inputVar, param, path) {
                return "if(" + inputVar + ">" + embed(b, maxValue) + "){" + fail(b, message, path) + "}";
              }));
}

function arrayMinLength(schema, length, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "Array must be " + length + " or more items long";
  return addRefinement(schema, metadataId, {
              kind: {
                TAG: "Min",
                length: length
              },
              message: message
            }, (function (b, inputVar, param, path) {
                return "if(" + inputVar + ".length<" + embed(b, length) + "){" + fail(b, message, path) + "}";
              }));
}

function arrayMaxLength(schema, length, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "Array must be " + length + " or fewer items long";
  return addRefinement(schema, metadataId, {
              kind: {
                TAG: "Max",
                length: length
              },
              message: message
            }, (function (b, inputVar, param, path) {
                return "if(" + inputVar + ".length>" + embed(b, length) + "){" + fail(b, message, path) + "}";
              }));
}

function stringMinLength(schema, length, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "String must be " + length + " or more characters long";
  return addRefinement(schema, metadataId$1, {
              kind: {
                TAG: "Min",
                length: length
              },
              message: message
            }, (function (b, inputVar, param, path) {
                return "if(" + inputVar + ".length<" + embed(b, length) + "){" + fail(b, message, path) + "}";
              }));
}

function stringMaxLength(schema, length, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "String must be " + length + " or fewer characters long";
  return addRefinement(schema, metadataId$1, {
              kind: {
                TAG: "Max",
                length: length
              },
              message: message
            }, (function (b, inputVar, param, path) {
                return "if(" + inputVar + ".length>" + embed(b, length) + "){" + fail(b, message, path) + "}";
              }));
}

function email(schema, messageOpt) {
  var message = messageOpt !== undefined ? messageOpt : "Invalid email address";
  return addRefinement(schema, metadataId$1, {
              kind: "Email",
              message: message
            }, (function (b, inputVar, param, path) {
                return "if(!" + embed(b, emailRegex) + ".test(" + inputVar + ")){" + fail(b, message, path) + "}";
              }));
}

function uuid(schema, messageOpt) {
  var message = messageOpt !== undefined ? messageOpt : "Invalid UUID";
  return addRefinement(schema, metadataId$1, {
              kind: "Uuid",
              message: message
            }, (function (b, inputVar, param, path) {
                return "if(!" + embed(b, uuidRegex) + ".test(" + inputVar + ")){" + fail(b, message, path) + "}";
              }));
}

function cuid(schema, messageOpt) {
  var message = messageOpt !== undefined ? messageOpt : "Invalid CUID";
  return addRefinement(schema, metadataId$1, {
              kind: "Cuid",
              message: message
            }, (function (b, inputVar, param, path) {
                return "if(!" + embed(b, cuidRegex) + ".test(" + inputVar + ")){" + fail(b, message, path) + "}";
              }));
}

function url(schema, messageOpt) {
  var message = messageOpt !== undefined ? messageOpt : "Invalid url";
  return addRefinement(schema, metadataId$1, {
              kind: "Url",
              message: message
            }, (function (b, inputVar, param, path) {
                return "try{new URL(" + inputVar + ")}catch(_){" + fail(b, message, path) + "}";
              }));
}

function pattern(schema, re, messageOpt) {
  var message = messageOpt !== undefined ? messageOpt : "Invalid";
  return addRefinement(schema, metadataId$1, {
              kind: {
                TAG: "Pattern",
                re: re
              },
              message: message
            }, (function (b, inputVar, param, path) {
                return (
                        re.global ? embed(b, re) + ".lastIndex=0;" : ""
                      ) + ("if(!" + embed(b, re) + ".test(" + inputVar + ")){" + fail(b, message, path) + "}");
              }));
}

function datetime(schema, messageOpt) {
  var message = messageOpt !== undefined ? messageOpt : "Invalid datetime string! Expected UTC";
  var refinement = {
    kind: "Datetime",
    message: message
  };
  var refinements = schema[metadataId$1];
  return transform$1(set$1(schema, metadataId$1, refinements !== undefined ? refinements.concat(refinement) : [refinement]), (function (s) {
                return {
                        p: (function (string) {
                            if (!datetimeRe.test(string)) {
                              s.fail(message, undefined);
                            }
                            return new Date(string);
                          }),
                        s: (function (date) {
                            return date.toISOString();
                          })
                      };
              }));
}

function trim(schema) {
  var transformer = function (string) {
    return string.trim();
  };
  return transform$1(schema, (function (param) {
                return {
                        p: transformer,
                        s: transformer
                      };
              }));
}

function nullable(schema) {
  return factory([
              schema,
              $$undefined,
              $$null
            ]);
}

function nullableAsOption(schema) {
  return factory([
              schema,
              $$undefined,
              nullAsUnit
            ]);
}

function js_union(values) {
  return factory(values.map(definitionToSchema));
}

function js_transform(schema, maybeParser, maybeSerializer) {
  return transform$1(schema, (function (s) {
                return {
                        p: maybeParser !== undefined ? (function (v) {
                              return maybeParser(v, s);
                            }) : undefined,
                        s: maybeSerializer !== undefined ? (function (v) {
                              return maybeSerializer(v, s);
                            }) : undefined
                      };
              }));
}

function js_refine(schema, refiner) {
  return refine(schema, (function (s) {
                return function (v) {
                  refiner(v, s);
                };
              }));
}

function noop(a) {
  return a;
}

function js_asyncParserRefine(schema, refine) {
  return transform$1(schema, (function (s) {
                return {
                        a: (function (v) {
                            return refine(v, s).then(function () {
                                        return v;
                                      });
                          }),
                        s: noop
                      };
              }));
}

function js_optional(schema, maybeOr) {
  var schema$1 = factory([
        schema,
        $$undefined
      ]);
  if (maybeOr === undefined) {
    return schema$1;
  }
  var or = Caml_option.valFromOption(maybeOr);
  if (typeof or === "function") {
    return getOrWith(schema$1, or);
  } else {
    return getOr(schema$1, or);
  }
}

function js_nullable(schema, maybeOr) {
  var schema$1 = factory([
        schema,
        nullAsUnit
      ]);
  if (maybeOr === undefined) {
    return schema$1;
  }
  var or = Caml_option.valFromOption(maybeOr);
  if (typeof or === "function") {
    return getOrWith(schema$1, or);
  } else {
    return getOr(schema$1, or);
  }
}

function js_merge(s1, s2) {
  var s;
  if (s1.type === "object" && s2.type === "object") {
    var additionalItems1 = s1.additionalItems;
    if (typeof additionalItems1 === "string" && typeof s2.additionalItems === "string" && !s1.to && !s2.to) {
      var items2 = s2.items;
      var items1 = s1.items;
      var properties = {};
      var locations = [];
      var inlinedLocations = [];
      var items = [];
      for(var idx = 0 ,idx_finish = items1.length; idx < idx_finish; ++idx){
        var item = items1[idx];
        locations.push(item.location);
        inlinedLocations.push(item.inlinedLocation);
        properties[item.location] = item.schema;
      }
      for(var idx$1 = 0 ,idx_finish$1 = items2.length; idx$1 < idx_finish$1; ++idx$1){
        var item$1 = items2[idx$1];
        if (!properties[item$1.location]) {
          locations.push(item$1.location);
          inlinedLocations.push(item$1.inlinedLocation);
        }
        properties[item$1.location] = item$1.schema;
      }
      for(var idx$2 = 0 ,idx_finish$2 = locations.length; idx$2 < idx_finish$2; ++idx$2){
        var $$location = locations[idx$2];
        items.push({
              schema: properties[$$location],
              location: $$location,
              inlinedLocation: inlinedLocations[idx$2]
            });
      }
      var mut = new Schema("object");
      mut.items = items;
      mut.properties = properties;
      mut.additionalItems = additionalItems1;
      mut.refiner = schemaRefiner;
      s = mut;
    } else {
      s = undefined;
    }
  } else {
    s = undefined;
  }
  if (s !== undefined) {
    return s;
  }
  throw new Error("[Sury] The merge supports only structured object schemas without transformations");
}

function $$global(override) {
  var defaultAdditionalItems = override.defaultAdditionalItems;
  globalConfig.a = defaultAdditionalItems !== undefined ? defaultAdditionalItems : "strip";
  var prevDisableNanNumberCheck = globalConfig.n;
  var disableNanNumberValidation = override.disableNanNumberValidation;
  globalConfig.n = disableNanNumberValidation !== undefined ? disableNanNumberValidation : false;
  if (prevDisableNanNumberCheck !== globalConfig.n) {
    return resetCacheInPlace($$float);
  }
  
}

var jsonSchemaMetadataId = "m:JSONSchema";

function internalToJSONSchema(schema, defs) {
  var jsonSchema = {};
  switch (schema.type) {
    case "never" :
        jsonSchema.not = {};
        break;
    case "unknown" :
        break;
    case "string" :
        var $$const = schema.const;
        jsonSchema.type = "string";
        refinements$1(schema).forEach(function (refinement) {
              var match = refinement.kind;
              if (typeof match !== "object") {
                switch (match) {
                  case "Email" :
                      jsonSchema.format = "email";
                      return ;
                  case "Uuid" :
                      jsonSchema.format = "uuid";
                      return ;
                  case "Cuid" :
                      return ;
                  case "Url" :
                      jsonSchema.format = "uri";
                      return ;
                  case "Datetime" :
                      jsonSchema.format = "date-time";
                      return ;
                  
                }
              } else {
                switch (match.TAG) {
                  case "Min" :
                      jsonSchema.minLength = match.length;
                      return ;
                  case "Max" :
                      jsonSchema.maxLength = match.length;
                      return ;
                  case "Length" :
                      var length = match.length;
                      jsonSchema.minLength = length;
                      jsonSchema.maxLength = length;
                      return ;
                  case "Pattern" :
                      jsonSchema.pattern = String(match.re);
                      return ;
                  
                }
              }
            });
        if ($$const !== undefined) {
          jsonSchema.const = $$const;
        }
        break;
    case "number" :
        var format = schema.format;
        var $$const$1 = schema.const;
        if (format !== undefined) {
          if (format === "int32") {
            jsonSchema.type = "integer";
            refinements$2(schema).forEach(function (refinement) {
                  var match = refinement.kind;
                  if (match.TAG === "Min") {
                    jsonSchema.minimum = match.value;
                  } else {
                    jsonSchema.maximum = match.value;
                  }
                });
          } else {
            jsonSchema.type = "integer";
            jsonSchema.maximum = 65535;
            jsonSchema.minimum = 0;
          }
        } else {
          jsonSchema.type = "number";
          refinements$3(schema).forEach(function (refinement) {
                var match = refinement.kind;
                if (match.TAG === "Min") {
                  jsonSchema.minimum = match.value;
                } else {
                  jsonSchema.maximum = match.value;
                }
              });
        }
        if ($$const$1 !== undefined) {
          jsonSchema.const = $$const$1;
        }
        break;
    case "boolean" :
        var $$const$2 = schema.const;
        jsonSchema.type = "boolean";
        if ($$const$2 !== undefined) {
          jsonSchema.const = $$const$2;
        }
        break;
    case "null" :
        jsonSchema.type = "null";
        break;
    case "array" :
        var additionalItems = schema.additionalItems;
        var exit = 0;
        if (additionalItems === "strip" || additionalItems === "strict") {
          exit = 1;
        } else {
          jsonSchema.items = Caml_option.some(internalToJSONSchema(additionalItems, defs));
          jsonSchema.type = "array";
          refinements(schema).forEach(function (refinement) {
                var match = refinement.kind;
                switch (match.TAG) {
                  case "Min" :
                      jsonSchema.minItems = match.length;
                      return ;
                  case "Max" :
                      jsonSchema.maxItems = match.length;
                      return ;
                  case "Length" :
                      var length = match.length;
                      jsonSchema.maxItems = length;
                      jsonSchema.minItems = length;
                      return ;
                  
                }
              });
        }
        if (exit === 1) {
          var items = schema.items.map(function (item) {
                return internalToJSONSchema(item.schema, defs);
              });
          var itemsNumber = items.length;
          jsonSchema.items = Caml_option.some(items);
          jsonSchema.type = "array";
          jsonSchema.minItems = itemsNumber;
          jsonSchema.maxItems = itemsNumber;
        }
        break;
    case "object" :
        var additionalItems$1 = schema.additionalItems;
        var exit$1 = 0;
        if (additionalItems$1 === "strip" || additionalItems$1 === "strict") {
          exit$1 = 1;
        } else {
          jsonSchema.type = "object";
          jsonSchema.additionalProperties = Caml_option.some(internalToJSONSchema(additionalItems$1, defs));
        }
        if (exit$1 === 1) {
          var properties = {};
          var required = [];
          schema.items.forEach(function (item) {
                var fieldSchema = internalToJSONSchema(item.schema, defs);
                if (!isOptional(item.schema)) {
                  required.push(item.location);
                }
                properties[item.location] = fieldSchema;
              });
          var additionalProperties;
          additionalProperties = (additionalItems$1 === "strip" || additionalItems$1 === "strict") && additionalItems$1 !== "strip" ? false : true;
          jsonSchema.type = "object";
          jsonSchema.properties = properties;
          jsonSchema.additionalProperties = Caml_option.some(additionalProperties);
          if (required.length !== 0) {
            jsonSchema.required = required;
          }
          
        }
        break;
    case "union" :
        var literals = [];
        var items$1 = [];
        schema.anyOf.forEach(function (childSchema) {
              if (childSchema.type === "undefined") {
                return ;
              }
              items$1.push(internalToJSONSchema(childSchema, defs));
              if (isLiteral(childSchema)) {
                literals.push(childSchema.const);
                return ;
              }
              
            });
        var itemsNumber$1 = items$1.length;
        var $$default = schema.default;
        if ($$default !== undefined) {
          jsonSchema.default = Caml_option.valFromOption($$default);
        }
        if (itemsNumber$1 === 1) {
          Object.assign(jsonSchema, items$1[0]);
        } else if (literals.length === itemsNumber$1) {
          jsonSchema.enum = literals;
        } else {
          jsonSchema.anyOf = items$1;
        }
        break;
    case "ref" :
        var ref = schema.$ref;
        if (ref === defsPath + jsonName) {
          
        } else {
          jsonSchema.$ref = ref;
        }
        break;
    default:
      throw new Error("[Sury] Unexpected schema type");
  }
  var m = schema.description;
  if (m !== undefined) {
    jsonSchema.description = m;
  }
  var m$1 = schema.title;
  if (m$1 !== undefined) {
    jsonSchema.title = m$1;
  }
  var deprecated = schema.deprecated;
  if (deprecated !== undefined) {
    jsonSchema.deprecated = deprecated;
  }
  var examples = schema.examples;
  if (examples !== undefined) {
    jsonSchema.examples = examples;
  }
  var schemaDefs = schema.$defs;
  if (schemaDefs !== undefined) {
    Object.assign(defs, schemaDefs);
  }
  var metadataRawSchema = schema[jsonSchemaMetadataId];
  if (metadataRawSchema !== undefined) {
    Object.assign(jsonSchema, metadataRawSchema);
  }
  return jsonSchema;
}

function toJSONSchema(schema) {
  jsonableValidation(schema, schema, "", 8);
  var defs = {};
  var jsonSchema = internalToJSONSchema(schema, defs);
  ((delete defs.JSON));
  var defsKeys = Object.keys(defs);
  if (defsKeys.length) {
    defsKeys.forEach(function (key) {
          defs[key] = internalToJSONSchema(defs[key], 0);
        });
    jsonSchema.$defs = defs;
  }
  return jsonSchema;
}

function extendJSONSchema(schema, jsonSchema) {
  var existingSchemaExtend = schema[jsonSchemaMetadataId];
  return set$1(schema, jsonSchemaMetadataId, existingSchemaExtend !== undefined ? Object.assign({}, existingSchemaExtend, jsonSchema) : jsonSchema);
}

function primitiveToSchema(primitive) {
  return parse$1(primitive);
}

function toIntSchema(jsonSchema) {
  var minimum = jsonSchema.minimum;
  var schema;
  if (minimum !== undefined) {
    schema = intMin($$int, minimum | 0, undefined);
  } else {
    var exclusiveMinimum = jsonSchema.exclusiveMinimum;
    schema = exclusiveMinimum !== undefined ? intMin($$int, exclusiveMinimum + 1 | 0, undefined) : $$int;
  }
  var maximum = jsonSchema.maximum;
  if (maximum !== undefined) {
    return intMax(schema, maximum | 0, undefined);
  }
  var exclusiveMinimum$1 = jsonSchema.exclusiveMinimum;
  if (exclusiveMinimum$1 !== undefined) {
    return intMax(schema, exclusiveMinimum$1 - 1 | 0, undefined);
  } else {
    return schema;
  }
}

function definitionToDefaultValue(definition) {
  if (typeof definition === "object") {
    return definition.default;
  }
  
}

function fromJSONSchema(jsonSchema) {
  var definitionToSchema = function (definition) {
    if (typeof definition === "object") {
      return fromJSONSchema(definition);
    } else {
      return json;
    }
  };
  var type_ = jsonSchema.type;
  var schema;
  var exit = 0;
  var exit$1 = 0;
  if (jsonSchema.nullable) {
    schema = factory$6(fromJSONSchema(Object.assign({}, jsonSchema, {
                  nullable: false
                })));
  } else if (type_ !== undefined) {
    var type_$1 = Caml_option.valFromOption(type_);
    if (type_$1 === "object") {
      var properties = jsonSchema.properties;
      if (properties !== undefined) {
        var schema$1 = object(function (s) {
              var obj = {};
              Object.keys(properties).forEach(function (key) {
                    var property = properties[key];
                    var propertySchema = definitionToSchema(property);
                    var r = jsonSchema.required;
                    var propertySchema$1;
                    var exit = 0;
                    if (r !== undefined && r.includes(key)) {
                      propertySchema$1 = propertySchema;
                    } else {
                      exit = 1;
                    }
                    if (exit === 1) {
                      var defaultValue = definitionToDefaultValue(property);
                      propertySchema$1 = defaultValue !== undefined ? getOr(factory$1(propertySchema), defaultValue) : factory$1(propertySchema);
                    }
                    obj[key] = s.f(key, propertySchema$1);
                  });
              return obj;
            });
        var additionalProperties = jsonSchema.additionalProperties;
        schema = additionalProperties !== undefined && Caml_option.valFromOption(additionalProperties) === false ? strict(schema$1) : schema$1;
      } else {
        var additionalProperties$1 = jsonSchema.additionalProperties;
        if (additionalProperties$1 !== undefined) {
          var additionalProperties$2 = Caml_option.valFromOption(additionalProperties$1);
          schema = typeof additionalProperties$2 === "object" ? factory$3(fromJSONSchema(additionalProperties$2)) : (
              additionalProperties$2 ? factory$3(json) : strict(object(function (param) {
                          
                        }))
            );
        } else {
          schema = factory$5(function (param) {
                
              });
        }
      }
    } else if (type_$1 === "array") {
      var items = jsonSchema.items;
      var schema$2;
      if (items !== undefined) {
        var single = JSONSchema.Arrayable.classify(Caml_option.valFromOption(items));
        if (single.TAG === "Single") {
          schema$2 = factory$2(definitionToSchema(single._0));
        } else {
          var array = single._0;
          schema$2 = tuple(function (s) {
                return array.map(function (d, idx) {
                            return s.item(idx, definitionToSchema(d));
                          });
              });
        }
      } else {
        schema$2 = factory$2(json);
      }
      var min = jsonSchema.minItems;
      var schema$3 = min !== undefined ? arrayMinLength(schema$2, min, undefined) : schema$2;
      var max = jsonSchema.maxItems;
      schema = max !== undefined ? arrayMaxLength(schema$3, max, undefined) : schema$3;
    } else {
      exit$1 = 2;
    }
  } else {
    exit$1 = 2;
  }
  if (exit$1 === 2) {
    var primitives = jsonSchema.enum;
    var definitions = jsonSchema.allOf;
    var definitions$1 = jsonSchema.anyOf;
    if (definitions$1 !== undefined) {
      var len = definitions$1.length;
      if (len !== 1) {
        schema = len !== 0 ? factory(definitions$1.map(definitionToSchema)) : json;
      } else {
        var d = definitions$1[0];
        schema = definitionToSchema(d);
      }
    } else if (definitions !== undefined) {
      var len$1 = definitions.length;
      if (len$1 !== 1) {
        schema = len$1 !== 0 ? refine(json, (function (s) {
                  return function (data) {
                    definitions.forEach(function (d) {
                          try {
                            return assertOrThrow(data, definitionToSchema(d));
                          }
                          catch (exn){
                            return s.fail("Should pass for all schemas of the allOf property.", undefined);
                          }
                        });
                  };
                })) : json;
      } else {
        var d$1 = definitions[0];
        schema = definitionToSchema(d$1);
      }
    } else {
      var definitions$2 = jsonSchema.oneOf;
      if (definitions$2 !== undefined) {
        var len$2 = definitions$2.length;
        if (len$2 !== 1) {
          schema = len$2 !== 0 ? refine(json, (function (s) {
                    return function (data) {
                      var hasOneValidRef = {
                        contents: false
                      };
                      definitions$2.forEach(function (d) {
                            var passed;
                            try {
                              assertOrThrow(data, definitionToSchema(d));
                              passed = true;
                            }
                            catch (exn){
                              passed = false;
                            }
                            if (passed) {
                              if (hasOneValidRef.contents) {
                                s.fail("Should pass single schema according to the oneOf property.", undefined);
                              }
                              hasOneValidRef.contents = true;
                              return ;
                            }
                            
                          });
                      if (!hasOneValidRef.contents) {
                        return s.fail("Should pass at least one schema according to the oneOf property.", undefined);
                      }
                      
                    };
                  })) : json;
        } else {
          var d$2 = definitions$2[0];
          schema = definitionToSchema(d$2);
        }
      } else {
        var not = jsonSchema.not;
        if (not !== undefined) {
          var not$1 = Caml_option.valFromOption(not);
          schema = refine(json, (function (s) {
                  return function (data) {
                    var passed;
                    try {
                      assertOrThrow(data, definitionToSchema(not$1));
                      passed = true;
                    }
                    catch (exn){
                      passed = false;
                    }
                    if (passed) {
                      return s.fail("Should NOT be valid against schema in the not property.", undefined);
                    }
                    
                  };
                }));
        } else if (primitives !== undefined) {
          var len$3 = primitives.length;
          if (len$3 !== 1) {
            schema = len$3 !== 0 ? factory(primitives.map(primitiveToSchema)) : json;
          } else {
            var p = primitives[0];
            schema = parse$1(p);
          }
        } else {
          var $$const = jsonSchema.const;
          if ($$const !== undefined) {
            schema = parse$1($$const);
          } else if (type_ !== undefined) {
            var match = jsonSchema.multipleOf;
            var type_$2 = Caml_option.valFromOption(type_);
            var exit$2 = 0;
            var exit$3 = 0;
            var match$1 = jsonSchema.format;
            if (Array.isArray(type_$2)) {
              schema = factory(type_$2.map(function (type_) {
                        return fromJSONSchema(Object.assign({}, jsonSchema, {
                                        type: Caml_option.some(type_)
                                      }));
                      }));
            } else if (type_$2 === "string") {
              var p$1 = jsonSchema.pattern;
              var schema$4 = p$1 !== undefined ? pattern(string, new RegExp(p$1), undefined) : string;
              var minLength = jsonSchema.minLength;
              var schema$5 = minLength !== undefined ? stringMinLength(schema$4, minLength, undefined) : schema$4;
              var maxLength = jsonSchema.maxLength;
              var schema$6 = maxLength !== undefined ? stringMaxLength(schema$5, maxLength, undefined) : schema$5;
              var match$2 = jsonSchema.format;
              if (match$2 !== undefined) {
                switch (match$2) {
                  case "date-time" :
                      schema = datetime(schema$6, undefined);
                      break;
                  case "email" :
                      schema = email(schema$6, undefined);
                      break;
                  case "uri" :
                      schema = url(schema$6, undefined);
                      break;
                  case "uuid" :
                      schema = uuid(schema$6, undefined);
                      break;
                  default:
                    schema = schema$6;
                }
              } else {
                schema = schema$6;
              }
            } else if (type_$2 === "integer" || match$1 !== undefined && match$1 === "int64" && type_$2 === "number") {
              schema = toIntSchema(jsonSchema);
            } else {
              exit$3 = 4;
            }
            if (exit$3 === 4) {
              if (match !== undefined && !(match !== 1 || type_$2 !== "number")) {
                schema = toIntSchema(jsonSchema);
              } else {
                exit$2 = 3;
              }
            }
            if (exit$2 === 3) {
              if (type_$2 === "number") {
                var minimum = jsonSchema.minimum;
                var schema$7;
                if (minimum !== undefined) {
                  schema$7 = floatMin($$float, minimum, undefined);
                } else {
                  var exclusiveMinimum = jsonSchema.exclusiveMinimum;
                  schema$7 = exclusiveMinimum !== undefined ? floatMin($$float, exclusiveMinimum + 1, undefined) : $$float;
                }
                var maximum = jsonSchema.maximum;
                if (maximum !== undefined) {
                  schema = floatMax(schema$7, maximum, undefined);
                } else {
                  var exclusiveMinimum$1 = jsonSchema.exclusiveMinimum;
                  schema = exclusiveMinimum$1 !== undefined ? floatMax(schema$7, exclusiveMinimum$1 - 1, undefined) : schema$7;
                }
              } else if (type_$2 === "boolean") {
                schema = bool;
              } else if (type_$2 === "null") {
                schema = js_schema(null);
              } else {
                exit = 1;
              }
            }
            
          } else {
            exit = 1;
          }
        }
      }
    }
  }
  if (exit === 1) {
    var if_ = jsonSchema.if;
    if (if_ !== undefined) {
      var then = jsonSchema.then;
      if (then !== undefined) {
        var else_ = jsonSchema.else;
        if (else_ !== undefined) {
          var ifSchema = definitionToSchema(Caml_option.valFromOption(if_));
          var thenSchema = definitionToSchema(Caml_option.valFromOption(then));
          var elseSchema = definitionToSchema(Caml_option.valFromOption(else_));
          schema = refine(json, (function (param) {
                  return function (data) {
                    var passed;
                    try {
                      assertOrThrow(data, ifSchema);
                      passed = true;
                    }
                    catch (exn){
                      passed = false;
                    }
                    if (passed) {
                      return assertOrThrow(data, thenSchema);
                    } else {
                      return assertOrThrow(data, elseSchema);
                    }
                  };
                }));
        } else {
          schema = json;
        }
      } else {
        schema = json;
      }
    } else {
      schema = json;
    }
  }
  if (jsonSchema.description === undefined && jsonSchema.deprecated === undefined && jsonSchema.examples === undefined && jsonSchema.title === undefined) {
    return schema;
  }
  return meta(schema, {
              title: jsonSchema.title,
              description: jsonSchema.description,
              deprecated: jsonSchema.deprecated,
              examples: jsonSchema.examples
            });
}

function min(schema, minValue, maybeMessage) {
  switch (schema.type) {
    case "string" :
        return stringMinLength(schema, minValue, maybeMessage);
    case "number" :
        if (schema.format !== undefined) {
          return intMin(schema, minValue, maybeMessage);
        } else {
          return floatMin(schema, minValue, maybeMessage);
        }
    case "array" :
        return arrayMinLength(schema, minValue, maybeMessage);
    default:
      var message = "S.min is not supported for " + toExpression(schema) + " schema. Coerce the schema to string, number or array using S.to first.";
      throw new Error("[Sury] " + message);
  }
}

function max(schema, maxValue, maybeMessage) {
  switch (schema.type) {
    case "string" :
        return stringMaxLength(schema, maxValue, maybeMessage);
    case "number" :
        if (schema.format !== undefined) {
          return intMax(schema, maxValue, maybeMessage);
        } else {
          return floatMax(schema, maxValue, maybeMessage);
        }
    case "array" :
        return arrayMaxLength(schema, maxValue, maybeMessage);
    default:
      var message = "S.max is not supported for " + toExpression(schema) + " schema. Coerce the schema to string, number or array using S.to first.";
      throw new Error("[Sury] " + message);
  }
}

function length(schema, length$1, maybeMessage) {
  switch (schema.type) {
    case "string" :
        var message = maybeMessage !== undefined ? maybeMessage : "String must be exactly " + length$1 + " characters long";
        return addRefinement(schema, metadataId$1, {
                    kind: {
                      TAG: "Length",
                      length: length$1
                    },
                    message: message
                  }, (function (b, inputVar, param, path) {
                      return "if(" + inputVar + ".length!==" + embed(b, length$1) + "){" + fail(b, message, path) + "}";
                    }));
    case "array" :
        var message$1 = maybeMessage !== undefined ? maybeMessage : "Array must be exactly " + length$1 + " items long";
        return addRefinement(schema, metadataId, {
                    kind: {
                      TAG: "Length",
                      length: length$1
                    },
                    message: message$1
                  }, (function (b, inputVar, param, path) {
                      return "if(" + inputVar + ".length!==" + embed(b, length$1) + "){" + fail(b, message$1, path) + "}";
                    }));
    default:
      var message$2 = "S.length is not supported for " + toExpression(schema) + " schema. Coerce the schema to string or array using S.to first.";
      throw new Error("[Sury] " + message$2);
  }
}

var Path = {
  empty: "",
  dynamic: "[]",
  toArray: toArray,
  fromArray: fromArray,
  fromLocation: fromLocation,
  concat: concat
};

var Flag = {
  none: 0,
  typeValidation: 1,
  async: 2,
  assertOutput: 4,
  jsonableOutput: 8,
  jsonStringOutput: 16,
  reverse: 32,
  has: has
};

var unit = $$undefined;

var literal = js_schema;

var array = factory$2;

var dict = factory$3;

var option = factory$1;

var $$null$1 = factory$6;

var jsonString = factory$4;

var union = factory;

var parseJsonOrThrow = parseOrThrow;

var Schema$1 = {};

var schema = factory$5;

var $$Object = {};

var $$Option = {
  getOr: getOr,
  getOrWith: getOrWith
};

var String_Refinement = {};

var $$String$1 = {
  Refinement: String_Refinement,
  refinements: refinements$1
};

var Int_Refinement = {};

var Int = {
  Refinement: Int_Refinement,
  refinements: refinements$2
};

var Float_Refinement = {};

var Float = {
  Refinement: Float_Refinement,
  refinements: refinements$3
};

var Array_Refinement = {};

var $$Array$1 = {
  Refinement: Array_Refinement,
  refinements: refinements
};

var Metadata = {
  Id: Id,
  get: get$1,
  set: set$1
};

export {
  Path ,
  $$Error ,
  Flag ,
  never ,
  unknown ,
  unit ,
  nullAsUnit ,
  string ,
  bool ,
  $$int ,
  $$float ,
  bigint ,
  symbol ,
  json ,
  literal ,
  array ,
  unnest ,
  list ,
  instance ,
  dict ,
  option ,
  $$null$1 as $$null,
  nullable ,
  nullableAsOption ,
  jsonString ,
  union ,
  $$enum ,
  meta ,
  transform$1 as transform,
  refine ,
  shape ,
  to ,
  compile ,
  parseOrThrow ,
  parseJsonOrThrow ,
  parseJsonStringOrThrow ,
  parseAsyncOrThrow ,
  convertOrThrow ,
  convertToJsonOrThrow ,
  convertToJsonStringOrThrow ,
  convertAsyncOrThrow ,
  reverseConvertOrThrow ,
  reverseConvertToJsonOrThrow ,
  reverseConvertToJsonStringOrThrow ,
  assertOrThrow ,
  isAsync ,
  recursive ,
  noValidation ,
  toExpression ,
  Schema$1 as Schema,
  schema ,
  $$Object ,
  object ,
  strip ,
  deepStrip ,
  strict ,
  deepStrict ,
  Tuple ,
  tuple ,
  tuple1 ,
  tuple2 ,
  tuple3 ,
  $$Option ,
  $$String$1 as $$String,
  Int ,
  Float ,
  $$Array$1 as $$Array,
  Metadata ,
  reverse ,
  ErrorClass ,
  min ,
  floatMin ,
  max ,
  floatMax ,
  length ,
  port ,
  email ,
  uuid ,
  cuid ,
  url ,
  pattern ,
  datetime ,
  trim ,
  toJSONSchema ,
  fromJSONSchema ,
  extendJSONSchema ,
  $$global ,
  js_safe ,
  js_safeAsync ,
  js_union ,
  js_optional ,
  js_nullable ,
  js_asyncParserRefine ,
  js_refine ,
  js_transform ,
  js_schema ,
  js_merge ,
}
/* s Not a pure module */
