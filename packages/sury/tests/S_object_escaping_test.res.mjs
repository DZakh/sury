// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import * as U from "./U.res.mjs";
import Ava from "ava";

Ava("Successfully parses object with quotes in a field name", (function (t) {
        var schema = S.object(function (s) {
              return {
                      field: s.f("\"\'\`", S.string)
                    };
            });
        t.deepEqual(S.parseOrThrow({"\"\'\`": "bar"}, schema), {
              field: "bar"
            }, undefined);
      }));

Ava("Successfully serializing object with quotes in a field name", (function (t) {
        var schema = S.object(function (s) {
              return {
                      field: s.f("\"\'\`", S.string)
                    };
            });
        t.deepEqual(S.reverseConvertOrThrow({
                  field: "bar"
                }, schema), {"\"\'\`": "bar"}, undefined);
      }));

Ava("Successfully parses object transformed to object with quotes in a field name", (function (t) {
        var schema = S.object(function (s) {
              return {
                      "\\\"\\'\\`": s.f("field", S.string)
                    };
            });
        t.deepEqual(S.parseOrThrow({"field": "bar"}, schema), {
              "\\\"\\'\\`": "bar"
            }, undefined);
      }));

Ava("Successfully serializes object transformed to object with quotes in a field name", (function (t) {
        var schema = S.object(function (s) {
              return {
                      "\\\"\\'\\`": s.f("field", S.string)
                    };
            });
        t.deepEqual(S.reverseConvertOrThrow({
                  "\\\"\\'\\`": "bar"
                }, schema), {"field": "bar"}, undefined);
      }));

Ava("Successfully parses object with discriminant which has quotes as the field name", (function (t) {
        var schema = S.object(function (s) {
              s.f("\"\'\`", S.literal(null));
              return {
                      field: s.f("field", S.string)
                    };
            });
        t.deepEqual(S.parseOrThrow({
      "\"\'\`": null,
      "field": "bar",
    }, schema), {
              field: "bar"
            }, undefined);
      }));

Ava("Successfully serializes object with discriminant which has quotes as the field name", (function (t) {
        var schema = S.object(function (s) {
              s.f("\"\'\`", S.literal(null));
              return {
                      field: s.f("field", S.string)
                    };
            });
        t.deepEqual(S.reverseConvertOrThrow({
                  field: "bar"
                }, schema), {
        "\"\'\`": null,
        "field": "bar",
      }, undefined);
      }));

Ava("Successfully parses object with discriminant which has quotes as the literal value", (function (t) {
        var schema = S.object(function (s) {
              s.f("kind", S.literal("\"\'\`"));
              return {
                      field: s.f("field", S.string)
                    };
            });
        t.deepEqual(S.parseOrThrow({
      "kind": "\"\'\`",
      "field": "bar",
    }, schema), {
              field: "bar"
            }, undefined);
      }));

Ava("Successfully serializes object with discriminant which has quotes as the literal value", (function (t) {
        var schema = S.object(function (s) {
              s.f("kind", S.literal("\"\'\`"));
              return {
                      field: s.f("field", S.string)
                    };
            });
        t.deepEqual(S.reverseConvertOrThrow({
                  field: "bar"
                }, schema), {
          "kind": "\"\'\`",
          "field": "bar",
        }, undefined);
      }));

Ava("Successfully parses object transformed to object with quotes in name of hardcoded field", (function (t) {
        var schema = S.object(function (s) {
              return {
                      "\\\"\\'\\`": "hardcoded",
                      field: s.f("field", S.string)
                    };
            });
        t.deepEqual(S.parseOrThrow({"field": "bar"}, schema), {
              "\\\"\\'\\`": "hardcoded",
              field: "bar"
            }, undefined);
      }));

Ava("Successfully serializes object transformed to object with quotes in name of hardcoded field", (function (t) {
        var schema = S.object(function (s) {
              return {
                      "\\\"\\'\\`": "hardcoded",
                      field: s.f("field", S.string)
                    };
            });
        t.deepEqual(S.reverseConvertOrThrow({
                  "\\\"\\'\\`": "hardcoded",
                  field: "bar"
                }, schema), {"field": "bar"}, undefined);
      }));

Ava("Successfully parses object transformed to object with quotes in value of hardcoded field", (function (t) {
        var schema = S.object(function (s) {
              return {
                      hardcoded: "\"\'\`",
                      field: s.f("field", S.string)
                    };
            });
        t.deepEqual(S.parseOrThrow({"field": "bar"}, schema), {
              hardcoded: "\"\'\`",
              field: "bar"
            }, undefined);
      }));

Ava("Successfully serializes object transformed to object with quotes in value of hardcoded field", (function (t) {
        var schema = S.object(function (s) {
              return {
                      hardcoded: "\"\'\`",
                      field: s.f("field", S.string)
                    };
            });
        t.deepEqual(S.reverseConvertOrThrow({
                  hardcoded: "\"\'\`",
                  field: "bar"
                }, schema), {"field": "bar"}, undefined);
      }));

Ava("Has proper error path when fails to parse object with quotes in a field name", (function (t) {
        var schema = S.object(function (s) {
              return {
                      field: s.f("\"\'\`", S.refine(S.string, (function (s) {
                                  return function (param) {
                                    s.fail("User error", undefined);
                                  };
                                })))
                    };
            });
        U.assertThrows(t, (function () {
                return S.parseOrThrow({"\"\'\`": "bar"}, schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "OperationFailed",
                _0: "User error"
              },
              path: S.Path.fromArray(["\"\'\`"])
            });
      }));

Ava("Has proper error path when fails to serialize object with quotes in a field name", (function (t) {
        var schema = S.object(function (s) {
              return Object.fromEntries([[
                            "\"\'\`",
                            s.f("field", S.refine(S.string, (function (s) {
                                        return function (param) {
                                          s.fail("User error", undefined);
                                        };
                                      })))
                          ]]);
            });
        U.assertThrows(t, (function () {
                return S.reverseConvertOrThrow(Object.fromEntries([[
                                  "\"\'\`",
                                  "bar"
                                ]]), schema);
              }), {
              operation: "ReverseConvert",
              code: {
                TAG: "OperationFailed",
                _0: "User error"
              },
              path: S.Path.fromArray(["\"\'\`"])
            });
      }));

Ava("Field name in a format of a path is handled properly", (function (t) {
        var schema = S.object(function (s) {
              return {
                      field: s.f("[\"abc\"][\"cde\"]", S.string)
                    };
            });
        U.assertThrows(t, (function () {
                return S.parseOrThrow({"bar": "foo"}, schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "InvalidType",
                expected: S.string,
                received: undefined
              },
              path: S.Path.fromArray(["[\"abc\"][\"cde\"]"])
            });
      }));

export {
  
}
/*  Not a pure module */
