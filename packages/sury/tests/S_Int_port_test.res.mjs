// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import * as U from "./U.res.mjs";
import Ava from "ava";

Ava("Successfully parses valid data", (function (t) {
        var schema = S.port(S.$$int, undefined);
        t.deepEqual(S.parseOrThrow(8080, schema), 8080, undefined);
      }));

Ava("Fails to parse invalid data", (function (t) {
        var schema = S.port(S.$$int, undefined);
        U.assertThrows(t, (function () {
                return S.parseOrThrow(65536, schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "OperationFailed",
                _0: "Invalid port"
              },
              path: S.Path.empty
            });
      }));

Ava("Successfully serializes valid value", (function (t) {
        var schema = S.port(S.$$int, undefined);
        t.deepEqual(S.reverseConvertOrThrow(8080, schema), 8080, undefined);
      }));

Ava("Fails to serialize invalid value", (function (t) {
        var schema = S.port(S.$$int, undefined);
        U.assertThrows(t, (function () {
                return S.reverseConvertOrThrow(-80, schema);
              }), {
              operation: "ReverseConvert",
              code: {
                TAG: "OperationFailed",
                _0: "Invalid port"
              },
              path: S.Path.empty
            });
      }));

Ava("Returns custom error message", (function (t) {
        var schema = S.port(S.$$int, "Custom");
        U.assertThrows(t, (function () {
                return S.parseOrThrow(400000, schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "OperationFailed",
                _0: "Custom"
              },
              path: S.Path.empty
            });
      }));

Ava("Returns refinement", (function (t) {
        var schema = S.port(S.$$int, undefined);
        t.deepEqual(S.Int.refinements(schema), [{
                kind: "Port",
                message: "Invalid port"
              }], undefined);
      }));

export {
  
}
/*  Not a pure module */
