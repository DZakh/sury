// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import * as U from "./U.res.mjs";
import Ava from "ava";

var value = [
  123,
  true
];

var any = [123, true];

var invalidAny = [123];

var invalidTypeAny = "Hello world!";

function factory() {
  return S.tuple2(S.$$int, S.bool);
}

Ava("Successfully parses", (function (t) {
        var schema = S.tuple2(S.$$int, S.bool);
        t.deepEqual(S.parseOrThrow(any, schema), value, undefined);
      }));

Ava("Fails to parse invalid value", (function (t) {
        var schema = S.tuple2(S.$$int, S.bool);
        U.assertThrows(t, (function () {
                return S.parseOrThrow(invalidAny, schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "InvalidType",
                expected: schema,
                received: invalidAny
              },
              path: S.Path.empty
            });
      }));

Ava("Fails to parse invalid type", (function (t) {
        var schema = S.tuple2(S.$$int, S.bool);
        U.assertThrows(t, (function () {
                return S.parseOrThrow(invalidTypeAny, schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "InvalidType",
                expected: schema,
                received: invalidTypeAny
              },
              path: S.Path.empty
            });
      }));

Ava("Successfully serializes", (function (t) {
        var schema = S.tuple2(S.$$int, S.bool);
        t.deepEqual(S.reverseConvertOrThrow(value, schema), any, undefined);
      }));

var Common = {
  value: value,
  any: any,
  invalidAny: invalidAny,
  invalidTypeAny: invalidTypeAny,
  factory: factory
};

export {
  Common ,
}
/*  Not a pure module */
