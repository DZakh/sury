// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import * as U from "./U.res.mjs";
import Ava from "ava";

function validAsyncRefine(__x) {
  return S.transform(__x, (function (param) {
                return {
                        a: (function (value) {
                            return Promise.resolve(value);
                          })
                      };
              }));
}

function invalidSyncRefine(__x) {
  return S.refine(__x, (function (s) {
                return function (param) {
                  s.fail("Sync user error", undefined);
                };
              }));
}

var unresolvedPromise = new Promise((function (param, param$1) {
        
      }));

function makeInvalidPromise(s) {
  return Promise.resolve().then(function () {
              return s.fail("Async user error", undefined);
            });
}

function invalidAsyncRefine(__x) {
  return S.transform(__x, (function (s) {
                return {
                        a: (function (param) {
                            return makeInvalidPromise(s);
                          })
                      };
              }));
}

Ava("[Union] Passes with Parse operation. Async item should fail", (function (t) {
        var schema = S.union([
              validAsyncRefine(S.literal(2)),
              S.literal(2),
              S.literal(3)
            ]);
        U.assertThrowsMessage(t, (function () {
                return S.parseOrThrow(2, schema);
              }), "Failed parsing: Encountered unexpected async transform or refine. Use parseAsyncOrThrow operation instead");
      }));

Ava("[Union] Parses async items in serial", (function (t) {
        var actionCounter = {
          contents: 0
        };
        var schema = S.union([
              S.transform(S.literal(2), (function (param) {
                      return {
                              a: (function (param) {
                                  actionCounter.contents = actionCounter.contents + 1 | 0;
                                  return unresolvedPromise;
                                })
                            };
                    })),
              S.transform(S.literal(2), (function (param) {
                      return {
                              a: (function (param) {
                                  actionCounter.contents = actionCounter.contents + 1 | 0;
                                  return unresolvedPromise;
                                })
                            };
                    }))
            ]);
        S.parseAsyncOrThrow(2, schema);
        t.deepEqual(actionCounter.contents, 1, undefined);
      }));

var Union = {};

export {
  validAsyncRefine ,
  invalidSyncRefine ,
  unresolvedPromise ,
  makeInvalidPromise ,
  invalidAsyncRefine ,
  Union ,
}
/* unresolvedPromise Not a pure module */
