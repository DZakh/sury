// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import * as U from "./U.res.mjs";
import Ava from "ava";

var value = NaN;

var invalidValue = 123;

var any = NaN;

var invalidTypeAny = "Hello world!";

function factory() {
  return S.literal(NaN);
}

Ava("Successfully parses", (function (t) {
        var schema = factory();
        t.deepEqual(S.parseOrThrow(any, schema), value, undefined);
      }));

Ava("Fails to parse invalid type", (function (t) {
        var schema = factory();
        U.assertThrows(t, (function () {
                return S.parseOrThrow(invalidTypeAny, schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "InvalidType",
                expected: S.literal(NaN),
                received: invalidTypeAny
              },
              path: S.Path.empty
            });
      }));

Ava("Successfully serializes", (function (t) {
        var schema = factory();
        t.deepEqual(S.reverseConvertOrThrow(value, schema), any, undefined);
      }));

Ava("Fails to serialize invalid value", (function (t) {
        var schema = factory();
        U.assertThrows(t, (function () {
                return S.reverseConvertOrThrow(invalidValue, schema);
              }), {
              operation: "ReverseConvert",
              code: {
                TAG: "InvalidType",
                expected: S.literal(NaN),
                received: invalidValue
              },
              path: S.Path.empty
            });
      }));

Ava("Compiled parse code snapshot", (function (t) {
        var schema = factory();
        U.assertCompiledCode(t, schema, "Parse", "i=>{if(!Number.isNaN(i)){e[0](i)}return i}", undefined);
      }));

Ava("Compiled serialize code snapshot", (function (t) {
        var schema = factory();
        U.assertCompiledCode(t, schema, "ReverseConvert", "i=>{if(!Number.isNaN(i)){e[0](i)}return i}", undefined);
      }));

Ava("Reverse schema to self", (function (t) {
        var schema = factory();
        t.is(S.reverse(schema), schema, undefined);
      }));

Ava("Succesfully uses reversed schema for parsing back to initial value", (function (t) {
        var schema = factory();
        U.assertReverseParsesBack(t, schema, NaN);
      }));

var Common = {
  value: value,
  invalidValue: invalidValue,
  any: any,
  invalidTypeAny: invalidTypeAny,
  factory: factory
};

export {
  Common ,
}
/* value Not a pure module */
