// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import * as U from "./U.res.mjs";
import Ava from "ava";

Ava("Successfully parses valid data", (function (t) {
        var schema = S.datetime(S.string, undefined);
        t.deepEqual(S.parseOrThrow("2020-01-01T00:00:00Z", schema), new Date("2020-01-01T00:00:00Z"), undefined);
        t.deepEqual(S.parseOrThrow("2020-01-01T00:00:00.123Z", schema), new Date("2020-01-01T00:00:00.123Z"), undefined);
        t.deepEqual(S.parseOrThrow("2020-01-01T00:00:00.123456Z", schema), new Date("2020-01-01T00:00:00.123456Z"), undefined);
      }));

Ava("Fails to parse non UTC date string", (function (t) {
        var schema = S.datetime(S.string, undefined);
        U.assertThrows(t, (function () {
                return S.parseOrThrow("Thu Apr 20 2023 10:45:48 GMT+0400", schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "OperationFailed",
                _0: "Invalid datetime string! Expected UTC"
              },
              path: S.Path.empty
            });
      }));

Ava("Fails to parse UTC date with timezone offset", (function (t) {
        var schema = S.datetime(S.string, undefined);
        U.assertThrows(t, (function () {
                return S.parseOrThrow("2020-01-01T00:00:00+02:00", schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "OperationFailed",
                _0: "Invalid datetime string! Expected UTC"
              },
              path: S.Path.empty
            });
      }));

Ava("Uses custom message on failure", (function (t) {
        var schema = S.datetime(S.string, "Invalid date");
        U.assertThrows(t, (function () {
                return S.parseOrThrow("Thu Apr 20 2023 10:45:48 GMT+0400", schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "OperationFailed",
                _0: "Invalid date"
              },
              path: S.Path.empty
            });
      }));

Ava("Successfully serializes valid value", (function (t) {
        var schema = S.datetime(S.string, undefined);
        t.deepEqual(S.reverseConvertOrThrow(new Date("2020-01-01T00:00:00.123Z"), schema), "2020-01-01T00:00:00.123Z", undefined);
      }));

Ava("Trims precision to 3 digits when serializing", (function (t) {
        var schema = S.datetime(S.string, undefined);
        t.deepEqual(S.reverseConvertOrThrow(new Date("2020-01-01T00:00:00.123456Z"), schema), "2020-01-01T00:00:00.123Z", undefined);
      }));

Ava("Returns refinement", (function (t) {
        var schema = S.datetime(S.string, undefined);
        t.deepEqual(S.$$String.refinements(schema), [{
                kind: "Datetime",
                message: "Invalid datetime string! Expected UTC"
              }], undefined);
      }));

export {
  
}
/*  Not a pure module */
