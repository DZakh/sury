// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import * as U from "./U.res.mjs";
import Ava from "ava";

Ava("Successfully parses JSON", (function (t) {
        t.deepEqual(S.parseOrThrow("\"Foo\"", S.jsonString(S.string, undefined)), "Foo", undefined);
      }));

Ava("Successfully serializes JSON", (function (t) {
        t.deepEqual(S.reverseConvertOrThrow("Foo", S.jsonString(S.string, undefined)), '"Foo"', undefined);
      }));

Ava("Successfully serializes JSON object", (function (t) {
        var schema = S.schema(function (param) {
              return {
                      foo: "bar",
                      baz: [
                        1,
                        3
                      ]
                    };
            });
        t.deepEqual(S.reverseConvertOrThrow({
                  foo: "bar",
                  baz: [
                    1,
                    3
                  ]
                }, S.jsonString(schema, undefined)), '{"foo":"bar","baz":[1,3]}', undefined);
      }));

Ava("Fails to serialize Option schema", (function (t) {
        var schema = S.jsonString(S.option(S.bool), undefined);
        U.assertThrows(t, (function () {
                return S.reverseConvertOrThrow(undefined, schema);
              }), {
              operation: "ReverseConvertToJson",
              code: {
                TAG: "InvalidJsonSchema",
                _0: S.option(S.bool)
              },
              path: S.Path.empty
            });
      }));

Ava("Successfully serializes JSON object with space", (function (t) {
        var schema = S.schema(function (param) {
              return {
                      foo: "bar",
                      baz: [
                        1,
                        3
                      ]
                    };
            });
        t.deepEqual(S.reverseConvertOrThrow({
                  foo: "bar",
                  baz: [
                    1,
                    3
                  ]
                }, S.jsonString(schema, 2)), '{\n  "foo": "bar",\n  "baz": [\n    1,\n    3\n  ]\n}', undefined);
      }));

Ava("Create schema when passing non-jsonable schema to S.jsonString, but fails to serialize", (function (t) {
        var schema = S.jsonString(S.object(function (s) {
                  return s.f("foo", S.unknown);
                }), undefined);
        U.assertThrows(t, (function () {
                return S.reverseConvertOrThrow("foo", S.jsonString(schema, 2));
              }), {
              operation: "ReverseConvertToJson",
              code: {
                TAG: "InvalidJsonSchema",
                _0: S.unknown
              },
              path: S.Path.empty
            });
      }));

Ava("Compiled parse code snapshot", (function (t) {
        var schema = S.jsonString(S.bool, undefined);
        U.assertCompiledCode(t, schema, "Parse", "i=>{if(typeof i!==\"string\"){e[2](i)}let v0;try{v0=JSON.parse(i)}catch(t){e[0](t.message)}if(typeof v0!==\"boolean\"){e[1](v0)}return v0}", undefined);
      }));

Ava("Compiled convert code snapshot", (function (t) {
        var schema = S.jsonString(S.bool, undefined);
        U.assertCompiledCode(t, schema, "Convert", "i=>{let v0;try{v0=JSON.parse(i)}catch(t){e[0](t.message)}return v0}", undefined);
      }));

Ava("Compiled async parse code snapshot", (function (t) {
        var schema = S.jsonString(S.transform(S.bool, (function (param) {
                    return {
                            a: (function (i) {
                                return Promise.resolve(i);
                              })
                          };
                  })), undefined);
        U.assertCompiledCode(t, schema, "Parse", "i=>{if(typeof i!==\"string\"){e[3](i)}let v0;try{v0=JSON.parse(i)}catch(t){e[0](t.message)}if(typeof v0!==\"boolean\"){e[1](v0)}return e[2](v0)}", undefined);
      }));

Ava("Compiled serialize code snapshot", (function (t) {
        var schema = S.jsonString(S.bool, undefined);
        U.assertCompiledCode(t, schema, "ReverseConvert", "i=>{return JSON.stringify(i)}", undefined);
      }));

Ava("Compiled serialize code snapshot with space", (function (t) {
        var schema = S.jsonString(S.bool, 2);
        U.assertCompiledCode(t, schema, "ReverseConvert", "i=>{return JSON.stringify(i,null,2)}", undefined);
      }));

Ava("Reverse schema to the original schema", (function (t) {
        var schema = S.jsonString(S.bool, undefined);
        U.assertEqualSchemas(t, S.reverse(schema), S.bool, undefined);
      }));

Ava("Succesfully uses reversed schema for parsing back to initial value", (function (t) {
        var schema = S.jsonString(S.bool, undefined);
        U.assertReverseParsesBack(t, schema, true);
      }));

export {
  
}
/*  Not a pure module */
