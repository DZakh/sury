// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import * as U from "./U.res.mjs";
import Ava from "ava";

function assertCode(t, fn, code) {
  t.is(fn.toString(), code, undefined);
}

Ava("Schema with empty code optimised to use precompiled noop function", (function (t) {
        var fn = S.compile(S.string, "Any", "Input", "Sync", false);
        assertCode(t, fn, U.noopOpCode);
      }));

Ava("Doesn't compile primitive unknown with assert output to noop", (function (t) {
        var fn = S.compile(S.unknown, "Any", "Assert", "Sync", true);
        assertCode(t, fn, "i=>{return void 0}");
      }));

Ava("Doesn't compile to noop when primitive converted to json string", (function (t) {
        var fn = S.compile(S.string, "Any", "JsonString", "Sync", false);
        assertCode(t, fn, "i=>{return JSON.stringify(i)}");
      }));

Ava("JsonString output with Async mode", (function (t) {
        var fn = S.compile(S.string, "Any", "JsonString", "Async", false);
        assertCode(t, fn, "i=>{return Promise.resolve(JSON.stringify(i))}");
      }));

Ava("TypeValidation=false works with assert output", (function (t) {
        var fn = S.compile(S.string, "Any", "Assert", "Sync", true);
        assertCode(t, fn, "i=>{if(typeof i!==\"string\"){e[0](i)}return void 0}");
        var fn$1 = S.compile(S.string, "Any", "Assert", "Sync", false);
        assertCode(t, fn$1, "i=>{return void 0}");
      }));

Ava("Assert output with Async mode", (function (t) {
        var fn = S.compile(S.string, "Any", "Assert", "Async", true);
        assertCode(t, fn, "i=>{if(typeof i!==\"string\"){e[0](i)}return Promise.resolve(void 0)}");
      }));

export {
  assertCode ,
}
/*  Not a pure module */
