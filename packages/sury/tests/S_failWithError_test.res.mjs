// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import * as U from "./U.res.mjs";
import Ava from "ava";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

Ava("Keeps operation of the error passed to S.Error.raise", (function (t) {
        var schema = S.array(S.transform(S.string, (function (param) {
                    return {
                            p: (function (param) {
                                return U.raiseError(U.error({
                                                operation: "ReverseConvert",
                                                code: {
                                                  TAG: "OperationFailed",
                                                  _0: "User error"
                                                },
                                                path: S.Path.fromArray([
                                                      "a",
                                                      "b"
                                                    ])
                                              }));
                              })
                          };
                  })));
        U.assertThrows(t, (function () {
                return S.parseOrThrow(["Hello world!"], schema);
              }), {
              operation: "ReverseConvert",
              code: {
                TAG: "OperationFailed",
                _0: "User error"
              },
              path: S.Path.fromArray([
                    "0",
                    "a",
                    "b"
                  ])
            });
      }));

Ava("Works with failing outside of the parser", (function (t) {
        var schema = S.object(function (s) {
              return s.f("field", S.transform(S.string, (function (s) {
                                return s.fail("User error", Caml_option.some(S.Path.fromArray([
                                                    "a",
                                                    "b"
                                                  ])));
                              })));
            });
        U.assertThrows(t, (function () {
                return S.parseOrThrow(["Hello world!"], schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "OperationFailed",
                _0: "User error"
              },
              path: S.Path.concat(S.Path.fromLocation("field"), S.Path.fromArray([
                        "a",
                        "b"
                      ]))
            });
      }));

Ava("Works with failing outside of the parser inside of array", (function (t) {
        var schema = S.object(function (s) {
              return s.f("field", S.array(S.transform(S.string, (function (s) {
                                    return s.fail("User error", Caml_option.some(S.Path.fromArray([
                                                        "a",
                                                        "b"
                                                      ])));
                                  }))));
            });
        U.assertThrows(t, (function () {
                return S.parseOrThrow(["Hello world!"], schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "OperationFailed",
                _0: "User error"
              },
              path: S.Path.concat(S.Path.concat(S.Path.fromLocation("field"), S.Path.dynamic), S.Path.fromArray([
                        "a",
                        "b"
                      ]))
            });
      }));

export {
  
}
/*  Not a pure module */
