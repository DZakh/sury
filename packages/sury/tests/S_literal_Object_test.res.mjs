// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import * as U from "./U.res.mjs";
import Ava from "ava";

var value = {
  foo: "bar"
};

var invalid = 123;

function factory() {
  return S.literal({
              foo: "bar"
            });
}

export class NotPlainValue {
      constructor() {

        this.foo = "bar";
      }
    }
;

Ava("Successfully parses", (function (t) {
        var schema = factory();
        t.deepEqual(S.parseOrThrow(value, schema), value, undefined);
      }));

Ava("Successfully serializes", (function (t) {
        var schema = factory();
        t.deepEqual(S.reverseConvertOrThrow(value, schema), value, undefined);
      }));

Ava("Fails to serialize invalid", (function (t) {
        var schema = factory();
        U.assertThrows(t, (function () {
                return S.reverseConvertOrThrow(invalid, schema);
              }), {
              operation: "ReverseConvert",
              code: {
                TAG: "InvalidType",
                expected: S.literal("bar"),
                received: undefined
              },
              path: S.Path.fromLocation("foo")
            });
      }));

Ava("Fails to parse null", (function (t) {
        var schema = factory();
        U.assertThrows(t, (function () {
                return S.parseOrThrow(null, schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "InvalidType",
                expected: S.literal(Object.fromEntries([[
                            "foo",
                            "bar"
                          ]])),
                received: null
              },
              path: S.Path.empty
            });
      }));

Ava("Can parse object instances, reduces it to normal object by default", (function (t) {
        var schema = factory();
        t.deepEqual(S.parseOrThrow(new NotPlainValue(), schema), {
              foo: "bar"
            }, undefined);
      }));

Ava("Compiled parse code snapshot", (function (t) {
        var schema = factory();
        U.assertCompiledCode(t, schema, "Parse", "i=>{if(typeof i!==\"object\"||!i||i[\"foo\"]!==\"bar\"){e[0](i)}return {\"foo\":i[\"foo\"],}}", undefined);
      }));

Ava("Compiled serialize code snapshot", (function (t) {
        var schema = factory();
        U.assertCompiledCode(t, schema, "ReverseConvert", "i=>{let v0=i[\"foo\"];if(v0!==\"bar\"){e[0](v0)}return i}", undefined);
      }));

Ava("Reverse schema to self", (function (t) {
        var schema = factory();
        t.is(S.reverse(schema), schema, undefined);
      }));

Ava("Succesfully uses reversed schema for parsing back to initial value", (function (t) {
        var schema = factory();
        U.assertReverseParsesBack(t, schema, {
              foo: "bar"
            });
      }));

var Common = {
  value: value,
  invalid: invalid,
  factory: factory
};

var value$1 = {};

var invalid$1 = Object.fromEntries([[
        "abc",
        "def"
      ]]);

function factory$1() {
  return S.literal({});
}

Ava("Successfully parses empty dict literal schema", (function (t) {
        var schema = S.literal({});
        t.deepEqual(S.parseOrThrow(value$1, schema), value$1, undefined);
      }));

Ava("Strips extra fields passed to empty dict literal schema", (function (t) {
        var schema = S.literal({});
        t.deepEqual(S.parseOrThrow(invalid$1, schema), {}, undefined);
      }));

Ava("Successfully serializes empty dict literal schema", (function (t) {
        var schema = S.literal({});
        t.deepEqual(S.reverseConvertOrThrow(value$1, schema), value$1, undefined);
      }));

Ava("Ignores extra fields during conversion of empty object literal", (function (t) {
        var schema = S.literal({});
        t.is(S.reverseConvertOrThrow(invalid$1, schema), invalid$1, undefined);
      }));

Ava("Compiled parse code snapshot of empty dict literal schema", (function (t) {
        var schema = S.literal({});
        U.assertCompiledCode(t, schema, "Parse", "i=>{if(typeof i!==\"object\"||!i){e[0](i)}return {}}", undefined);
        U.assertCompiledCode(t, S.strict(schema), "Parse", "i=>{if(typeof i!==\"object\"||!i||Array.isArray(i)){e[1](i)}let v0;for(v0 in i){if(true){e[0](v0)}}return i}", undefined);
      }));

Ava("Compiled serialize code snapshot of empty dict literal schema", (function (t) {
        var schema = S.literal({});
        U.assertCompiledCode(t, schema, "ReverseConvert", "i=>{return i}", undefined);
      }));

Ava("Reverse empty dict literal schema to self", (function (t) {
        var schema = S.literal({});
        t.is(S.reverse(schema), schema, undefined);
      }));

Ava("Succesfully uses reversed empty dict literal schema for parsing back to initial value", (function (t) {
        var schema = S.literal({});
        U.assertReverseParsesBack(t, schema, value$1);
      }));

var EmptyDict = {
  value: value$1,
  invalid: invalid$1,
  factory: factory$1
};

export {
  Common ,
  EmptyDict ,
}
/*  Not a pure module */
