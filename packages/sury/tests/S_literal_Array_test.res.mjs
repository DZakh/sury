// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import * as U from "./U.res.mjs";
import Ava from "ava";

var value = [
  "bar",
  true
];

var invalid = 123;

function factory() {
  return S.literal([
              "bar",
              true
            ]);
}

Ava("Successfully parses", (function (t) {
        var schema = S.literal([
              "bar",
              true
            ]);
        t.deepEqual(S.parseOrThrow(value, schema), value, undefined);
      }));

Ava("Fails to parse invalid", (function (t) {
        var schema = S.literal([
              "bar",
              true
            ]);
        U.assertThrows(t, (function () {
                return S.parseOrThrow(invalid, schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "InvalidType",
                expected: S.literal([
                      "bar",
                      true
                    ]),
                received: invalid
              },
              path: S.Path.empty
            });
      }));

Ava("Successfully serializes", (function (t) {
        var schema = S.literal([
              "bar",
              true
            ]);
        t.deepEqual(S.reverseConvertOrThrow(value, schema), value, undefined);
      }));

Ava("Fails to serialize invalid", (function (t) {
        var schema = S.literal([
              "bar",
              true
            ]);
        U.assertThrows(t, (function () {
                return S.reverseConvertOrThrow(invalid, schema);
              }), {
              operation: "ReverseConvert",
              code: {
                TAG: "InvalidType",
                expected: S.literal("bar"),
                received: undefined
              },
              path: S.Path.fromLocation("0")
            });
      }));

Ava("Fails to parse array like object", (function (t) {
        var schema = S.literal([
              "bar",
              true
            ]);
        U.assertThrows(t, (function () {
                return S.parseOrThrow({0: "bar",1:true}, schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "InvalidType",
                expected: S.literal([
                      "bar",
                      true
                    ]),
                received: {0: "bar",1:true}
              },
              path: S.Path.empty
            });
      }));

Ava("Fails to parse array with excess item", (function (t) {
        var schema = S.literal([
              "bar",
              true
            ]);
        U.assertThrows(t, (function () {
                return S.parseOrThrow(["bar", true, false], S.strict(schema));
              }), {
              operation: "Parse",
              code: {
                TAG: "InvalidType",
                expected: S.literal([
                      "bar",
                      true
                    ]),
                received: ["bar", true, false]
              },
              path: S.Path.empty
            });
      }));

Ava("Compiled parse code snapshot", (function (t) {
        var schema = S.literal([
              "bar",
              true
            ]);
        U.assertCompiledCode(t, schema, "Parse", "i=>{if(!Array.isArray(i)||i.length!==2||i[\"0\"]!==\"bar\"||i[\"1\"]!==true){e[0](i)}return i}", undefined);
      }));

Ava("Compiled serialize code snapshot", (function (t) {
        var schema = S.literal([
              "bar",
              true
            ]);
        U.assertCompiledCode(t, schema, "ReverseConvert", "i=>{let v0=i[\"0\"],v1=i[\"1\"];if(v0!==\"bar\"){e[0](v0)}if(v1!==true){e[1](v1)}return i}", undefined);
      }));

Ava("Reverse schema to self", (function (t) {
        var schema = S.literal([
              "bar",
              true
            ]);
        t.is(S.reverse(schema), schema, undefined);
      }));

Ava("Succesfully uses reversed schema for parsing back to initial value", (function (t) {
        var schema = S.literal([
              "bar",
              true
            ]);
        U.assertReverseParsesBack(t, schema, [
              "bar",
              true
            ]);
      }));

var Common = {
  value: value,
  invalid: invalid,
  factory: factory
};

var value$1 = [];

var invalid$1 = ["abc"];

function factory$1() {
  return S.literal([]);
}

Ava("Successfully parses empty array literal schema", (function (t) {
        var schema = S.literal([]);
        t.deepEqual(S.parseOrThrow(value$1, schema), value$1, undefined);
      }));

Ava("Ignores extra items in strip mode and prevents in strict (default)", (function (t) {
        var schema = S.literal([]);
        t.deepEqual(S.parseOrThrow(invalid$1, S.strip(schema)), [], undefined);
        U.assertThrows(t, (function () {
                return S.parseOrThrow(invalid$1, S.strict(schema));
              }), {
              operation: "Parse",
              code: {
                TAG: "InvalidType",
                expected: S.literal([]),
                received: invalid$1
              },
              path: S.Path.empty
            });
      }));

Ava("Successfully serializes empty array literal schema", (function (t) {
        var schema = S.literal([]);
        t.deepEqual(S.reverseConvertOrThrow(value$1, schema), value$1, undefined);
      }));

Ava("Serialize array with excess item in strict mode and it passes through", (function (t) {
        var schema = S.literal([]);
        t.deepEqual(S.reverseConvertOrThrow(invalid$1, S.strict(schema)), invalid$1, undefined);
      }));

Ava("Compiled parse code snapshot of empty array literal schema", (function (t) {
        var schema = S.literal([]);
        U.assertCompiledCode(t, schema, "Parse", "i=>{if(!Array.isArray(i)||i.length!==0){e[0](i)}return i}", undefined);
      }));

Ava("Compiled serialize code snapshot of empty array literal schema", (function (t) {
        var schema = S.literal([]);
        U.assertCompiledCode(t, schema, "ReverseConvert", "i=>{return i}", undefined);
      }));

Ava("Reverse empty array literal schema to self", (function (t) {
        var schema = S.literal([]);
        t.is(S.reverse(schema), schema, undefined);
      }));

Ava("Succesfully uses reversed empty array literal schema for parsing back to initial value", (function (t) {
        var schema = S.literal([]);
        U.assertReverseParsesBack(t, schema, value$1);
      }));

var EmptyArray = {
  value: value$1,
  invalid: invalid$1,
  factory: factory$1
};

export {
  Common ,
  EmptyArray ,
}
/*  Not a pure module */
