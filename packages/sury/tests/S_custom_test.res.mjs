// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import * as U from "./U.res.mjs";
import Ava from "ava";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function nullableSchema(innerSchema) {
  return S.custom("Nullable", (function (param) {
                return {
                        p: (function (unknown) {
                            if (unknown === undefined || unknown === null) {
                              return ;
                            } else {
                              return Caml_option.some(S.parseOrThrow(unknown, innerSchema));
                            }
                          }),
                        s: (function (value) {
                            if (value !== undefined) {
                              return S.reverseConvertOrThrow(Caml_option.valFromOption(value), innerSchema);
                            } else {
                              return null;
                            }
                          })
                      };
              }));
}

Ava("Correctly parses custom schema", (function (t) {
        var schema = nullableSchema(S.string);
        t.deepEqual(S.parseOrThrow("Hello world!", schema), "Hello world!", undefined);
        t.deepEqual(S.parseOrThrow(null, schema), undefined, undefined);
        t.deepEqual(S.parseOrThrow(undefined, schema), undefined, undefined);
        U.assertThrows(t, (function () {
                return S.parseOrThrow(123, schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "InvalidType",
                expected: S.string,
                received: 123
              },
              path: S.Path.empty
            });
      }));

Ava("Correctly serializes custom schema", (function (t) {
        var schema = nullableSchema(S.string);
        t.deepEqual(S.reverseConvertOrThrow("Hello world!", schema), "Hello world!", undefined);
        t.deepEqual(S.reverseConvertOrThrow(undefined, schema), null, undefined);
      }));

Ava("Reverses custom schema to unknown", (function (t) {
        var schema = nullableSchema(S.string);
        U.assertEqualSchemas(t, S.reverse(schema), S.unknown, undefined);
      }));

Ava("Succesfully uses reversed schema for parsing back to initial value", (function (t) {
        var schema = nullableSchema(S.string);
        U.assertReverseParsesBack(t, schema, "abc");
      }));

Ava("Fails to serialize with user error", (function (t) {
        var schema = S.custom("Test", (function (s) {
                return {
                        s: (function (param) {
                            return s.fail("User error", undefined);
                          })
                      };
              }));
        U.assertThrows(t, (function () {
                return S.reverseConvertOrThrow(undefined, schema);
              }), {
              operation: "ReverseConvert",
              code: {
                TAG: "OperationFailed",
                _0: "User error"
              },
              path: S.Path.empty
            });
      }));

Ava("Fails to serialize with serializer is missing", (function (t) {
        var schema = S.custom("Test", (function (param) {
                return {
                        p: (function (param) {
                            
                          })
                      };
              }));
        U.assertThrows(t, (function () {
                return S.reverseConvertOrThrow(undefined, schema);
              }), {
              operation: "ReverseConvert",
              code: {
                TAG: "InvalidOperation",
                description: "The S.custom serializer is missing"
              },
              path: S.Path.empty
            });
      }));

Ava("Parses with asyncParser", (async function (t) {
        var schema = S.custom("Test", (function (param) {
                return {
                        a: (function (param) {
                            return Promise.resolve();
                          })
                      };
              }));
        t.deepEqual(await S.parseAsyncOrThrow(undefined, schema), undefined, undefined);
      }));

export {
  nullableSchema ,
}
/*  Not a pure module */
