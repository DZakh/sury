// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import * as U from "./U.res.mjs";
import Ava from "ava";

var value = "ReScript is Great!";

var invalidValue = "Hello world!";

var any = "ReScript is Great!";

var invalidAny = "Hello world!";

var invalidTypeAny = true;

function factory() {
  return S.literal("ReScript is Great!");
}

Ava("Successfully parses", (function (t) {
        var schema = S.literal("ReScript is Great!");
        t.deepEqual(S.parseOrThrow(any, schema), value, undefined);
      }));

Ava("Fails to parse invalid value", (function (t) {
        var schema = S.literal("ReScript is Great!");
        U.assertThrows(t, (function () {
                return S.parseOrThrow(invalidAny, schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "InvalidType",
                expected: S.literal("ReScript is Great!"),
                received: "Hello world!"
              },
              path: S.Path.empty
            });
      }));

Ava("Fails to parse invalid type", (function (t) {
        var schema = S.literal("ReScript is Great!");
        U.assertThrows(t, (function () {
                return S.parseOrThrow(invalidTypeAny, schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "InvalidType",
                expected: S.literal("ReScript is Great!"),
                received: invalidTypeAny
              },
              path: S.Path.empty
            });
      }));

Ava("Successfully serializes", (function (t) {
        var schema = S.literal("ReScript is Great!");
        t.deepEqual(S.reverseConvertOrThrow(value, schema), any, undefined);
      }));

Ava("Fails to serialize invalid value", (function (t) {
        var schema = S.literal("ReScript is Great!");
        U.assertThrows(t, (function () {
                return S.reverseConvertOrThrow(invalidValue, schema);
              }), {
              operation: "ReverseConvert",
              code: {
                TAG: "InvalidType",
                expected: S.literal("ReScript is Great!"),
                received: "Hello world!"
              },
              path: S.Path.empty
            });
      }));

Ava("Compiled parse code snapshot", (function (t) {
        var schema = S.literal("ReScript is Great!");
        U.assertCompiledCode(t, schema, "Parse", "i=>{if(i!==\"ReScript is Great!\"){e[0](i)}return i}", undefined);
      }));

Ava("Compiled serialize code snapshot", (function (t) {
        var schema = S.literal("ReScript is Great!");
        U.assertCompiledCode(t, schema, "ReverseConvert", "i=>{if(i!==\"ReScript is Great!\"){e[0](i)}return i}", undefined);
      }));

Ava("Reverse schema to self", (function (t) {
        var schema = S.literal("ReScript is Great!");
        t.is(S.reverse(schema), schema, undefined);
      }));

Ava("Succesfully uses reversed schema for parsing back to initial value", (function (t) {
        var schema = S.literal("ReScript is Great!");
        U.assertReverseParsesBack(t, schema, "ReScript is Great!");
      }));

var Common = {
  value: value,
  invalidValue: invalidValue,
  any: any,
  invalidAny: invalidAny,
  invalidTypeAny: invalidTypeAny,
  factory: factory
};

export {
  Common ,
}
/*  Not a pure module */
