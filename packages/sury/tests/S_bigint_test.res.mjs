// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import * as U from "./U.res.mjs";
import Ava from "ava";

var any = 123n;

var invalidAny = 123.45;

function factory() {
  return S.bigint;
}

Ava("Successfully parses", (function (t) {
        var schema = S.bigint;
        t.deepEqual(S.parseOrThrow(any, schema), 123n, undefined);
      }));

Ava("Fails to parse", (function (t) {
        var schema = S.bigint;
        U.assertThrows(t, (function () {
                return S.parseOrThrow(invalidAny, schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "InvalidType",
                expected: schema,
                received: invalidAny
              },
              path: S.Path.empty
            });
      }));

Ava("Fails to convert to Json", (function (t) {
        var schema = S.bigint;
        t.throws((function () {
                return S.convertToJsonOrThrow(123n, schema);
              }), {
              message: "Failed converting to JSON: The 'bigint' schema cannot be converted to JSON"
            }, undefined);
      }));

Ava("BigInt name", (function (t) {
        var schema = S.bigint;
        t.is(S.toExpression(schema), "bigint", undefined);
      }));

Ava("Successfully serializes", (function (t) {
        var schema = S.bigint;
        t.deepEqual(S.reverseConvertOrThrow(123n, schema), any, undefined);
      }));

Ava("Compiled parse code snapshot", (function (t) {
        var schema = S.bigint;
        U.assertCompiledCode(t, schema, "Parse", "i=>{if(typeof i!==\"bigint\"){e[0](i)}return i}", undefined);
      }));

Ava("Compiled serialize code snapshot", (function (t) {
        var schema = S.bigint;
        U.assertCompiledCodeIsNoop(t, schema, "ReverseConvert", undefined);
      }));

Ava("Reverse schema to self", (function (t) {
        var schema = S.bigint;
        t.is(S.reverse(schema), schema, undefined);
      }));

Ava("Succesfully uses reversed schema for parsing back to initial value", (function (t) {
        var schema = S.bigint;
        U.assertReverseParsesBack(t, schema, 123n);
      }));

var Common = {
  value: 123n,
  any: any,
  invalidAny: invalidAny,
  factory: factory
};

export {
  Common ,
}
/*  Not a pure module */
