// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import * as U from "./U.res.mjs";
import Ava from "ava";

var any = true;

function factory() {
  return S.never;
}

Ava("Fails to ", (function (t) {
        var schema = S.never;
        U.assertThrows(t, (function () {
                return S.parseOrThrow(any, schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "InvalidType",
                expected: S.never,
                received: any
              },
              path: S.Path.empty
            });
      }));

Ava("Fails to serialize ", (function (t) {
        var schema = S.never;
        U.assertThrows(t, (function () {
                return S.reverseConvertOrThrow(any, schema);
              }), {
              operation: "ReverseConvert",
              code: {
                TAG: "InvalidType",
                expected: schema,
                received: any
              },
              path: S.Path.empty
            });
      }));

Ava("Compiled parse code snapshot", (function (t) {
        var schema = S.never;
        U.assertCompiledCode(t, schema, "Parse", "i=>{e[0](i);return i}", undefined);
      }));

Ava("Compiled serialize code snapshot", (function (t) {
        var schema = S.never;
        U.assertCompiledCode(t, schema, "ReverseConvert", "i=>{e[0](i);return i}", undefined);
      }));

Ava("Reverse schema to self", (function (t) {
        var schema = S.never;
        t.is(S.reverse(schema), schema, undefined);
      }));

var Common = {
  any: any,
  factory: factory
};

Ava("Fails to parse a object with Never field", (function (t) {
        var schema = S.object(function (s) {
              return {
                      key: s.f("key", S.string),
                      oldKey: s.f("oldKey", S.never)
                    };
            });
        U.assertThrows(t, (function () {
                return S.parseOrThrow({"key":"value"}, schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "InvalidType",
                expected: S.never,
                received: undefined
              },
              path: S.Path.fromArray(["oldKey"])
            });
      }));

Ava("Successfully parses a object with Never field when it's optional and not present", (function (t) {
        var schema = S.object(function (s) {
              return {
                      key: s.f("key", S.string),
                      oldKey: s.f("oldKey", S.meta(S.option(S.never), {
                                description: "We stopped using the field from the v0.9.0 release"
                              }))
                    };
            });
        t.deepEqual(S.parseOrThrow({"key":"value"}, schema), {
              key: "value",
              oldKey: undefined
            }, undefined);
      }));

var ObjectField = {};

export {
  Common ,
  ObjectField ,
}
/*  Not a pure module */
