// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import * as U from "./U.res.mjs";
import Ava from "ava";

Ava("Successfully parses valid data", (function (t) {
        var schema = S.floatMax(S.$$float, 1, undefined);
        t.deepEqual(S.parseOrThrow(1, schema), 1, undefined);
        t.deepEqual(S.parseOrThrow(-1, schema), -1, undefined);
      }));

Ava("Fails to parse invalid data", (function (t) {
        var schema = S.floatMax(S.$$float, 1, undefined);
        U.assertThrows(t, (function () {
                return S.parseOrThrow(1234, schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "OperationFailed",
                _0: "Number must be lower than or equal to 1"
              },
              path: S.Path.empty
            });
      }));

Ava("Successfully serializes valid value", (function (t) {
        var schema = S.floatMax(S.$$float, 1, undefined);
        t.deepEqual(S.reverseConvertOrThrow(1, schema), 1, undefined);
        t.deepEqual(S.reverseConvertOrThrow(-1, schema), -1, undefined);
      }));

Ava("Fails to serialize invalid value", (function (t) {
        var schema = S.floatMax(S.$$float, 1, undefined);
        U.assertThrows(t, (function () {
                return S.reverseConvertOrThrow(1234, schema);
              }), {
              operation: "ReverseConvert",
              code: {
                TAG: "OperationFailed",
                _0: "Number must be lower than or equal to 1"
              },
              path: S.Path.empty
            });
      }));

Ava("Returns custom error message", (function (t) {
        var schema = S.floatMax(S.$$float, 1, "Custom");
        U.assertThrows(t, (function () {
                return S.parseOrThrow(12, schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "OperationFailed",
                _0: "Custom"
              },
              path: S.Path.empty
            });
      }));

Ava("Returns refinement", (function (t) {
        var schema = S.floatMax(S.$$float, 1, undefined);
        t.deepEqual(S.Float.refinements(schema), [{
                kind: {
                  TAG: "Max",
                  value: 1
                },
                message: "Number must be lower than or equal to 1"
              }], undefined);
      }));

Ava("Compiled parse code snapshot", (function (t) {
        var schema = S.floatMax(S.$$float, 1, "Custom");
        U.assertCompiledCode(t, schema, "Parse", "i=>{if(typeof i!==\"number\"||Number.isNaN(i)){e[2](i)}if(i>e[0]){e[1]()}return i}", undefined);
      }));

export {
  
}
/*  Not a pure module */
