// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import * as U from "./U.res.mjs";
import Ava from "ava";

Ava("Initially there's no deprecation", (function (t) {
        t.deepEqual(S.string.deprecated, undefined, undefined);
      }));

Ava("Set deprecation", (function (t) {
        var withDeprecation = S.meta(S.string, {
              description: "Use number instead",
              deprecated: true
            });
        t.deepEqual(withDeprecation.deprecated, true, undefined);
        t.deepEqual(withDeprecation.description, "Use number instead", undefined);
        t.deepEqual(S.string.deprecated, undefined, "Original schema is not mutated");
      }));

Ava("Transforms don't remove deprecation", (function (t) {
        var schema = S.trim(S.meta(S.string, {
                  description: "Original schema is not mutated.",
                  deprecated: true
                }));
        t.deepEqual(schema.deprecated, true, undefined);
        t.deepEqual(schema.description, "Original schema is not mutated.", undefined);
      }));

Ava("Deprecated is a metadata only and doesn't make the field optional", (function (t) {
        var schema = S.meta(S.string, {
              description: "Use number instead.",
              deprecated: true
            });
        U.assertCompiledCode(t, schema, "Parse", "i=>{if(typeof i!==\"string\"){e[0](i)}return i}", undefined);
      }));

export {
  
}
/*  Not a pure module */
