// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import * as U from "./U.res.mjs";
import Ava from "ava";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

var any = null;

var invalidAny = 123.45;

function factory() {
  return S.$$null(S.string);
}

Ava("Successfully parses", (function (t) {
        var schema = S.$$null(S.string);
        t.deepEqual(S.parseOrThrow(any, schema), undefined, undefined);
      }));

Ava("Fails to parse", (function (t) {
        var schema = S.$$null(S.string);
        U.assertThrows(t, (function () {
                return S.parseOrThrow(invalidAny, schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "InvalidType",
                expected: schema,
                received: invalidAny
              },
              path: S.Path.empty
            });
      }));

Ava("Successfully serializes", (function (t) {
        var schema = S.$$null(S.string);
        t.deepEqual(S.reverseConvertOrThrow(undefined, schema), any, undefined);
      }));

Ava("Compiled code snapshot", (function (t) {
        var schema = S.$$null(S.string);
        U.assertCompiledCode(t, schema, "Parse", "i=>{if(i===null){i=void 0}else if(!(typeof i===\"string\")){e[0](i)}return i}", undefined);
        U.assertCompiledCode(t, schema, "ReverseConvert", "i=>{if(i===void 0){i=null}return i}", undefined);
      }));

Ava("Compiled async parse code snapshot", (function (t) {
        var schema = S.$$null(S.transform(S.unknown, (function (param) {
                    return {
                            a: (function (i) {
                                return Promise.resolve(i);
                              })
                          };
                  })));
        U.assertCompiledCode(t, schema, "Parse", "i=>{try{i=e[0](i)}catch(e0){if(i===null){i=void 0}else{e[1](i,e0)}}return Promise.resolve(i)}", undefined);
      }));

Ava("Reverse schema to option", (function (t) {
        var schema = S.$$null(S.string);
        U.assertEqualSchemas(t, S.reverse(schema), S.option(S.string), undefined);
      }));

Ava("Reverse of reverse returns the original schema", (function (t) {
        var schema = S.$$null(S.string);
        t.is(S.reverse(S.reverse(schema)), schema, undefined);
      }));

Ava("Succesfully uses reversed schema for parsing back to initial value", (function (t) {
        var schema = S.$$null(S.string);
        U.assertReverseParsesBack(t, schema, "abc");
        U.assertReverseParsesBack(t, schema, undefined);
      }));

var Common = {
  value: undefined,
  any: any,
  invalidAny: invalidAny,
  factory: factory
};

Ava("Successfully parses primitive", (function (t) {
        var schema = S.$$null(S.bool);
        t.deepEqual(S.parseOrThrow(true, schema), true, undefined);
      }));

Ava("Fails to parse JS undefined", (function (t) {
        var schema = S.$$null(S.bool);
        U.assertThrows(t, (function () {
                return S.parseOrThrow(undefined, schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "InvalidType",
                expected: schema,
                received: undefined
              },
              path: S.Path.empty
            });
      }));

Ava("Fails to parse object with missing field that marked as null", (function (t) {
        var fieldSchema = S.$$null(S.string);
        var schema = S.object(function (s) {
              return s.f("nullableField", fieldSchema);
            });
        U.assertThrows(t, (function () {
                return S.parseOrThrow({}, schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "InvalidType",
                expected: fieldSchema,
                received: undefined
              },
              path: S.Path.fromArray(["nullableField"])
            });
      }));

Ava("Fails to parse JS null when schema doesn't allow optional data", (function (t) {
        U.assertThrows(t, (function () {
                return S.parseOrThrow(null, S.bool);
              }), {
              operation: "Parse",
              code: {
                TAG: "InvalidType",
                expected: S.bool,
                received: null
              },
              path: S.Path.empty
            });
      }));

Ava("Successfully parses null and serializes it back for deprecated nullable schema", (function (t) {
        var schema = S.meta(S.$$null(S.bool), {
              description: "Deprecated",
              deprecated: true
            });
        t.deepEqual(S.reverseConvertOrThrow(S.parseOrThrow(null, schema), schema), null, undefined);
      }));

Ava("Serializes Some(None) to null for null nested in option", (function (t) {
        var schema = S.option(S.$$null(S.bool));
        t.deepEqual(S.parseOrThrow(null, schema), Caml_option.some(undefined), undefined);
        t.deepEqual(S.parseOrThrow(undefined, schema), undefined, undefined);
        t.deepEqual(S.reverseConvertOrThrow(Caml_option.some(undefined), schema), null, undefined);
        t.deepEqual(S.reverseConvertOrThrow(undefined, schema), undefined, undefined);
        U.assertCompiledCode(t, schema, "Parse", "i=>{if(i===null){i={\"BS_PRIVATE_NESTED_SOME_NONE\":0}}else if(!(typeof i===\"boolean\"||i===void 0)){e[0](i)}return i}", undefined);
        U.assertCompiledCode(t, schema, "ReverseConvert", "i=>{if(typeof i===\"object\"&&i&&i[\"BS_PRIVATE_NESTED_SOME_NONE\"]===0){i=null}return i}", undefined);
      }));

Ava("Serializes Some(None) to null for null nested in null", (function (t) {
        var schema = S.$$null(S.$$null(S.bool));
        t.deepEqual(S.parseOrThrow(null, schema), undefined, undefined);
        t.deepEqual(S.reverseConvertOrThrow(Caml_option.some(undefined), schema), null, undefined);
        t.deepEqual(S.reverseConvertOrThrow(undefined, schema), null, undefined);
        U.assertCompiledCode(t, schema, "Parse", "i=>{if(i===null){i=void 0}else if(!(typeof i===\"boolean\")){e[0](i)}return i}", undefined);
        U.assertCompiledCode(t, schema, "ReverseConvert", "i=>{if(i===void 0){i=null}else if(typeof i===\"object\"&&i&&i[\"BS_PRIVATE_NESTED_SOME_NONE\"]===0){i=null}return i}", undefined);
      }));

export {
  Common ,
}
/*  Not a pure module */
