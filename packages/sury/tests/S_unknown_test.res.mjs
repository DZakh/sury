// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import * as U from "./U.res.mjs";
import Ava from "ava";

var any = "Hello world!";

function factory() {
  return S.unknown;
}

Ava("Successfully parses", (function (t) {
        var schema = S.unknown;
        t.deepEqual(S.parseOrThrow(any, schema), any, undefined);
      }));

Ava("Successfully serializes", (function (t) {
        var schema = S.unknown;
        t.deepEqual(S.reverseConvertOrThrow(any, schema), any, undefined);
      }));

Ava("Compiled parse code snapshot", (function (t) {
        var schema = S.unknown;
        U.assertCompiledCodeIsNoop(t, schema, "Parse", undefined);
      }));

Ava("Compiled serialize code snapshot", (function (t) {
        var schema = S.unknown;
        U.assertCompiledCodeIsNoop(t, schema, "ReverseConvert", undefined);
      }));

Ava("Reverse schema to self", (function (t) {
        var schema = S.unknown;
        t.is(S.reverse(schema), schema, undefined);
      }));

Ava("Succesfully uses reversed schema for parsing back to initial value", (function (t) {
        var schema = S.unknown;
        U.assertReverseParsesBack(t, schema, (new Blob()));
      }));

var Common = {
  any: any,
  factory: factory
};

Ava("Doesn't return refinements", (function (t) {
        t.deepEqual(S.$$String.refinements(S.unknown), [], undefined);
        t.deepEqual(S.$$Array.refinements(S.unknown), [], undefined);
        t.deepEqual(S.Int.refinements(S.unknown), [], undefined);
        t.deepEqual(S.Float.refinements(S.unknown), [], undefined);
      }));

export {
  Common ,
}
/*  Not a pure module */
