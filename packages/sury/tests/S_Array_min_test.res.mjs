// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import * as U from "./U.res.mjs";
import Ava from "ava";

Ava("Successfully parses valid data", (function (t) {
        var schema = S.min(S.array(S.$$int), 1, undefined);
        t.deepEqual(S.parseOrThrow([1], schema), [1], undefined);
        t.deepEqual(S.parseOrThrow([
                  1,
                  2,
                  3,
                  4
                ], schema), [
              1,
              2,
              3,
              4
            ], undefined);
      }));

Ava("Fails to parse invalid data", (function (t) {
        var schema = S.min(S.array(S.$$int), 1, undefined);
        U.assertThrows(t, (function () {
                return S.parseOrThrow([], schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "OperationFailed",
                _0: "Array must be 1 or more items long"
              },
              path: S.Path.empty
            });
      }));

Ava("Successfully serializes valid value", (function (t) {
        var schema = S.min(S.array(S.$$int), 1, undefined);
        t.deepEqual(S.reverseConvertOrThrow([1], schema), [1], undefined);
        t.deepEqual(S.reverseConvertOrThrow([
                  1,
                  2,
                  3,
                  4
                ], schema), [1,2,3,4], undefined);
      }));

Ava("Fails to serialize invalid value", (function (t) {
        var schema = S.min(S.array(S.$$int), 1, undefined);
        U.assertThrows(t, (function () {
                return S.reverseConvertOrThrow([], schema);
              }), {
              operation: "ReverseConvert",
              code: {
                TAG: "OperationFailed",
                _0: "Array must be 1 or more items long"
              },
              path: S.Path.empty
            });
      }));

Ava("Returns custom error message", (function (t) {
        var schema = S.min(S.array(S.$$int), 1, "Custom");
        U.assertThrows(t, (function () {
                return S.parseOrThrow([], schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "OperationFailed",
                _0: "Custom"
              },
              path: S.Path.empty
            });
      }));

Ava("Returns refinement", (function (t) {
        var schema = S.min(S.array(S.$$int), 1, undefined);
        t.deepEqual(S.$$Array.refinements(schema), [{
                kind: {
                  TAG: "Min",
                  length: 1
                },
                message: "Array must be 1 or more items long"
              }], undefined);
      }));

export {
  
}
/*  Not a pure module */
