// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import * as U from "./U.res.mjs";
import Ava from "ava";

Ava("Successfully parses empty object", (function (t) {
        var schema = S.object(function (param) {
              
            });
        t.deepEqual(S.parseOrThrow({}, schema), undefined, undefined);
      }));

Ava("Successfully parses object with excess keys", (function (t) {
        var schema = S.object(function (param) {
              
            });
        t.deepEqual(S.parseOrThrow({field:"bar"}, schema), undefined, undefined);
      }));

Ava("Successfully parses empty object when UnknownKeys are strict", (function (t) {
        var schema = S.strict(S.object(function (param) {
                  
                }));
        t.deepEqual(S.parseOrThrow({}, schema), undefined, undefined);
      }));

Ava("Fails to parse object with excess keys when UnknownKeys are strict", (function (t) {
        var schema = S.strict(S.object(function (param) {
                  
                }));
        U.assertThrows(t, (function () {
                S.parseOrThrow({field:"bar"}, schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "ExcessField",
                _0: "field"
              },
              path: S.Path.empty
            });
      }));

Ava("Successfully parses object with excess keys and returns transformed value", (function (t) {
        var transformedValue = {
          bas: true
        };
        var schema = S.object(function (param) {
              return transformedValue;
            });
        t.deepEqual(S.parseOrThrow({field:"bar"}, schema), transformedValue, undefined);
      }));

Ava("Successfully serializes transformed value to empty object", (function (t) {
        var transformedValue = {
          bas: true
        };
        var schema = S.object(function (param) {
              return transformedValue;
            });
        t.deepEqual(S.reverseConvertOrThrow(transformedValue, schema), {}, undefined);
      }));

Ava("Allows to pass array to object value", (function (t) {
        var schema = S.object(function (param) {
              
            });
        t.deepEqual(S.parseOrThrow([], schema), undefined, undefined);
      }));

export {
  
}
/*  Not a pure module */
