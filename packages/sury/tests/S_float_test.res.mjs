// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import * as U from "./U.res.mjs";
import Ava from "ava";

var any = 123;

var invalidAny = "Hello world!";

function factory() {
  return S.$$float;
}

Ava("Successfully parses", (function (t) {
        var schema = S.$$float;
        t.deepEqual(S.parseOrThrow(any, schema), 123, undefined);
      }));

Ava("Fails to parse", (function (t) {
        var schema = S.$$float;
        U.assertThrows(t, (function () {
                return S.parseOrThrow(invalidAny, schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "InvalidType",
                expected: schema,
                received: invalidAny
              },
              path: S.Path.empty
            });
      }));

Ava("Successfully serializes", (function (t) {
        var schema = S.$$float;
        t.deepEqual(S.reverseConvertOrThrow(123, schema), any, undefined);
      }));

Ava("Compiled parse code snapshot", (function (t) {
        var schema = S.$$float;
        U.assertCompiledCode(t, schema, "Parse", "i=>{if(typeof i!==\"number\"||Number.isNaN(i)){e[0](i)}return i}", undefined);
      }));

Ava("Compiled serialize code snapshot", (function (t) {
        var schema = S.$$float;
        U.assertCompiledCodeIsNoop(t, schema, "ReverseConvert", undefined);
      }));

Ava("Reverse schema to S.float", (function (t) {
        var schema = S.$$float;
        t.is(S.reverse(schema), schema, undefined);
      }));

Ava("Succesfully uses reversed schema for parsing back to initial value", (function (t) {
        var schema = S.$$float;
        U.assertReverseParsesBack(t, schema, 123.3);
      }));

var Common = {
  value: 123,
  any: any,
  invalidAny: invalidAny,
  factory: factory
};

Ava("Successfully parses number with a fractional part", (function (t) {
        t.deepEqual(S.parseOrThrow(123.123, S.$$float), 123.123, undefined);
      }));

Ava("Fails to parse NaN", (function (t) {
        U.assertThrows(t, (function () {
                return S.parseOrThrow(NaN, S.$$float);
              }), {
              operation: "Parse",
              code: {
                TAG: "InvalidType",
                expected: S.$$float,
                received: NaN
              },
              path: S.Path.empty
            });
      }));

export {
  Common ,
}
/*  Not a pure module */
