// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import * as U from "./U.res.mjs";
import Ava from "ava";

Ava("Correctly parses", (function (t) {
        var schema = S.nullish(S.bool);
        t.deepEqual(S.parseOrThrow(null, schema), null, undefined);
        t.deepEqual(S.parseOrThrow(undefined, schema), undefined, undefined);
        t.deepEqual(S.parseOrThrow(true, schema), true, undefined);
        U.assertThrows(t, (function () {
                return S.parseOrThrow("foo", schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "InvalidType",
                expected: schema,
                received: "foo"
              },
              path: S.Path.empty
            });
        U.assertCompiledCode(t, schema, "Parse", "i=>{if(!(typeof i===\"boolean\"||i===void 0||i===null)){e[0](i)}return i}", undefined);
      }));

Ava("Correctly parses transformed", (function (t) {
        var schema = S.nullish(S.to(S.bool, S.string));
        t.deepEqual(S.parseOrThrow(null, schema), null, undefined);
        t.deepEqual(S.parseOrThrow(undefined, schema), undefined, undefined);
        t.deepEqual(S.parseOrThrow(true, schema), "true", undefined);
        U.assertCompiledCode(t, schema, "Parse", "i=>{if(typeof i===\"boolean\"){i=\"\"+i}else if(!(i===void 0||i===null)){e[1](i)}return i}", undefined);
      }));

Ava("Correctly reverse convert", (function (t) {
        var schema = S.nullish(S.bool);
        t.deepEqual(S.reverseConvertOrThrow(null, schema), null, undefined);
        t.deepEqual(S.reverseConvertOrThrow(undefined, schema), undefined, undefined);
        t.deepEqual(S.reverseConvertOrThrow(true, schema), true, undefined);
        U.assertCompiledCodeIsNoop(t, schema, "ReverseConvert", undefined);
      }));

Ava("Correctly reverse convert transformed", (function (t) {
        var schema = S.nullish(S.to(S.bool, S.string));
        t.deepEqual(S.reverseConvertOrThrow(null, schema), null, undefined);
        t.deepEqual(S.reverseConvertOrThrow(undefined, schema), undefined, undefined);
        t.deepEqual(S.reverseConvertOrThrow("true", schema), true, undefined);
        U.assertCompiledCode(t, schema, "ReverseConvert", "i=>{if(typeof i===\"string\"){let v0;(v0=i===\"true\")||i===\"false\"||e[0](i);i=v0}return i}", undefined);
      }));

export {
  
}
/*  Not a pure module */
