// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import * as U from "./U.res.mjs";
import Ava from "ava";

Ava("Successfully parses valid data", (function (t) {
        var schema = S.length(S.string, 1, undefined);
        t.deepEqual(S.parseOrThrow("1", schema), "1", undefined);
      }));

Ava("Fails to parse invalid data", (function (t) {
        var schema = S.length(S.string, 1, undefined);
        U.assertThrows(t, (function () {
                return S.parseOrThrow("", schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "OperationFailed",
                _0: "String must be exactly 1 characters long"
              },
              path: S.Path.empty
            });
        U.assertThrows(t, (function () {
                return S.parseOrThrow("1234", schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "OperationFailed",
                _0: "String must be exactly 1 characters long"
              },
              path: S.Path.empty
            });
      }));

Ava("Successfully serializes valid value", (function (t) {
        var schema = S.length(S.string, 1, undefined);
        t.deepEqual(S.reverseConvertOrThrow("1", schema), "1", undefined);
      }));

Ava("Fails to serialize invalid value", (function (t) {
        var schema = S.length(S.string, 1, undefined);
        U.assertThrows(t, (function () {
                return S.reverseConvertOrThrow("", schema);
              }), {
              operation: "ReverseConvert",
              code: {
                TAG: "OperationFailed",
                _0: "String must be exactly 1 characters long"
              },
              path: S.Path.empty
            });
        U.assertThrows(t, (function () {
                return S.reverseConvertOrThrow("1234", schema);
              }), {
              operation: "ReverseConvert",
              code: {
                TAG: "OperationFailed",
                _0: "String must be exactly 1 characters long"
              },
              path: S.Path.empty
            });
      }));

Ava("Returns custom error message", (function (t) {
        var schema = S.length(S.string, 12, "Custom");
        U.assertThrows(t, (function () {
                return S.parseOrThrow("123", schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "OperationFailed",
                _0: "Custom"
              },
              path: S.Path.empty
            });
      }));

Ava("Returns refinement", (function (t) {
        var schema = S.length(S.string, 4, undefined);
        t.deepEqual(S.$$String.refinements(schema), [{
                kind: {
                  TAG: "Length",
                  length: 4
                },
                message: "String must be exactly 4 characters long"
              }], undefined);
      }));

export {
  
}
/*  Not a pure module */
