// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import * as U from "./U.res.mjs";
import Ava from "ava";

Ava("Successfully parses valid data", (function (t) {
        var schema = S.pattern(S.string, /[0-9]/, undefined);
        t.deepEqual(S.parseOrThrow("123", schema), "123", undefined);
      }));

Ava("Fails to parse invalid data", (function (t) {
        var schema = S.pattern(S.string, /[0-9]/, undefined);
        U.assertThrows(t, (function () {
                return S.parseOrThrow("abc", schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "OperationFailed",
                _0: "Invalid"
              },
              path: S.Path.empty
            });
      }));

Ava("Successfully serializes valid value", (function (t) {
        var schema = S.pattern(S.string, /[0-9]/, undefined);
        t.deepEqual(S.reverseConvertOrThrow("123", schema), "123", undefined);
      }));

Ava("Fails to serialize invalid value", (function (t) {
        var schema = S.pattern(S.string, /[0-9]/, undefined);
        U.assertThrows(t, (function () {
                return S.reverseConvertOrThrow("abc", schema);
              }), {
              operation: "ReverseConvert",
              code: {
                TAG: "OperationFailed",
                _0: "Invalid"
              },
              path: S.Path.empty
            });
      }));

Ava("Returns custom error message", (function (t) {
        var schema = S.pattern(S.string, /[0-9]/, "Custom");
        U.assertThrows(t, (function () {
                return S.parseOrThrow("abc", schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "OperationFailed",
                _0: "Custom"
              },
              path: S.Path.empty
            });
      }));

Ava("Returns refinement", (function (t) {
        var schema = S.pattern(S.string, /[0-9]/, undefined);
        t.deepEqual(S.$$String.refinements(schema), [{
                kind: {
                  TAG: "Pattern",
                  re: /[0-9]/
                },
                message: "Invalid"
              }], undefined);
      }));

Ava("Returns multiple refinement", (function (t) {
        var schema2 = S.pattern(S.string, /[0-9]+/, "Should have digit");
        var schema3 = S.pattern(schema2, /\w+/, "Should have text");
        t.deepEqual(S.$$String.refinements(S.string), [], undefined);
        t.deepEqual(S.$$String.refinements(schema2), [{
                kind: {
                  TAG: "Pattern",
                  re: /[0-9]+/
                },
                message: "Should have digit"
              }], undefined);
        t.deepEqual(S.$$String.refinements(schema3), [
              {
                kind: {
                  TAG: "Pattern",
                  re: /[0-9]+/
                },
                message: "Should have digit"
              },
              {
                kind: {
                  TAG: "Pattern",
                  re: /\w+/
                },
                message: "Should have text"
              }
            ], undefined);
      }));

export {
  
}
/*  Not a pure module */
