// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import * as U from "./U.res.mjs";
import Ava from "ava";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

Ava("Raised error is instance of S.Error and displayed with a nice error message when not caught", (function (t) {
        t.throws((function () {
                return U.raiseError(S.ErrorClass.constructor({
                                TAG: "OperationFailed",
                                _0: "Should be positive"
                              }, S.Flag.typeValidation, S.Path.empty));
              }), {
              message: "Failed parsing: Should be positive",
              instanceOf: Caml_option.some(S.ErrorClass.value)
            }, undefined);
      }));

Ava("Raised error is also the S.Error exeption and can be caught with catch", (function (t) {
        var error = S.ErrorClass.constructor({
              TAG: "OperationFailed",
              _0: "Should be positive"
            }, S.Flag.typeValidation, S.Path.empty);
        t.plan(1);
        try {
          U.raiseError(error);
          return t.fail("Should raise before the line");
        }
        catch (raw_raisedError){
          var raisedError = Caml_js_exceptions.internalToOCamlException(raw_raisedError);
          if (raisedError.RE_EXN_ID === S.$$Error) {
            t.is(error, raisedError._1, undefined);
            return ;
          }
          throw raisedError;
        }
      }));

export {
  
}
/*  Not a pure module */
