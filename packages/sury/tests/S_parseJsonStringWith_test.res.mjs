// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import * as U from "./U.res.mjs";
import Ava from "ava";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

Ava("Successfully parses", (function (t) {
        t.deepEqual(S.parseJsonStringOrThrow("true", S.bool), true, undefined);
      }));

Ava("Successfully parses unknown", (function (t) {
        t.deepEqual(S.parseJsonStringOrThrow("true", S.unknown), true, undefined);
      }));

Ava("Fails to parse JSON", (function (t) {
        var val;
        try {
          val = S.parseJsonStringOrThrow("123,", S.bool);
        }
        catch (raw_exn){
          var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
          if (exn.RE_EXN_ID === S.$$Error) {
            var match = exn._1;
            var code = match.code;
            t.deepEqual(match.flag, S.Flag.typeValidation, undefined);
            t.deepEqual(match.path, S.Path.empty, undefined);
            if (typeof code !== "object") {
              return t.fail("Code must be OperationFailed");
            }
            if (code.TAG !== "OperationFailed") {
              return t.fail("Code must be OperationFailed");
            }
            switch (code._0) {
              case "Unexpected non-whitespace character after JSON at position 3" :
              case "Unexpected non-whitespace character after JSON at position 3 (line 1 column 4)" :
              case "Unexpected token , in JSON at position 3" :
                  return ;
              default:
                return t.fail("Code must be OperationFailed");
            }
          } else {
            throw exn;
          }
        }
        t.fail("Must return Error");
      }));

Ava("Fails to parse", (function (t) {
        U.assertThrows(t, (function () {
                return S.parseJsonStringOrThrow("123", S.bool);
              }), {
              operation: "Parse",
              code: {
                TAG: "InvalidType",
                expected: S.bool,
                received: 123
              },
              path: S.Path.empty
            });
      }));

export {
  
}
/*  Not a pure module */
