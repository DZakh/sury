// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import Ava from "ava";
import * as Caml_option from "rescript/lib/es6/caml_option.js";

function roundTrip(schema) {
  return S.fromJSONSchema(S.toJSONSchema(schema));
}

function jsonRoundTrip(js) {
  return S.toJSONSchema(S.fromJSONSchema(js));
}

function parse(schema, value) {
  return S.parseOrThrow(value, schema);
}

function eq(a, b) {
  return JSON.stringify(a) === JSON.stringify(b);
}

Ava("fromJSONSchema: string", (function (t) {
        var js_type = "string";
        var js = {
          type: js_type
        };
        var schema = S.fromJSONSchema(js);
        t.deepEqual(S.parseOrThrow("foo", schema), "foo", undefined);
        t.throws((function () {
                return S.parseOrThrow(123, schema);
              }), undefined, undefined);
        t.deepEqual(jsonRoundTrip(js), js, undefined);
      }));

Ava("fromJSONSchema: number", (function (t) {
        var js_type = "number";
        var js = {
          type: js_type
        };
        var schema = S.fromJSONSchema(js);
        t.deepEqual(S.parseOrThrow(1.5, schema), 1.5, undefined);
        t.throws((function () {
                return S.parseOrThrow("foo", schema);
              }), undefined, undefined);
        t.deepEqual(jsonRoundTrip(js), js, undefined);
      }));

Ava("fromJSONSchema: integer", (function (t) {
        var js_type = "integer";
        var js = {
          type: js_type
        };
        var schema = S.fromJSONSchema(js);
        t.deepEqual(S.parseOrThrow(42, schema), 42, undefined);
        t.throws((function () {
                return S.parseOrThrow(1.5, schema);
              }), undefined, undefined);
        t.deepEqual(jsonRoundTrip(js), js, undefined);
      }));

Ava("fromJSONSchema: boolean", (function (t) {
        var js_type = "boolean";
        var js = {
          type: js_type
        };
        var schema = S.fromJSONSchema(js);
        t.deepEqual(S.parseOrThrow(true, schema), true, undefined);
        t.throws((function () {
                return S.parseOrThrow(0, schema);
              }), undefined, undefined);
        t.deepEqual(jsonRoundTrip(js), js, undefined);
      }));

Ava("fromJSONSchema: null", (function (t) {
        var js_type = "null";
        var js = {
          type: js_type
        };
        var schema = S.fromJSONSchema(js);
        t.deepEqual(S.parseOrThrow(null, schema), null, undefined);
        t.throws((function () {
                return S.parseOrThrow(0, schema);
              }), undefined, undefined);
        t.deepEqual(jsonRoundTrip(js), js, undefined);
      }));

Ava("fromJSONSchema: const", (function (t) {
        var js_const = "foo";
        var js = {
          const: js_const
        };
        var schema = S.fromJSONSchema(js);
        t.deepEqual(S.parseOrThrow("foo", schema), "foo", undefined);
        t.throws((function () {
                return S.parseOrThrow("bar", schema);
              }), undefined, undefined);
        t.deepEqual(jsonRoundTrip(js), js, undefined);
      }));

Ava("fromJSONSchema: enum", (function (t) {
        var js_enum = [
          "a",
          "b",
          "c"
        ];
        var js = {
          enum: js_enum
        };
        var schema = S.fromJSONSchema(js);
        t.deepEqual(S.parseOrThrow("a", schema), "a", undefined);
        t.throws((function () {
                return S.parseOrThrow("z", schema);
              }), undefined, undefined);
        t.deepEqual(jsonRoundTrip(js), js, undefined);
      }));

Ava("fromJSONSchema: array of string", (function (t) {
        var js_type = "array";
        var js_items = {
          type: "string"
        };
        var js = {
          type: js_type,
          items: js_items
        };
        var schema = S.fromJSONSchema(js);
        t.deepEqual(S.parseOrThrow([
                  "a",
                  "b"
                ], schema), [
              "a",
              "b"
            ], undefined);
        t.throws((function () {
                return S.parseOrThrow([
                            1,
                            2
                          ], schema);
              }), undefined, undefined);
        t.deepEqual(jsonRoundTrip(js), js, undefined);
      }));

Ava("fromJSONSchema: array with minItems/maxItems", (function (t) {
        var js_type = "array";
        var js_items = {
          type: "number"
        };
        var js_maxItems = 3;
        var js_minItems = 2;
        var js = {
          type: js_type,
          items: js_items,
          maxItems: js_maxItems,
          minItems: js_minItems
        };
        var schema = S.fromJSONSchema(js);
        t.deepEqual(S.parseOrThrow([
                  1,
                  2
                ], schema), [
              1,
              2
            ], undefined);
        t.throws((function () {
                return S.parseOrThrow([1], schema);
              }), undefined, undefined);
        t.throws((function () {
                return S.parseOrThrow([
                            1,
                            2,
                            3,
                            4
                          ], schema);
              }), undefined, undefined);
        t.deepEqual(jsonRoundTrip(js), js, undefined);
      }));

Ava("fromJSONSchema: tuple", (function (t) {
        var js_type = "array";
        var js_items = [
          {
            type: "string"
          },
          {
            type: "number"
          }
        ];
        var js_maxItems = 2;
        var js_minItems = 2;
        var js = {
          type: js_type,
          items: js_items,
          maxItems: js_maxItems,
          minItems: js_minItems
        };
        var schema = S.fromJSONSchema(js);
        t.deepEqual(S.parseOrThrow([
                  "a",
                  1
                ], schema), [
              "a",
              1
            ], undefined);
        t.throws((function () {
                return S.parseOrThrow([
                            1,
                            "a"
                          ], schema);
              }), undefined, undefined);
        t.deepEqual(jsonRoundTrip(js), js, undefined);
      }));

Ava("fromJSONSchema: object with properties", (function (t) {
        var js_type = "object";
        var js_required = ["foo"];
        var js_properties = Object.fromEntries([
              [
                "foo",
                {
                  type: "string"
                }
              ],
              [
                "bar",
                {
                  type: "number"
                }
              ]
            ]);
        var js = {
          type: js_type,
          required: js_required,
          properties: js_properties
        };
        var schema = S.fromJSONSchema(js);
        t.deepEqual(S.parseOrThrow({
                  foo: "hi",
                  bar: 1
                }, schema), {
              foo: "hi",
              bar: 1
            }, undefined);
        t.throws((function () {
                return S.parseOrThrow({
                            bar: 1
                          }, schema);
              }), undefined, undefined);
        t.deepEqual(jsonRoundTrip(js), js, undefined);
      }));

Ava("fromJSONSchema: object with additionalProperties false", (function (t) {
        var js_type = "object";
        var js_properties = Object.fromEntries([[
                "foo",
                {
                  type: "string"
                }
              ]]);
        var js_additionalProperties = Caml_option.some(false);
        var js = {
          type: js_type,
          properties: js_properties,
          additionalProperties: js_additionalProperties
        };
        var schema = S.fromJSONSchema(js);
        t.deepEqual(S.parseOrThrow({
                  foo: "hi"
                }, schema), {
              foo: "hi"
            }, undefined);
        t.throws((function () {
                return S.parseOrThrow({
                            foo: "hi",
                            bar: 1
                          }, schema);
              }), undefined, undefined);
        t.deepEqual(jsonRoundTrip(js), js, undefined);
      }));

Ava("fromJSONSchema: object with additionalProperties true", (function (t) {
        var js_type = "object";
        var js_additionalProperties = Caml_option.some(true);
        var js = {
          type: js_type,
          additionalProperties: js_additionalProperties
        };
        var schema = S.fromJSONSchema(js);
        t.deepEqual(S.parseOrThrow({
                  foo: 1,
                  bar: 2
                }, schema), {
              foo: 1,
              bar: 2
            }, undefined);
        t.deepEqual(jsonRoundTrip(js), js, undefined);
      }));

Ava("fromJSONSchema: anyOf", (function (t) {
        var js_anyOf = [
          {
            type: "string"
          },
          {
            type: "number"
          }
        ];
        var js = {
          anyOf: js_anyOf
        };
        var schema = S.fromJSONSchema(js);
        t.deepEqual(S.parseOrThrow("hi", schema), "hi", undefined);
        t.deepEqual(S.parseOrThrow(1, schema), 1, undefined);
        t.throws((function () {
                return S.parseOrThrow(true, schema);
              }), undefined, undefined);
        t.deepEqual(jsonRoundTrip(js), js, undefined);
      }));

Ava("fromJSONSchema: oneOf", (function (t) {
        var js_oneOf = [
          {
            type: "string"
          },
          {
            type: "number"
          }
        ];
        var js = {
          oneOf: js_oneOf
        };
        var schema = S.fromJSONSchema(js);
        t.deepEqual(S.parseOrThrow("hi", schema), "hi", undefined);
        t.deepEqual(S.parseOrThrow(1, schema), 1, undefined);
        t.throws((function () {
                return S.parseOrThrow(true, schema);
              }), undefined, undefined);
        t.deepEqual(jsonRoundTrip(js), js, undefined);
      }));

Ava("fromJSONSchema: allOf", (function (t) {
        var js_allOf = [
          {
            type: "number",
            minimum: 0
          },
          {
            type: "number",
            maximum: 10
          }
        ];
        var js = {
          allOf: js_allOf
        };
        var schema = S.fromJSONSchema(js);
        t.deepEqual(S.parseOrThrow(5, schema), 5, undefined);
        t.throws((function () {
                return S.parseOrThrow(20, schema);
              }), undefined, undefined);
        t.deepEqual(jsonRoundTrip(js), js, undefined);
      }));

Ava("fromJSONSchema: not", (function (t) {
        var js_not = {
          type: "string"
        };
        var js = {
          not: js_not
        };
        var schema = S.fromJSONSchema(js);
        t.deepEqual(S.parseOrThrow(1, schema), 1, undefined);
        t.throws((function () {
                return S.parseOrThrow("hi", schema);
              }), undefined, undefined);
        t.deepEqual(jsonRoundTrip(js), js, undefined);
      }));

Ava("fromJSONSchema: nullable true", (function (t) {
        var js_type = "string";
        var js_nullable = true;
        var js = {
          type: js_type,
          nullable: js_nullable
        };
        var schema = S.fromJSONSchema(js);
        t.deepEqual(S.parseOrThrow("hi", schema), "hi", undefined);
        t.deepEqual(S.parseOrThrow(null, schema), null, undefined);
        t.deepEqual(jsonRoundTrip(js), js, undefined);
      }));

Ava("fromJSONSchema: nullable false", (function (t) {
        var js_type = "string";
        var js_nullable = false;
        var js = {
          type: js_type,
          nullable: js_nullable
        };
        var schema = S.fromJSONSchema(js);
        t.deepEqual(S.parseOrThrow("hi", schema), "hi", undefined);
        t.throws((function () {
                return S.parseOrThrow(null, schema);
              }), undefined, undefined);
        t.deepEqual(jsonRoundTrip(js), js, undefined);
      }));

Ava("fromJSONSchema: string format email", (function (t) {
        var js_type = "string";
        var js_format = "email";
        var js = {
          type: js_type,
          format: js_format
        };
        var schema = S.fromJSONSchema(js);
        t.deepEqual(S.parseOrThrow("foo@bar.com", schema), "foo@bar.com", undefined);
        t.throws((function () {
                return S.parseOrThrow("not-an-email", schema);
              }), undefined, undefined);
        t.deepEqual(jsonRoundTrip(js), js, undefined);
      }));

Ava("fromJSONSchema: string format uuid", (function (t) {
        var js_type = "string";
        var js_format = "uuid";
        var js = {
          type: js_type,
          format: js_format
        };
        var schema = S.fromJSONSchema(js);
        t.deepEqual(S.parseOrThrow("123e4567-e89b-12d3-a456-426614174000", schema), "123e4567-e89b-12d3-a456-426614174000", undefined);
        t.throws((function () {
                return S.parseOrThrow("not-a-uuid", schema);
              }), undefined, undefined);
        t.deepEqual(jsonRoundTrip(js), js, undefined);
      }));

Ava("fromJSONSchema: string format date-time", (function (t) {
        var js_type = "string";
        var js_format = "date-time";
        var js = {
          type: js_type,
          format: js_format
        };
        var schema = S.fromJSONSchema(js);
        t.deepEqual(S.parseOrThrow("2020-01-01T00:00:00Z", schema), "2020-01-01T00:00:00Z", undefined);
        t.throws((function () {
                return S.parseOrThrow("not-a-date", schema);
              }), undefined, undefined);
        t.deepEqual(jsonRoundTrip(js), js, undefined);
      }));

Ava("fromJSONSchema: string pattern", (function (t) {
        var js_type = "string";
        var js_pattern = "^foo$";
        var js = {
          type: js_type,
          pattern: js_pattern
        };
        var schema = S.fromJSONSchema(js);
        t.deepEqual(S.parseOrThrow("foo", schema), "foo", undefined);
        t.throws((function () {
                return S.parseOrThrow("bar", schema);
              }), undefined, undefined);
        t.deepEqual(jsonRoundTrip(js), js, undefined);
      }));

Ava("fromJSONSchema: description, deprecated, examples", (function (t) {
        var js_type = "string";
        var js_description = "desc";
        var js_deprecated = true;
        var js_examples = [
          "a",
          "b"
        ];
        var js = {
          type: js_type,
          description: js_description,
          deprecated: js_deprecated,
          examples: js_examples
        };
        var schema = S.fromJSONSchema(js);
        t.deepEqual(schema.description, "desc", undefined);
        t.deepEqual(schema.deprecated, true, undefined);
        t.deepEqual(schema.examples, [
              "a",
              "b"
            ], undefined);
        t.deepEqual(jsonRoundTrip(js), js, undefined);
      }));

Ava("fromJSONSchema: empty schema is any", (function (t) {
        var js = {};
        var schema = S.fromJSONSchema(js);
        t.deepEqual(S.parseOrThrow("foo", schema), "foo", undefined);
        t.deepEqual(S.parseOrThrow(1, schema), 1, undefined);
        t.deepEqual(S.parseOrThrow(true, schema), true, undefined);
        t.deepEqual(jsonRoundTrip(js), js, undefined);
      }));

Ava("fromJSONSchema: unknown type is any", (function (t) {
        var js_type = "unknownType";
        var js = {
          type: js_type
        };
        var schema = S.fromJSONSchema(js);
        t.deepEqual(S.parseOrThrow("foo", schema), "foo", undefined);
        t.deepEqual(S.parseOrThrow(1, schema), 1, undefined);
        t.deepEqual(S.parseOrThrow(true, schema), true, undefined);
        t.deepEqual(jsonRoundTrip(js), js, undefined);
      }));

Ava("fromJSONSchema: round-trip for string schema", (function (t) {
        var round = roundTrip(S.string);
        t.deepEqual(S.parseOrThrow("foo", round), "foo", undefined);
        t.throws((function () {
                return S.parseOrThrow(1, round);
              }), undefined, undefined);
        t.deepEqual(S.toJSONSchema(round), S.toJSONSchema(S.string), undefined);
      }));

Ava("fromJSONSchema: round-trip for object schema", (function (t) {
        var orig = S.object(function (s) {
              return s.f("foo", S.string);
            });
        var round = roundTrip(orig);
        t.deepEqual(S.parseOrThrow({
                  foo: "bar"
                }, round), {
              foo: "bar"
            }, undefined);
        t.throws((function () {
                return S.parseOrThrow({
                            foo: 1
                          }, round);
              }), undefined, undefined);
        t.deepEqual(S.toJSONSchema(round), S.toJSONSchema(orig), undefined);
      }));

export {
  roundTrip ,
  jsonRoundTrip ,
  parse ,
  eq ,
}
/*  Not a pure module */
