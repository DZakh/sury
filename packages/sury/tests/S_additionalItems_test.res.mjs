// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "../src/S.res.mjs";
import * as U from "./U.res.mjs";
import Ava from "ava";

Ava("Successfully parses Object with unknown keys by default", (function (t) {
        var any = {key: "value", unknownKey: "value2"};
        var schema = S.object(function (s) {
              return s.f("key", S.string);
            });
        t.deepEqual(S.parseOrThrow(any, schema), "value", undefined);
      }));

Ava("Fails fast and shows only one excees key in the error message", (function (t) {
        var schema = S.strict(S.object(function (s) {
                  return {
                          key: s.f("key", S.string)
                        };
                }));
        U.assertThrows(t, (function () {
                return S.parseOrThrow({key: "value", unknownKey: "value2", unknownKey2: "value2"}, schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "ExcessField",
                _0: "unknownKey"
              },
              path: S.Path.empty
            });
      }));

Ava("Successfully parses Object with unknown keys when Strip strategy applyed", (function (t) {
        var any = {key: "value", unknownKey: "value2"};
        var schema = S.strip(S.object(function (s) {
                  return s.f("key", S.string);
                }));
        t.deepEqual(S.parseOrThrow(any, schema), "value", undefined);
      }));

Ava("Works correctly when the same unknown keys strategy applyed multiple times", (function (t) {
        var any = {key: "value", unknownKey: "value2"};
        var schema = S.strip(S.strip(S.strip(S.object(function (s) {
                          return s.f("key", S.string);
                        }))));
        t.deepEqual(S.parseOrThrow(any, schema), "value", undefined);
      }));

Ava("Doesn't raise an error when unknown keys strategy applyed to a non Object schema", (function (t) {
        t.notThrows((function () {
                S.strip(S.string);
              }), undefined);
        t.notThrows((function () {
                S.strict(S.string);
              }), undefined);
      }));

Ava("Can reset unknown keys strategy applying Strict strategy", (function (t) {
        var any = {key: "value", unknownKey: "value2"};
        var schema = S.strict(S.strip(S.object(function (s) {
                      return s.f("key", S.string);
                    })));
        U.assertThrows(t, (function () {
                return S.parseOrThrow(any, schema);
              }), {
              operation: "Parse",
              code: {
                TAG: "ExcessField",
                _0: "unknownKey"
              },
              path: S.Path.empty
            });
      }));

Ava("Ignores additional items override for S.array and S.dict", (function (t) {
        var schema = S.array(S.string);
        t.is(S.strict(schema), schema, undefined);
        var schema$1 = S.dict(S.string);
        t.is(S.strict(schema$1), schema$1, undefined);
        var schema$2 = S.strict(S.array(S.string));
        t.is(S.strip(schema$2), schema$2, undefined);
      }));

export {
  
}
/*  Not a pure module */
