// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "sury/src/S.res.mjs";
import * as U from "../utils/U.res.mjs";
import Ava from "ava";

S.enableJson();

Ava("String schema", t => U.assertEqualSchemas(t, S.string, S.string, undefined));

Ava("Int schema", t => U.assertEqualSchemas(t, S.int, S.int, undefined));

Ava("Float schema", t => U.assertEqualSchemas(t, S.float, S.float, undefined));

Ava("Bool schema", t => U.assertEqualSchemas(t, S.bool, S.bool, undefined));

Ava("Unit schema", t => U.assertEqualSchemas(t, S.unit, S.unit, undefined));

Ava("Unknown schema", t => U.assertEqualSchemas(t, S.unknown, S.unknown, undefined));

Ava("Never schema", t => U.assertEqualSchemas(t, S.never, S.never, undefined));

let myOptionOfStringSchema = S.option(S.string);

Ava("Option of string schema", t => U.assertEqualSchemas(t, myOptionOfStringSchema, S.option(S.string), undefined));

let myNullableOfStringSchema = S.nullable(S.string);

Ava("Nullable of string schema", t => U.assertEqualSchemas(t, myNullableOfStringSchema, S.nullable(S.string), undefined));

let myArrayOfStringSchema = S.array(S.string);

Ava("Array of string schema", t => U.assertEqualSchemas(t, myArrayOfStringSchema, S.array(S.string), undefined));

let myListOfStringSchema = S.list(S.string);

Ava("List of string schema", t => U.assertEqualSchemas(t, myListOfStringSchema, S.list(S.string), undefined));

let myDictOfStringSchema = S.dict(S.string);

Ava("Dict of string schema", t => U.assertEqualSchemas(t, myDictOfStringSchema, S.dict(S.string), undefined));

let myDictOfStringFromJsSchema = S.dict(S.string);

Ava("Dict of string schema from Js", t => U.assertEqualSchemas(t, myDictOfStringSchema, S.dict(S.string), undefined));

let myDictOfStringFromCoreSchema = S.dict(S.string);

Ava("Dict of string schema from Core", t => U.assertEqualSchemas(t, myDictOfStringFromCoreSchema, S.dict(S.string), undefined));

Ava("Json schema", t => U.assertEqualSchemas(t, S.json, S.json, undefined));

Ava("Json schema from Core", t => U.assertEqualSchemas(t, S.json, S.json, undefined));

let myTupleSchema = S.schema(s => [
  s.m(S.string),
  s.m(S.int)
]);

Ava("Tuple schema", t => U.assertEqualSchemas(t, myTupleSchema, S.tuple2(S.string, S.int), undefined));

let myBigTupleSchema = S.schema(s => [
  s.m(S.string),
  s.m(S.string),
  s.m(S.string),
  s.m(S.int),
  s.m(S.int),
  s.m(S.int),
  s.m(S.float),
  s.m(S.float),
  s.m(S.float),
  s.m(S.bool),
  s.m(S.bool),
  s.m(S.bool)
]);

Ava("Big tuple schema", t => U.assertEqualSchemas(t, myBigTupleSchema, S.schema(s => [
  s.m(S.string),
  s.m(S.string),
  s.m(S.string),
  s.m(S.int),
  s.m(S.int),
  s.m(S.int),
  s.m(S.float),
  s.m(S.float),
  s.m(S.float),
  s.m(S.bool),
  s.m(S.bool),
  s.m(S.bool)
]), undefined));

let myCustomStringSchema = S.email(S.string, undefined);

Ava("Custom string schema", t => U.assertEqualSchemas(t, myCustomStringSchema, S.email(S.string, undefined), undefined));

let myCustomLiteralStringSchema = S.email(S.literal("123"), undefined);

Ava("Custom litaral string schema", t => U.assertEqualSchemas(t, myCustomLiteralStringSchema, S.email(S.literal("123"), undefined), undefined));

let myCustomOptionalStringSchema = S.option(S.email(S.string, undefined));

Ava("Custom optional string schema", t => U.assertEqualSchemas(t, myCustomOptionalStringSchema, S.option(S.email(S.string, undefined)), undefined));

let myNullOfStringSchema = S.$$null(S.string);

Ava("Null of string schema", t => U.assertEqualSchemas(t, myNullOfStringSchema, S.$$null(S.string), undefined));

let myStringSchema = S.string;

let myIntSchema = S.int;

let myFloatSchema = S.float;

let myBoolSchema = S.bool;

let myUnitSchema = S.unit;

let myUnknownSchema = S.unknown;

let myNeverSchema = S.never;

let myJsonSchema = S.json;

let myJsonFromCoreSchema = S.json;

export {
  myStringSchema,
  myIntSchema,
  myFloatSchema,
  myBoolSchema,
  myUnitSchema,
  myUnknownSchema,
  myNeverSchema,
  myOptionOfStringSchema,
  myNullableOfStringSchema,
  myArrayOfStringSchema,
  myListOfStringSchema,
  myDictOfStringSchema,
  myDictOfStringFromJsSchema,
  myDictOfStringFromCoreSchema,
  myJsonSchema,
  myJsonFromCoreSchema,
  myTupleSchema,
  myBigTupleSchema,
  myCustomStringSchema,
  myCustomLiteralStringSchema,
  myCustomOptionalStringSchema,
  myNullOfStringSchema,
}
/*  Not a pure module */
