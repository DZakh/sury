// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "sury/src/S.res.mjs";
import * as U from "../utils/U.res.mjs";
import Ava from "ava";
import * as Primitive_option from "rescript/lib/es6/Primitive_option.js";

let simpleRecordSchema = S.schema(s => ({
  label: s.m(S.string),
  value: s.m(S.int)
}));

Ava("Simple record schema", t => {
  U.assertEqualSchemas(t, simpleRecordSchema, S.schema(s => ({
    label: s.m(S.string),
    value: s.m(S.int)
  })), undefined);
  t.deepEqual(S.parseOrThrow({label:"foo",value:1}, simpleRecordSchema), {
    label: "foo",
    value: 1
  });
});

let recordWithAliasSchema = S.schema(s => ({
  "aliased-label": s.m(S.string),
  value: s.m(S.int)
}));

Ava("Record schema with alias for field name", t => {
  U.assertEqualSchemas(t, recordWithAliasSchema, S.schema(s => ({
    "aliased-label": s.m(S.string),
    value: s.m(S.int)
  })), undefined);
  t.deepEqual(S.parseOrThrow({"aliased-label":"foo",value:1}, recordWithAliasSchema), {
    "aliased-label": "foo",
    value: 1
  });
});

let recordWithOptionalSchema = S.schema(s => ({
  label: s.m(S.option(S.string)),
  value: s.m(S.option(S.int))
}));

Ava("Record schema with optional fields", t => {
  U.assertEqualSchemas(t, recordWithOptionalSchema, S.schema(s => ({
    label: s.m(S.option(S.string)),
    value: s.m(S.option(S.int))
  })), undefined);
  t.deepEqual(S.parseOrThrow({"label":"foo",value:1}, recordWithOptionalSchema), {
    label: "foo",
    value: 1
  });
  t.deepEqual(S.parseOrThrow({}, recordWithOptionalSchema), {
    label: undefined,
    value: undefined
  });
});

let recordWithNullableFieldSchema = S.schema(s => ({
  subscription: s.m(S.option(S.$$null(S.string)))
}));

Ava("Record schema with nullable field", t => {
  U.assertEqualSchemas(t, recordWithNullableFieldSchema, S.schema(s => ({
    subscription: s.m(S.option(S.$$null(S.string)))
  })), undefined);
  t.deepEqual(S.parseOrThrow({}, recordWithNullableFieldSchema), {
    subscription: undefined
  });
  t.deepEqual(S.parseOrThrow({"subscription":null}, recordWithNullableFieldSchema), {
    subscription: Primitive_option.some(undefined)
  });
});

export {
  simpleRecordSchema,
  recordWithAliasSchema,
  recordWithOptionalSchema,
  recordWithNullableFieldSchema,
}
/* simpleRecordSchema Not a pure module */
