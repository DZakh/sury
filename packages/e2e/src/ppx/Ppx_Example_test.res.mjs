// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S from "sury/src/S.res.mjs";
import * as U from "../utils/U.res.mjs";
import Ava from "ava";

let ratingSchema = S.union([
  S.literal("G"),
  S.literal("PG"),
  S.literal("PG13"),
  S.literal("R")
]);

let filmSchema = S.schema(s => ({
  Id: s.m(S.float),
  Title: s.m(S.string),
  Tags: s.m(S.Option.getOr(S.option(S.array(S.string)), [])),
  Rating: s.m(ratingSchema),
  Age: s.m(S.meta(S.option(S.int), {
    description: "Use rating instead",
    deprecated: true
  }))
}));

Ava("Main example", t => U.assertEqualSchemas(t, filmSchema, S.schema(s => ({
  Id: s.m(S.float),
  Title: s.m(S.string),
  Tags: s.m(S.Option.getOr(S.option(S.array(S.string)), [])),
  Rating: s.m(S.union([
    S.literal("G"),
    S.literal("PG"),
    S.literal("PG13"),
    S.literal("R")
  ])),
  Age: s.m(S.meta(S.option(S.int), {
    description: "Use rating instead",
    deprecated: true
  }))
})), undefined));

let matchesSchema = S.url(S.string, undefined);

Ava("@s.matches", t => U.assertEqualSchemas(t, matchesSchema, S.url(S.string, undefined), undefined));

let defaultSchema = S.Option.getOr(S.option(S.string), "Unknown");

Ava("@s.default", t => U.assertEqualSchemas(t, defaultSchema, S.Option.getOr(S.option(S.string), "Unknown"), undefined));

let defaultWithSchema = S.Option.getOrWith(S.option(S.array(S.string)), () => []);

Ava("@s.defaultWith", t => U.assertEqualSchemas(t, defaultWithSchema, S.Option.getOrWith(S.option(S.array(S.string)), () => []), undefined));

let nullSchema = S.$$null(S.string);

Ava("@s.null", t => U.assertEqualSchemas(t, nullSchema, S.$$null(S.string), undefined));

let nullWithDefaultSchema = S.Option.getOr(S.$$null(S.string), "Unknown");

Ava("@s.null with @s.default", t => U.assertEqualSchemas(t, nullWithDefaultSchema, S.Option.getOr(S.$$null(S.string), "Unknown"), undefined));

let nullableSchema = S.nullableAsOption(S.string);

Ava("@s.nullable", t => U.assertEqualSchemas(t, nullableSchema, S.nullableAsOption(S.string), undefined));

let nullableWithDefaultSchema = S.Option.getOr(S.nullableAsOption(S.string), "Unknown");

Ava("@s.nullable with @s.default", t => U.assertEqualSchemas(t, nullableWithDefaultSchema, S.Option.getOr(S.nullableAsOption(S.string), "Unknown"), undefined));

let deprecatedSchema = S.meta(S.string, {
  description: "Will be removed in APIv2",
  deprecated: true
});

Ava("@s.deprecated", t => U.assertEqualSchemas(t, deprecatedSchema, S.meta(S.string, {
  description: "Will be removed in APIv2",
  deprecated: true
}), undefined));

let describeSchema = S.meta(S.string, {
  description: "A useful bit of text, if you know what to do with it."
});

Ava("@s.description", t => U.assertEqualSchemas(t, describeSchema, S.meta(S.string, {
  description: "A useful bit of text, if you know what to do with it."
}), undefined));

export {
  ratingSchema,
  filmSchema,
  matchesSchema,
  defaultSchema,
  defaultWithSchema,
  nullSchema,
  nullWithDefaultSchema,
  nullableSchema,
  nullableWithDefaultSchema,
  deprecatedSchema,
  describeSchema,
}
/* ratingSchema Not a pure module */
