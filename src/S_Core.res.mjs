// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";

var immutableEmpty = {};

var immutableEmpty$1 = [];

function fromString(string) {
  var _idx = 0;
  while(true) {
    var idx = _idx;
    var match = string[idx];
    if (match === undefined) {
      return "\"" + string + "\"";
    }
    if (match === "\"") {
      return JSON.stringify(string);
    }
    _idx = idx + 1 | 0;
    continue ;
  };
}

function toArray(path) {
  if (path === "") {
    return [];
  } else {
    return JSON.parse(path.split("\"][\"").join("\",\""));
  }
}

function fromLocation($$location) {
  return "[" + fromString($$location) + "]";
}

function fromArray(array) {
  var len = array.length;
  if (len !== 1) {
    if (len !== 0) {
      return "[" + array.map(fromString).join("][") + "]";
    } else {
      return "";
    }
  }
  var $$location = array[0];
  return "[" + fromString($$location) + "]";
}

function concat(path, concatedPath) {
  return path + concatedPath;
}

var vendor = "rescript-schema";

var symbol = Symbol(vendor);

var itemSymbol = Symbol("item");

var SchemaError = /* @__PURE__ */Caml_exceptions.create("S_Core.SchemaError");

var isLiteral = (s => "const" in s);

function isOptional(schema) {
  var match = schema.type;
  switch (match) {
    case "undefined" :
        return true;
    case "union" :
        return schema.has["undefined"];
    default:
      return false;
  }
}

var globalConfig = {
  r: 0,
  a: "strip",
  n: false
};

class E extends Error {
      constructor(code, flag, path) {
        super();
        this.flag = flag;
        this.code = code;
        this.path = path;
        this.s = symbol;
        this.RE_EXN_ID = SchemaError;
        this._1 = this;
        this.name = "SchemaError";
      }
      get message() {
        return message(this);
      }
      get reason() {
        return reason(this);
      }
    }
;

function getOrRethrow(exn) {
  if ((exn&&exn.s===symbol)) {
    return exn;
  }
  throw exn;
}

function has(acc, flag) {
  return (acc & flag) !== 0;
}

var copy = ((schema) => {
  let c = {}
  for (let k in schema) {
    if (k > "a") {
      c[k] = schema[k]
    }
  }
  return c
});

var mergeInPlace = ((target, schema) => {
  for (let k in schema) {
    if (k > "a") {
      target[k] = schema[k]
    }
  }
});

var resetOperationsCache = ((schema) => {
  for (let k in schema) {
    if (+k) {
      delete schema[k];
    }
  }
});

function stringify(unknown) {
  var typeOfValue = typeof unknown;
  if (typeOfValue === "number" || typeOfValue === "function" || typeOfValue === "boolean" || typeOfValue === "symbol") {
    return unknown.toString();
  }
  if (typeOfValue === "string") {
    return "\"" + unknown + "\"";
  }
  if (typeOfValue !== "object") {
    if (typeOfValue === "undefined") {
      return "undefined";
    } else {
      return unknown + "n";
    }
  }
  if (unknown === null) {
    return "null";
  }
  if (Array.isArray(unknown)) {
    var string = "[";
    for(var i = 0 ,i_finish = unknown.length; i < i_finish; ++i){
      if (i !== 0) {
        string = string + ", ";
      }
      string = string + stringify(unknown[i]);
    }
    return string + "]";
  }
  if (unknown.constructor !== Object) {
    return Object.prototype.toString.call(unknown);
  }
  var keys = Object.keys(unknown);
  var string$1 = "{";
  for(var i$1 = 0 ,i_finish$1 = keys.length; i$1 < i_finish$1; ++i$1){
    var key = keys[i$1];
    var value = unknown[key];
    if (i$1 !== 0) {
      string$1 = string$1 + ", ";
    }
    string$1 = string$1 + "\"" + key + "\": " + stringify(value);
  }
  return string$1 + "}";
}

function toExpression(schema) {
  var tag = schema.type;
  var $$const = schema.const;
  var name = schema.name;
  if (name !== undefined) {
    return name;
  }
  if ($$const !== undefined) {
    return stringify($$const);
  }
  var format = schema.format;
  var anyOf = schema.anyOf;
  if (anyOf !== undefined) {
    return anyOf.map(toExpression).join(" | ");
  }
  if (format !== undefined) {
    return format;
  }
  switch (tag) {
    case "nan" :
        return "NaN";
    case "array" :
        var additionalItems = schema.additionalItems;
        var items = schema.items;
        if (typeof additionalItems !== "object") {
          return "[" + items.map(function (item) {
                        return toExpression(item.schema);
                      }).join(", ") + "]";
        }
        var itemName = toExpression(additionalItems);
        return (
                additionalItems.type === "union" ? "(" + itemName + ")" : itemName
              ) + "[]";
    case "object" :
        var additionalItems$1 = schema.additionalItems;
        var items$1 = schema.items;
        if (items$1.length === 0) {
          if (typeof additionalItems$1 === "object") {
            return "{ [key: string]: " + toExpression(additionalItems$1) + "; }";
          } else {
            return "{}";
          }
        } else {
          return "{ " + items$1.map(function (item) {
                        return item.location + ": " + toExpression(item.schema) + ";";
                      }).join(" ") + " }";
        }
    default:
      return tag;
  }
}

var $$class = E;

function make(prim0, prim1, prim2) {
  return new E(prim0, prim1, prim2);
}

function raise(error) {
  throw error;
}

function reason(error, nestedLevelOpt) {
  var nestedLevel = nestedLevelOpt !== undefined ? nestedLevelOpt : 0;
  var reason$1 = error.code;
  if (typeof reason$1 !== "object") {
    return "Encountered unexpected async transform or refine. Use ParseAsync operation instead";
  }
  switch (reason$1.TAG) {
    case "OperationFailed" :
        return reason$1._0;
    case "InvalidOperation" :
        return reason$1.description;
    case "InvalidType" :
        return "Must be " + toExpression(reason$1.expected) + " (was " + stringify(reason$1.received) + ")";
    case "ExcessField" :
        return "Encountered disallowed excess key " + fromString(reason$1._0) + " on an object";
    case "InvalidUnion" :
        var lineBreak = "\n" + " ".repeat((nestedLevel << 1));
        var reasonsDict = {};
        reason$1._0.forEach(function (error) {
              var reason$2 = reason(error, nestedLevel + 1);
              var nonEmptyPath = error.path;
              var $$location = nonEmptyPath === "" ? "" : "Failed at " + nonEmptyPath + ". ";
              reasonsDict["- " + $$location + reason$2] = undefined;
            });
        var uniqueReasons = Object.keys(reasonsDict);
        return "Invalid union with following errors" + lineBreak + uniqueReasons.join(lineBreak);
    case "InvalidJsonSchema" :
        return "The '" + toExpression(reason$1._0) + "' schema cannot be converted to JSON";
    
  }
}

function reason$1(error) {
  return reason(error, undefined);
}

function message(error) {
  var op = error.flag;
  var text = "Failed ";
  if (op & 2) {
    text = text + "async ";
  }
  text = text + (
    op & 1 ? (
        op & 4 ? "asserting" : "parsing"
      ) : "converting"
  );
  if (op & 8) {
    text = text + " to JSON" + (
      op & 16 ? " string" : ""
    );
  }
  var nonEmptyPath = error.path;
  var pathText = nonEmptyPath === "" ? "root" : nonEmptyPath;
  return text + " at " + pathText + ". Reason: " + reason(error, undefined);
}

function embed(b, value) {
  var e = b.g.e;
  var l = e.length;
  e[l] = value;
  return "e[" + l + "]";
}

function inlineConst(b, schema) {
  var match = schema.type;
  switch (match) {
    case "string" :
        var $$const = schema.const;
        return fromString($$const);
    case "bigint" :
        var $$const$1 = schema.const;
        return $$const$1 + "n";
    case "symbol" :
    case "function" :
    case "instance" :
        break;
    default:
      return schema.const;
  }
  var $$const$2 = schema.const;
  return embed(b, $$const$2);
}

function secondAllocate(v) {
  var b = this;
  b.l = b.l + "," + v;
}

function initialAllocate(v) {
  var b = this;
  b.l = v;
  b.a = secondAllocate;
}

function rootScope(flag) {
  var $$global = {
    c: "",
    l: "",
    a: initialAllocate,
    v: -1,
    o: flag,
    e: []
  };
  $$global.g = $$global;
  return $$global;
}

function allocateScope(b) {
  ((delete b.a));
  var varsAllocation = b.l;
  if (varsAllocation === "") {
    return b.c;
  } else {
    return "let " + varsAllocation + ";" + b.c;
  }
}

function varWithoutAllocation($$global) {
  var newCounter = $$global.v + 1;
  $$global.v = newCounter;
  return "v" + newCounter;
}

function _var(_b) {
  return this.i;
}

function _notVar(b) {
  var val = this;
  var v = varWithoutAllocation(b.g);
  var i = val.i;
  if (i === "") {
    val.b.a(v);
  } else if (val.b.a !== (void 0)) {
    val.b.a(v + "=" + i);
  } else {
    b.c = b.c + (v + "=" + i + ";");
    b.g.a(v);
  }
  val.v = _var;
  val.i = v;
  return v;
}

function allocateVal(b) {
  var v = varWithoutAllocation(b.g);
  b.a(v);
  return {
          b: b,
          v: _var,
          i: v,
          a: false
        };
}

function objectJoin(inlinedLocation, value) {
  return inlinedLocation + ":" + value + ",";
}

function arrayJoin(_inlinedLocation, value) {
  return value + ",";
}

function make$1(b, isArray) {
  return {
          b: b,
          v: _notVar,
          i: "",
          a: false,
          j: isArray ? arrayJoin : objectJoin,
          c: 0,
          p: ""
        };
}

function add(objectVal, inlinedLocation, val) {
  objectVal[inlinedLocation] = val;
  if (val.a) {
    objectVal.p = objectVal.p + val.i + ",";
    objectVal.i = objectVal.i + objectVal.j(inlinedLocation, "a[" + (objectVal.c++) + "]");
  } else {
    objectVal.i = objectVal.i + objectVal.j(inlinedLocation, val.i);
  }
}

function merge(target, subObjectVal) {
  var inlinedLocations = Object.keys(subObjectVal);
  for(var idx = 7 ,idx_finish = inlinedLocations.length; idx < idx_finish; ++idx){
    var inlinedLocation = inlinedLocations[idx];
    add(target, inlinedLocation, subObjectVal[inlinedLocation]);
  }
}

function complete(objectVal, isArray) {
  objectVal.i = isArray ? "[" + objectVal.i + "]" : "{" + objectVal.i + "}";
  if (objectVal.c) {
    objectVal.a = true;
    objectVal.i = "Promise.all([" + objectVal.p + "]).then(a=>(" + objectVal.i + "))";
  }
  return objectVal;
}

function addKey(b, input, key, val) {
  return input.v(b) + "[" + key + "]=" + val.i;
}

function set(b, input, val) {
  if (input === val) {
    return "";
  }
  var inputVar = input.v(b);
  var match = input.a;
  if (match) {
    var match$1 = val.a;
    if (!match$1) {
      return inputVar + "=Promise.resolve(" + val.i + ")";
    }
    
  } else {
    var match$2 = val.a;
    if (match$2) {
      input.a = true;
      return inputVar + "=" + val.i;
    }
    
  }
  return inputVar + "=" + val.i;
}

function get(b, targetVal, inlinedLocation) {
  var val = targetVal[inlinedLocation];
  if (val !== undefined) {
    return val;
  } else {
    return {
            b: b,
            v: _notVar,
            i: targetVal.v(b) + ("[" + inlinedLocation + "]"),
            a: false
          };
  }
}

function setInlined(b, input, inlined) {
  return input.v(b) + "=" + inlined;
}

function map(inlinedFn, input) {
  return {
          b: input.b,
          v: _notVar,
          i: inlinedFn + "(" + input.i + ")",
          a: false
        };
}

function transform(b, input, operation) {
  if (!input.a) {
    return operation(b, input);
  }
  var bb = {
    c: "",
    l: "",
    a: initialAllocate,
    g: b.g
  };
  var operationInput = {
    b: b,
    v: _var,
    i: varWithoutAllocation(bb.g),
    a: false
  };
  var operationOutputVal = operation(bb, operationInput);
  var operationCode = allocateScope(bb);
  return {
          b: input.b,
          v: _notVar,
          i: input.i + ".then(" + operationInput.v(b) + "=>{" + operationCode + "return " + operationOutputVal.i + "})",
          a: true
        };
}

function raise$1(b, code, path) {
  throw new E(code, b.g.o, path);
}

function embedSyncOperation(b, input, fn) {
  if (input.a) {
    return {
            b: input.b,
            v: _notVar,
            i: input.i + ".then(" + embed(b, fn) + ")",
            a: true
          };
  } else {
    return map(embed(b, fn), input);
  }
}

function embedAsyncOperation(b, input, fn) {
  if (!(b.g.o & 2)) {
    raise$1(b, "UnexpectedAsync", "");
  }
  var val = embedSyncOperation(b, input, fn);
  val.a = true;
  return val;
}

function failWithArg(b, path, fn, arg) {
  return embed(b, (function (arg) {
                return raise$1(b, fn(arg), path);
              })) + "(" + arg + ")";
}

function fail(b, message, path) {
  return embed(b, (function () {
                return raise$1(b, {
                            TAG: "OperationFailed",
                            _0: message
                          }, path);
              })) + "()";
}

function effectCtx(b, selfSchema, path) {
  return {
          schema: selfSchema,
          fail: (function (message, customPathOpt) {
              var customPath = customPathOpt !== undefined ? customPathOpt : "";
              return raise$1(b, {
                          TAG: "OperationFailed",
                          _0: message
                        }, path + customPath);
            })
        };
}

function registerInvalidJson(b, selfSchema, path) {
  if (b.g.o & 8) {
    return raise$1(b, {
                TAG: "InvalidJsonSchema",
                _0: selfSchema
              }, path);
  }
  
}

function invalidOperation(b, path, description) {
  return raise$1(b, {
              TAG: "InvalidOperation",
              description: description
            }, path);
}

function withCatch(b, input, $$catch, appendSafe, fn) {
  var prevCode = b.c;
  b.c = "";
  var errorVar = varWithoutAllocation(b.g);
  var maybeResolveVal = $$catch(b, errorVar);
  var catchCode = "if(" + (errorVar + "&&" + errorVar + ".s===s") + "){" + b.c;
  b.c = "";
  var bb = {
    c: "",
    l: "",
    a: initialAllocate,
    g: b.g
  };
  var fnOutput = fn(bb);
  b.c = b.c + allocateScope(bb);
  var isNoop = fnOutput.i === input.i && b.c === "";
  if (appendSafe !== undefined) {
    appendSafe(b, fnOutput);
  }
  if (isNoop) {
    return fnOutput;
  }
  var isAsync = fnOutput.a;
  var output = input === fnOutput ? input : (
      appendSafe !== undefined ? fnOutput : ({
            b: b,
            v: _notVar,
            i: "",
            a: isAsync
          })
    );
  var catchCode$1 = maybeResolveVal !== undefined ? (function (catchLocation) {
        return catchCode + (
                catchLocation === 1 ? "return " + maybeResolveVal.i : set(b, output, maybeResolveVal)
              ) + ("}else{throw " + errorVar + "}");
      }) : (function (param) {
        return catchCode + "}throw " + errorVar;
      });
  b.c = prevCode + ("try{" + b.c + (
      isAsync ? setInlined(b, output, fnOutput.i + ".catch(" + errorVar + "=>{" + catchCode$1(1) + "})") : set(b, output, fnOutput)
    ) + "}catch(" + errorVar + "){" + catchCode$1(0) + "}");
  return output;
}

function withPathPrepend(b, input, path, maybeDynamicLocationVar, appendSafe, fn) {
  if (path === "" && maybeDynamicLocationVar === undefined) {
    return fn(b, input, path);
  }
  try {
    return withCatch(b, input, (function (b, errorVar) {
                  b.c = errorVar + ".path=" + fromString(path) + "+" + (
                    maybeDynamicLocationVar !== undefined ? "'[\"'+" + maybeDynamicLocationVar + "+'\"]'+" : ""
                  ) + errorVar + ".path";
                }), appendSafe, (function (b) {
                  return fn(b, input, "");
                }));
  }
  catch (exn){
    var error = getOrRethrow(exn);
    throw new E(error.code, error.flag, path + "[]" + error.path);
  }
}

function validation(b, inputVar, schema, negative) {
  var eq = negative ? "!==" : "===";
  var and_ = negative ? "||" : "&&";
  var exp = negative ? "!" : "";
  var tag = schema.type;
  switch (tag) {
    case "undefined" :
        return inputVar + eq + "void 0";
    case "nan" :
        return exp + ("Number.isNaN(" + inputVar + ")");
    default:
      var match = schema.const;
      if (match !== undefined) {
        return inputVar + eq + inlineConst(b, schema);
      }
      switch (tag) {
        case "array" :
            return exp + "Array.isArray(" + inputVar + ")";
        case "object" :
            return "typeof " + inputVar + eq + "\"" + tag + "\"" + and_ + exp + inputVar;
        default:
          return "typeof " + inputVar + eq + "\"" + tag + "\"";
      }
  }
}

function refinement(b, inputVar, schema, negative) {
  var eq = negative ? "!==" : "===";
  var and_ = negative ? "||" : "&&";
  var not_ = negative ? "" : "!";
  var lt = negative ? ">" : "<";
  var gt = negative ? "<" : ">";
  var match = schema.type;
  var match$1 = schema.const;
  if (match$1 !== undefined) {
    return "";
  }
  if (schema.format !== undefined) {
    return and_ + inputVar + lt + "2147483647" + and_ + inputVar + gt + "-2147483648" + and_ + inputVar + "%1" + eq + "0";
  }
  switch (match) {
    case "number" :
        if (globalConfig.n) {
          return "";
        } else {
          return and_ + not_ + "Number.isNaN(" + inputVar + ")";
        }
    case "array" :
        var additionalItems = schema.additionalItems;
        var items = schema.items;
        var length = items.length;
        var code;
        code = additionalItems === "strip" || additionalItems === "strict" ? (
            additionalItems === "strip" ? and_ + inputVar + ".length" + gt + length : and_ + inputVar + ".length" + eq + length
          ) : "";
        for(var idx = 0; idx < length; ++idx){
          var match$2 = items[idx];
          var item = match$2.schema;
          if (isLiteral(item) && !item.catch || schema.unnest) {
            code = code + and_ + validation(b, inputVar + ("[" + match$2.inlinedLocation + "]"), item, negative);
          }
          
        }
        return code;
    case "object" :
        var additionalItems$1 = schema.additionalItems;
        var items$1 = schema.items;
        var code$1 = additionalItems$1 === "strip" ? "" : and_ + not_ + "Array.isArray(" + inputVar + ")";
        for(var idx$1 = 0 ,idx_finish = items$1.length; idx$1 < idx_finish; ++idx$1){
          var match$3 = items$1[idx$1];
          var schema$1 = match$3.schema;
          if (isLiteral(schema$1) && !schema$1.catch) {
            code$1 = code$1 + and_ + validation(b, inputVar + ("[" + match$3.inlinedLocation + "]"), schema$1, negative);
          }
          
        }
        return code$1;
    default:
      return "";
  }
}

function typeFilterCode(b, schema, input, path) {
  var match = schema.type;
  var match$1 = schema.noValidation;
  if (match$1 !== undefined && match$1) {
    return "";
  }
  switch (match) {
    case "never" :
    case "unknown" :
    case "union" :
    case "json" :
        return "";
    default:
      var inputVar = input.v(b);
      return "if(" + validation(b, inputVar, schema, true) + refinement(b, inputVar, schema, true) + "){" + failWithArg(b, path, (function (input) {
                    return {
                            TAG: "InvalidType",
                            expected: schema,
                            received: input
                          };
                  }), inputVar) + "}";
  }
}

function parseWithTypeValidation(b, schema, input, path) {
  if (b.g.o & 1 || isLiteral(schema)) {
    b.c = b.c + typeFilterCode(b, schema, input, path);
  }
  return schema.b(b, input, schema, path);
}

function noop(_b, input, param, param$1) {
  return input;
}

function invalidJson(b, input, selfSchema, path) {
  registerInvalidJson(b, selfSchema, path);
  return input;
}

function noopOperation(i) {
  return i;
}

function internalCompile(builder, schema, flag) {
  if (flag & 8 && isOptional(reverse(schema))) {
    throw new E({
              TAG: "InvalidJsonSchema",
              _0: schema
            }, flag, "");
  }
  var b = rootScope(flag);
  var input = {
    b: b,
    v: _var,
    i: "i",
    a: false
  };
  var output = builder(b, input, schema, "");
  schema.isAsync = output.a;
  if (b.l !== "") {
    b.c = "let " + b.l + ";" + b.c;
  }
  if (flag & 1 || isLiteral(schema)) {
    b.c = typeFilterCode(b, schema, input, "") + b.c;
  }
  if (b.c === "" && output === input && !(flag & 22)) {
    return noopOperation;
  }
  var inlinedOutput = flag & 4 ? "void 0" : output.i;
  if (flag & 16) {
    inlinedOutput = "JSON.stringify(" + inlinedOutput + ")";
  }
  if (flag & 2 && !output.a) {
    inlinedOutput = "Promise.resolve(" + inlinedOutput + ")";
  }
  var inlinedFunction = "i=>{" + b.c + "return " + inlinedOutput + "}";
  return new Function("e", "s", "return " + inlinedFunction)(b.g.e, symbol);
}

function operationFn(s, o) {
  if ((o in s)) {
    return (s[o]);
  }
  var ss = o & 32 ? reverse(s) : s;
  var f = internalCompile(ss.b, ss, o);
  ((s[o] = f));
  return f;
}

function reverse(schema) {
  var fn = schema.output;
  if (fn === undefined) {
    return schema;
  }
  if (typeof fn === "object") {
    return fn;
  }
  var reversed = fn.call(schema);
  var reversed$1 = reversed.output === undefined ? copy(reversed) : reversed;
  if (reversed$1["~standard"] === undefined) {
    toStandard(reversed$1);
  }
  schema.output = reversed$1;
  reversed$1.output = schema;
  return reversed$1;
}

function toStandard(schema) {
  schema["~standard"] = {
    version: 1,
    vendor: vendor,
    validate: (function (input) {
        try {
          return {
                  value: operationFn(schema, 1)(input)
                };
        }
        catch (exn){
          var error = getOrRethrow(exn);
          return {
                  issues: [{
                      message: message(error),
                      path: error.path === "" ? undefined : toArray(error.path)
                    }]
                };
        }
      })
  };
  return schema;
}

function compile(schema, input, output, mode, typeValidationOpt) {
  var typeValidation = typeValidationOpt !== undefined ? typeValidationOpt : true;
  var flag = 0;
  var exit = 0;
  switch (output) {
    case "Output" :
    case "Input" :
        exit = 1;
        break;
    case "Assert" :
        flag = flag | 4;
        break;
    case "Json" :
        flag = flag | 8;
        break;
    case "JsonString" :
        flag = flag | 24;
        break;
    
  }
  if (exit === 1 && output === input) {
    throw new Error("[" + vendor + "] Can't compile operation to converting value to self");
  }
  if (mode !== "Sync") {
    flag = flag | 2;
  }
  if (typeValidation) {
    flag = flag | 1;
  }
  if (input === "Output") {
    flag = flag | 32;
  }
  var fn = operationFn(schema, flag);
  if (input !== "JsonString") {
    return fn;
  }
  var flag$1 = flag;
  return function (jsonString) {
    try {
      return fn(JSON.parse(jsonString));
    }
    catch (exn){
      throw new E({
                TAG: "OperationFailed",
                _0: exn.message
              }, flag$1, "");
    }
  };
}

function item(factory, item$1) {
  return function () {
    var reversed = reverse(item$1);
    if (reversed === item$1) {
      return this;
    } else {
      return factory(reversed);
    }
  };
}

function parseOrThrow(any, schema) {
  return operationFn(schema, 1)(any);
}

function parseJsonStringOrThrow(jsonString, schema) {
  var tmp;
  try {
    tmp = JSON.parse(jsonString);
  }
  catch (exn){
    throw new E({
              TAG: "OperationFailed",
              _0: exn.message
            }, 1, "");
  }
  return parseOrThrow(tmp, schema);
}

function parseAsyncOrThrow(any, schema) {
  return operationFn(schema, 3)(any);
}

function convertOrThrow(input, schema) {
  return operationFn(schema, 0)(input);
}

function convertToJsonOrThrow(any, schema) {
  return operationFn(schema, 8)(any);
}

function convertToJsonStringOrThrow(input, schema) {
  return operationFn(schema, 24)(input);
}

function convertAsyncOrThrow(any, schema) {
  return operationFn(schema, 2)(any);
}

function reverseConvertOrThrow(value, schema) {
  return operationFn(schema, 32)(value);
}

function reverseConvertToJsonOrThrow(value, schema) {
  return operationFn(schema, 40)(value);
}

function reverseConvertToJsonStringOrThrow(value, schema, spaceOpt) {
  var space = spaceOpt !== undefined ? spaceOpt : 0;
  return JSON.stringify(reverseConvertToJsonOrThrow(value, schema), null, space);
}

function assertOrThrow(any, schema) {
  return operationFn(schema, 5)(any);
}

var $$undefined = {
  type: "undefined",
  b: invalidJson,
  const: (void 0)
};

var $$null = {
  type: "null",
  b: noop,
  const: null
};

var nan = {
  type: "nan",
  b: invalidJson
};

function jsonable(tag) {
  return {
          type: tag,
          b: noop
        };
}

function nonJsonable(tag) {
  return {
          type: tag,
          b: invalidJson
        };
}

function parse(value) {
  if (value === null) {
    return $$null;
  }
  var match = typeof value;
  var schema = match === "symbol" ? nonJsonable("symbol") : (
      match === "boolean" ? jsonable("boolean") : (
          match === "string" ? jsonable("string") : (
              match === "function" ? nonJsonable("function") : (
                  match === "object" ? nonJsonable("instance") : (
                      match === "undefined" ? $$undefined : (
                          match === "number" ? (
                              Number.isNaN(value) ? nan : jsonable("number")
                            ) : nonJsonable("bigint")
                        )
                    )
                )
            )
        )
    );
  schema.const = value;
  return schema;
}

function isAsync(schema) {
  var v = schema.isAsync;
  if (v !== undefined) {
    return v;
  }
  try {
    var b = rootScope(2);
    var input = {
      b: b,
      v: _var,
      i: "i",
      a: false
    };
    var output = schema.b(b, input, schema, "");
    schema.isAsync = output.a;
    return output.a;
  }
  catch (exn){
    getOrRethrow(exn);
    return false;
  }
}

function wrapExnToFailure(exn) {
  if ((exn&&exn.s===symbol)) {
    return {
            success: false,
            error: exn
          };
  }
  throw exn;
}

function js_safe(fn) {
  try {
    return {
            success: true,
            value: fn()
          };
  }
  catch (exn){
    return wrapExnToFailure(exn);
  }
}

function js_safeAsync(fn) {
  try {
    return fn().then((function (value) {
                  return {
                          success: true,
                          value: value
                        };
                }), wrapExnToFailure);
  }
  catch (exn){
    return Promise.resolve(wrapExnToFailure(exn));
  }
}

function make$2(namespace, name) {
  return "metadata:" + namespace + ":" + name;
}

var Id = {
  make: make$2
};

function get$1(schema, id) {
  return schema[id];
}

function set$1(schema, id, metadata) {
  var mut = copy(schema);
  mut[id] = metadata;
  return toStandard(mut);
}

function recursive(fn) {
  var r = "r" + globalConfig.r;
  globalConfig.r = globalConfig.r + 1 | 0;
  var builder = function (b, input, param, param$1) {
    return transform(b, input, (function (_b, input) {
                  return map(r, input);
                }));
  };
  var output = function () {
    return {
            type: "unknown",
            b: (function (_b, input, param, param$1) {
                return map(r, input);
              })
          };
  };
  var placeholder = {
    type: "unknown",
    b: builder,
    name: "Self",
    output: output
  };
  var schema = fn(placeholder);
  mergeInPlace(placeholder, schema);
  placeholder.name = toExpression(schema);
  placeholder.b = builder;
  placeholder.output = output;
  var initialParseOperationBuilder = schema.b;
  schema.b = (function (b, input, selfSchema, path) {
      var inputVar = input.v(b);
      var bb = {
        c: "",
        l: "",
        a: initialAllocate,
        g: b.g
      };
      var opOutput = initialParseOperationBuilder(bb, input, selfSchema, "");
      var opBodyCode = allocateScope(bb) + ("return " + opOutput.i);
      b.c = b.c + ("let " + r + "=" + inputVar + "=>{" + opBodyCode + "};");
      return withPathPrepend(b, input, path, undefined, undefined, (function (b, input, param) {
                    return transform(b, input, (function (_b, input) {
                                  var output = map(r, input);
                                  if (opOutput.a) {
                                    output.a = true;
                                    placeholder.b = (function (b, input, param, param$1) {
                                        return transform(b, input, (function (_b, input) {
                                                      var output = map(r, input);
                                                      output.a = true;
                                                      return output;
                                                    }));
                                      });
                                  }
                                  return output;
                                }));
                  }));
    });
  var initialReverse = schema.output.bind(schema);
  schema.output = (function () {
      var initialReversed = initialReverse();
      var mut = copy(initialReversed);
      mut.output = schema;
      schema.output = mut;
      mut.b = (function (b, input, selfSchema, path) {
          var inputVar = input.v(b);
          var bb = {
            c: "",
            l: "",
            a: initialAllocate,
            g: b.g
          };
          var initialInput = {
            b: bb,
            v: input.v,
            i: input.i,
            a: input.a
          };
          var opOutput = initialReversed.b(bb, initialInput, selfSchema, "");
          var opBodyCode = allocateScope(bb) + ("return " + opOutput.i);
          b.c = b.c + ("let " + r + "=" + inputVar + "=>{" + opBodyCode + "};");
          return withPathPrepend(b, input, path, undefined, undefined, (function (_b, input, param) {
                        return map(r, input);
                      }));
        });
      return mut;
    });
  return toStandard(schema);
}

function name(schema, name$1) {
  var mut = copy(schema);
  mut.name = name$1;
  return toStandard(mut);
}

function noValidation(schema, value) {
  var mut = copy(schema);
  mut.noValidation = value;
  return toStandard(mut);
}

function internalRefine(schema, refiner) {
  var mut = copy(schema);
  mut.b = (function (b, input, selfSchema, path) {
      return transform(b, schema.b(b, input, schema, path), (function (b, input) {
                    var bb = {
                      c: "",
                      l: "",
                      a: initialAllocate,
                      g: b.g
                    };
                    var rCode = refiner(bb, input.v(bb), selfSchema, path);
                    b.c = b.c + allocateScope(bb) + rCode;
                    return input;
                  }));
    });
  mut.output = (function () {
      var schema$1 = reverse(schema);
      var mut = copy(schema$1);
      mut.b = (function (b, input, selfSchema, path) {
          var input$1 = transform(b, input, (function (b, input) {
                  b.c = b.c + refiner(b, input.v(b), selfSchema, path);
                  return input;
                }));
          return schema$1.b(b, input$1, schema$1, path);
        });
      return mut;
    });
  return toStandard(mut);
}

function refine(schema, refiner) {
  return internalRefine(schema, (function (b, inputVar, selfSchema, path) {
                return embed(b, refiner(effectCtx(b, selfSchema, path))) + "(" + inputVar + ");";
              }));
}

function addRefinement(schema, metadataId, refinement, refiner) {
  var refinements = schema[metadataId];
  return internalRefine(set$1(schema, metadataId, refinements !== undefined ? refinements.concat(refinement) : [refinement]), refiner);
}

function transform$1(schema, transformer) {
  var mut = copy(schema);
  mut.b = (function (b, input, selfSchema, path) {
      var input$1 = schema.b(b, input, schema, path);
      var match = transformer(effectCtx(b, selfSchema, path));
      var parser = match.p;
      if (parser !== undefined) {
        if (match.a !== undefined) {
          return invalidOperation(b, path, "The S.transform doesn't allow parser and asyncParser at the same time. Remove parser in favor of asyncParser");
        } else {
          return embedSyncOperation(b, input$1, parser);
        }
      }
      var asyncParser = match.a;
      if (asyncParser !== undefined) {
        return embedAsyncOperation(b, input$1, asyncParser);
      } else if (match.s !== undefined) {
        return invalidOperation(b, path, "The S.transform parser is missing");
      } else {
        return input$1;
      }
    });
  mut.output = (function () {
      var schema$1 = reverse(schema);
      return {
              type: "unknown",
              b: (function (b, input, selfSchema, path) {
                  var match = transformer(effectCtx(b, selfSchema, path));
                  var serializer = match.s;
                  if (serializer === undefined) {
                    if (match.a !== undefined || match.p !== undefined) {
                      return invalidOperation(b, path, "The S.transform serializer is missing");
                    } else {
                      return schema$1.b(b, input, schema$1, path);
                    }
                  }
                  var input$1 = embedSyncOperation(b, input, serializer);
                  return schema$1.b(b, input$1, schema$1, path);
                })
            };
    });
  return toStandard(mut);
}

function custom(name, definer) {
  return toStandard({
              type: "unknown",
              b: (function (b, input, selfSchema, path) {
                  registerInvalidJson(b, selfSchema, path);
                  var match = definer(effectCtx(b, selfSchema, path));
                  var parser = match.p;
                  if (parser !== undefined) {
                    if (match.a !== undefined) {
                      return invalidOperation(b, path, "The S.custom doesn't allow parser and asyncParser at the same time. Remove parser in favor of asyncParser");
                    } else {
                      return embedSyncOperation(b, input, parser);
                    }
                  }
                  var asyncParser = match.a;
                  if (asyncParser !== undefined) {
                    return embedAsyncOperation(b, input, asyncParser);
                  } else if (match.s !== undefined) {
                    return invalidOperation(b, path, "The S.custom parser is missing");
                  } else {
                    return input;
                  }
                }),
              name: name,
              output: (function () {
                  return {
                          type: "unknown",
                          b: (function (b, input, selfSchema, path) {
                              registerInvalidJson(b, selfSchema, path);
                              var match = definer(effectCtx(b, selfSchema, path));
                              var serializer = match.s;
                              if (serializer !== undefined) {
                                return embedSyncOperation(b, input, serializer);
                              } else if (match.a !== undefined || match.p !== undefined) {
                                return invalidOperation(b, path, "The S.custom serializer is missing");
                              } else {
                                return input;
                              }
                            }),
                          name: name
                        };
                })
            });
}

var unit = toStandard($$undefined);

var unknown = toStandard({
      type: "unknown",
      b: invalidJson
    });

function builder(b, input, selfSchema, path) {
  b.c = b.c + failWithArg(b, path, (function (input) {
          return {
                  TAG: "InvalidType",
                  expected: selfSchema,
                  received: input
                };
        }), input.i) + ";";
  return input;
}

var schema = toStandard({
      type: "never",
      b: builder
    });

function getItemCode(b, schema, input, output, deopt, path) {
  try {
    var bb = {
      c: "",
      l: "",
      a: initialAllocate,
      g: b.g
    };
    if (deopt) {
      bb.c = bb.c + typeFilterCode(bb, schema, input, path);
    }
    var itemOutput = schema.b(bb, input, schema, path);
    if (itemOutput !== input) {
      itemOutput.b = bb;
      if (schema.type === "unknown") {
        var reversed = reverse(schema);
        bb.c = bb.c + typeFilterCode(bb, reversed, itemOutput, path);
      }
      if (itemOutput.a) {
        output.a = true;
      }
      bb.c = bb.c + (output.v(b) + "=" + itemOutput.i);
    }
    return allocateScope(bb);
  }
  catch (exn){
    return "throw " + embed(b, getOrRethrow(exn));
  }
}

function builder$1(b, input, selfSchema, path) {
  var schemas = selfSchema.anyOf;
  var typeValidation = b.g.o & 1;
  var initialInline = input.i;
  var deoptIdx = -1;
  var byTag = {};
  for(var idx = 0 ,idx_finish = schemas.length; idx < idx_finish; ++idx){
    var schema = schemas[idx];
    var tag = schema.type;
    var exit = 0;
    switch (tag) {
      case "never" :
      case "unknown" :
      case "union" :
      case "json" :
          exit = 1;
          break;
      default:
        var arr = byTag[tag];
        if (arr !== undefined) {
          arr.push(schema);
        } else {
          byTag[tag] = [schema];
        }
    }
    if (exit === 1) {
      deoptIdx = idx;
      byTag = {};
    }
    
  }
  var deoptIdx$1 = deoptIdx;
  var byTag$1 = byTag;
  var start = "";
  var end = "";
  var caught = "";
  if (deoptIdx$1 !== -1) {
    for(var idx$1 = 0; idx$1 <= deoptIdx$1; ++idx$1){
      var schema$1 = schemas[idx$1];
      var itemCode = getItemCode(b, schema$1, input, input, true, path);
      var errorVar = "e" + idx$1;
      start = start + ("try{" + itemCode + "}catch(" + errorVar + "){");
      end = "}" + end;
      caught = caught + errorVar + ",";
    }
  }
  var nextElse = false;
  var noop = "";
  var tags = Object.keys(byTag$1);
  for(var idx$2 = 0 ,idx_finish$1 = tags.length; idx$2 < idx_finish$1; ++idx$2){
    var tag$1 = tags[idx$2];
    var schemas$1 = byTag$1[tag$1];
    var inputVar = input.v(b);
    var isMultiple = schemas$1.length > 1;
    var firstSchema = schemas$1[0];
    var cond = "";
    var body;
    if (isMultiple) {
      var itemStart = "";
      var itemEnd = "";
      var itemNextElse = false;
      var itemNoop = "";
      var caught$1 = "";
      var itemIdx = 0;
      var lastIdx = schemas$1.length - 1 | 0;
      while(itemIdx <= lastIdx) {
        var schema$2 = schemas$1[itemIdx];
        var itemCond = (
          isLiteral(schema$2) ? validation(b, inputVar, schema$2, false) : ""
        ) + refinement(b, inputVar, schema$2, false).slice(2);
        var itemCode$1 = getItemCode(b, schema$2, input, input, false, path);
        if (itemCond && !itemCode$1) {
          itemNoop = itemNoop ? itemNoop + "||" + itemCond : itemCond;
        } else if (itemNoop) {
          var if_ = itemNextElse ? "else if" : "if";
          itemStart = itemStart + if_ + ("(!(" + itemNoop + ")){");
          itemEnd = "}" + itemEnd;
          itemNoop = "";
          itemNextElse = false;
        }
        if (itemCond) {
          if (itemCode$1) {
            var if_$1 = itemNextElse ? "else if" : "if";
            itemStart = itemStart + if_$1 + ("(" + itemCond + "){" + itemCode$1 + "}");
            itemNextElse = true;
          }
          
        } else if (itemCode$1) {
          itemNextElse = false;
          var errorVar$1 = "e" + itemIdx;
          itemStart = itemStart + ("try{" + itemCode$1 + "}catch(" + errorVar$1 + "){");
          itemEnd = "}" + itemEnd;
          caught$1 = caught$1 + errorVar$1 + ",";
        } else {
          itemIdx = lastIdx;
        }
        itemIdx = itemIdx + 1;
      };
      cond = validation(b, inputVar, {
            type: tag$1,
            b: 0
          }, false);
      if (itemNoop) {
        if (itemStart) {
          if (typeValidation) {
            var if_$2 = itemNextElse ? "else if" : "if";
            itemStart = itemStart + if_$2 + ("(!(" + itemNoop + ")){" + failWithArg(b, path, (function (received) {
                      return {
                              TAG: "InvalidType",
                              expected: selfSchema,
                              received: received
                            };
                    }), inputVar) + "}");
          }
          
        } else {
          cond = cond + ("&&(" + itemNoop + ")");
        }
      } else if (typeValidation) {
        var errorCode = failWithArg(b, path, (function (received) {
                return {
                        TAG: "InvalidType",
                        expected: selfSchema,
                        received: received
                      };
              }), inputVar);
        itemStart = itemStart + (
          itemNextElse ? "else{" + errorCode + "}" : errorCode
        );
      }
      body = itemStart + itemEnd;
    } else {
      cond = validation(b, inputVar, firstSchema, false) + refinement(b, inputVar, firstSchema, false);
      body = getItemCode(b, firstSchema, input, input, false, path);
    }
    var cond$1 = cond;
    if (body) {
      var if_$3 = nextElse ? "else if" : "if";
      start = start + if_$3 + ("(" + cond$1 + "){" + body + "}");
      nextElse = true;
    } else {
      noop = noop ? noop + "||" + cond$1 : cond$1;
    }
  }
  if (typeValidation) {
    var inputVar$1 = input.v(b);
    var errorCode$1 = failWithArg(b, path, (function (received) {
            return {
                    TAG: "InvalidType",
                    expected: selfSchema,
                    received: received
                  };
          }), inputVar$1);
    var tmp;
    if (noop) {
      var if_$4 = nextElse ? "else if" : "if";
      tmp = if_$4 + ("(!(" + noop + ")){" + errorCode$1 + "}");
    } else {
      tmp = nextElse ? "else{" + errorCode$1 + "}" : errorCode$1;
    }
    start = start + tmp;
  }
  b.c = b.c + start + end;
  if (input.a) {
    return {
            b: b,
            v: _notVar,
            i: "Promise.resolve(" + input.i + ")",
            a: true
          };
  } else if (input.v === _var) {
    if (b.c === "" && input.b.c === "" && (input.b.l === input.i + "=" + initialInline || initialInline === "i")) {
      input.b.l = "";
      input.b.a = initialAllocate;
      input.v = _notVar;
      input.i = initialInline;
      return input;
    } else {
      return {
              b: input.b,
              v: input.v,
              i: input.i,
              a: input.a
            };
    }
  } else {
    return input;
  }
}

function factory(schemas) {
  var len = schemas.length;
  if (len === 1) {
    return schemas[0];
  }
  if (len !== 0) {
    var has = {};
    for(var idx = 0 ,idx_finish = schemas.length; idx < idx_finish; ++idx){
      var schema = schemas[idx];
      var v = schema.type;
      var tmp;
      switch (v) {
        case "union" :
        case "json" :
            tmp = "unknown";
            break;
        default:
          tmp = v;
      }
      has[tmp] = true;
    }
    return toStandard({
                type: "union",
                b: builder$1,
                has: has,
                anyOf: schemas,
                output: output
              });
  }
  throw new Error("[" + vendor + "] S.union requires at least one item");
}

function output() {
  var schemas = this.anyOf;
  var items = [];
  var toSelf = true;
  for(var idx = 0 ,idx_finish = schemas.length; idx < idx_finish; ++idx){
    var schema = schemas[idx];
    var reversed = reverse(schema);
    items[idx] = reversed;
    toSelf = toSelf && schema === reversed;
  }
  if (toSelf) {
    return this;
  } else {
    return factory(items);
  }
}

var defaultMetadataId = "metadata:rescript-schema:Option.default";

function $$default(schema) {
  return schema[defaultMetadataId];
}

function factory$1(item) {
  var reversedItem = reverse(item);
  var schema = factory([
        item,
        unit
      ]);
  if (isOptional(reversedItem)) {
    schema.output = (function () {
        return factory([
                    reversedItem,
                    unit
                  ]);
      });
  }
  return schema;
}

function getWithDefault(schema, $$default) {
  var mut = copy(schema);
  mut[defaultMetadataId] = $$default;
  mut.b = (function (b, input, param, path) {
      return transform(b, schema.b(b, input, schema, path), (function (b, input) {
                    var inputVar = input.v(b);
                    var tmp;
                    tmp = $$default.TAG === "Value" ? embed(b, $$default._0) : embed(b, $$default._0) + "()";
                    return {
                            b: b,
                            v: _notVar,
                            i: inputVar + "===void 0?" + tmp + ":" + inputVar,
                            a: false
                          };
                  }));
    });
  mut.output = (function () {
      var reversed = reverse(schema);
      var anyOf = reversed.anyOf;
      if (anyOf !== undefined) {
        return factory(anyOf.filter(function (s) {
                        return !isOptional(s);
                      }));
      } else {
        return reversed;
      }
    });
  return toStandard(mut);
}

function getOr(schema, defalutValue) {
  return getWithDefault(schema, {
              TAG: "Value",
              _0: defalutValue
            });
}

function getOrWith(schema, defalutCb) {
  return getWithDefault(schema, {
              TAG: "Callback",
              _0: defalutCb
            });
}

var metadataId = "metadata:rescript-schema:Array.refinements";

function refinements(schema) {
  var m = schema[metadataId];
  if (m !== undefined) {
    return m;
  } else {
    return [];
  }
}

function factory$2(item$1) {
  return toStandard({
              type: "array",
              b: (function (b, input, param, path) {
                  var inputVar = input.v(b);
                  var iteratorVar = varWithoutAllocation(b.g);
                  var bb = {
                    c: "",
                    l: "",
                    a: initialAllocate,
                    g: b.g
                  };
                  var itemInput = {
                    b: bb,
                    v: _notVar,
                    i: inputVar + "[" + iteratorVar + "]",
                    a: false
                  };
                  var itemOutput = withPathPrepend(bb, itemInput, path, iteratorVar, undefined, (function (b, input, path) {
                          return parseWithTypeValidation(b, item$1, input, path);
                        }));
                  var itemCode = allocateScope(bb);
                  var isTransformed = itemInput !== itemOutput;
                  var output = isTransformed ? ({
                        b: b,
                        v: _notVar,
                        i: "new Array(" + inputVar + ".length)",
                        a: false
                      }) : input;
                  if (isTransformed || itemCode !== "") {
                    b.c = b.c + ("for(let " + iteratorVar + "=0;" + iteratorVar + "<" + inputVar + ".length;++" + iteratorVar + "){" + itemCode + (
                        isTransformed ? addKey(b, output, iteratorVar, itemOutput) : ""
                      ) + "}");
                  }
                  if (itemOutput.a) {
                    return {
                            b: output.b,
                            v: _notVar,
                            i: "Promise.all(" + output.i + ")",
                            a: true
                          };
                  } else {
                    return output;
                  }
                }),
              additionalItems: item$1,
              items: immutableEmpty$1,
              output: item(factory$2, item$1)
            });
}

function setAdditionalItems(schema, additionalItems, deep) {
  var currentAdditionalItems = schema.additionalItems;
  if (currentAdditionalItems === undefined) {
    return schema;
  }
  var items = schema.items;
  if (!(currentAdditionalItems !== additionalItems && typeof currentAdditionalItems !== "object")) {
    return schema;
  }
  var mut = copy(schema);
  mut.additionalItems = additionalItems;
  if (deep) {
    var newItems = [];
    var newFields = {};
    for(var idx = 0 ,idx_finish = items.length; idx < idx_finish; ++idx){
      var item = items[idx];
      var newSchema = setAdditionalItems(item.schema, additionalItems, deep);
      var newItem = newSchema === item.schema ? item : ({
            schema: newSchema,
            location: item.location,
            inlinedLocation: item.inlinedLocation
          });
      newFields[item.location] = newItem;
      newItems.push(newItem);
    }
    mut.items = newItems;
    mut.fields = newFields;
  }
  return toStandard(mut);
}

function strip(schema) {
  return setAdditionalItems(schema, "strip", false);
}

function deepStrip(schema) {
  return setAdditionalItems(schema, "strip", true);
}

function strict(schema) {
  return setAdditionalItems(schema, "strict", false);
}

function deepStrict(schema) {
  return setAdditionalItems(schema, "strict", true);
}

function factory$3(item$1) {
  return toStandard({
              type: "object",
              b: (function (b, input, param, path) {
                  var inputVar = input.v(b);
                  var keyVar = varWithoutAllocation(b.g);
                  var bb = {
                    c: "",
                    l: "",
                    a: initialAllocate,
                    g: b.g
                  };
                  var itemInput = {
                    b: bb,
                    v: _notVar,
                    i: inputVar + "[" + keyVar + "]",
                    a: false
                  };
                  var itemOutput = withPathPrepend(bb, itemInput, path, keyVar, undefined, (function (b, input, path) {
                          return parseWithTypeValidation(b, item$1, input, path);
                        }));
                  var itemCode = allocateScope(bb);
                  var isTransformed = itemInput !== itemOutput;
                  var output = isTransformed ? ({
                        b: b,
                        v: _notVar,
                        i: "{}",
                        a: false
                      }) : input;
                  if (isTransformed || itemCode !== "") {
                    b.c = b.c + ("for(let " + keyVar + " in " + inputVar + "){" + itemCode + (
                        isTransformed ? addKey(b, output, keyVar, itemOutput) : ""
                      ) + "}");
                  }
                  if (!itemOutput.a) {
                    return output;
                  }
                  var resolveVar = varWithoutAllocation(b.g);
                  var rejectVar = varWithoutAllocation(b.g);
                  var asyncParseResultVar = varWithoutAllocation(b.g);
                  var counterVar = varWithoutAllocation(b.g);
                  var outputVar = output.v(b);
                  return {
                          b: b,
                          v: _notVar,
                          i: "new Promise((" + resolveVar + "," + rejectVar + ")=>{let " + counterVar + "=Object.keys(" + outputVar + ").length;for(let " + keyVar + " in " + outputVar + "){" + outputVar + "[" + keyVar + "].then(" + asyncParseResultVar + "=>{" + outputVar + "[" + keyVar + "]=" + asyncParseResultVar + ";if(" + counterVar + "--===1){" + resolveVar + "(" + outputVar + ")}}," + rejectVar + ")}})",
                          a: true
                        };
                }),
              additionalItems: item$1,
              items: immutableEmpty$1,
              fields: immutableEmpty,
              output: item(factory$3, item$1)
            });
}

var Tuple = {};

var metadataId$1 = "metadata:rescript-schema:String.refinements";

function refinements$1(schema) {
  var m = schema[metadataId$1];
  if (m !== undefined) {
    return m;
  } else {
    return [];
  }
}

var cuidRegex = /^c[^\s-]{8,}$/i;

var uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;

var emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;

var datetimeRe = /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z$/;

var schema$1 = toStandard({
      type: "string",
      b: noop
    });

function factory$4(item, spaceOpt) {
  var space = spaceOpt !== undefined ? spaceOpt : 0;
  return toStandard({
              type: "string",
              b: (function (b, input, param, path) {
                  var jsonVal = allocateVal(b);
                  b.c = b.c + ("try{" + jsonVal.i + "=JSON.parse(" + input.i + ")}catch(t){" + failWithArg(b, path, (function (message) {
                            return {
                                    TAG: "OperationFailed",
                                    _0: message
                                  };
                          }), "t.message") + "}");
                  return parseWithTypeValidation(b, item, jsonVal, path);
                }),
              output: (function () {
                  var reversed = reverse(item);
                  var mut = copy(reversed);
                  mut.b = (function (b, input, param, path) {
                      var prevFlag = b.g.o;
                      b.g.o = prevFlag | 8;
                      if (isOptional(reversed)) {
                        raise$1(b, {
                              TAG: "InvalidJsonSchema",
                              _0: reversed
                            }, "");
                      }
                      var output = {
                        b: b,
                        v: _notVar,
                        i: "JSON.stringify(" + reversed.b(b, input, reversed, path).i + (
                          space > 0 ? ",null," + space : ""
                        ) + ")",
                        a: false
                      };
                      b.g.o = prevFlag;
                      return output;
                    });
                  return mut;
                })
            });
}

var schema$2 = toStandard({
      type: "boolean",
      b: noop
    });

var metadataId$2 = "metadata:rescript-schema:Int.refinements";

function refinements$2(schema) {
  var m = schema[metadataId$2];
  if (m !== undefined) {
    return m;
  } else {
    return [];
  }
}

var schema$3 = toStandard({
      type: "number",
      b: noop,
      format: "int32"
    });

var metadataId$3 = "metadata:rescript-schema:Float.refinements";

function refinements$3(schema) {
  var m = schema[metadataId$3];
  if (m !== undefined) {
    return m;
  } else {
    return [];
  }
}

var schema$4 = toStandard({
      type: "number",
      b: noop
    });

var schema$5 = toStandard({
      type: "bigint",
      b: invalidJson
    });

function coerce(from, to) {
  if (from === to) {
    return from;
  }
  var anyOf = to.anyOf;
  if (anyOf !== undefined) {
    return factory(anyOf.map(function (to) {
                    return coerce(from, to);
                  }));
  }
  var extendCoercion = 0;
  var shrinkCoercion = 1;
  var fromOutput = reverse(from);
  var isFromLiteral = isLiteral(from);
  var isToLiteral = isLiteral(to);
  var match = fromOutput.type;
  var coercion;
  var exit = 0;
  var exit$1 = 0;
  if (isFromLiteral && isToLiteral) {
    coercion = (function (b, param, param$1) {
        return {
                b: b,
                v: _notVar,
                i: inlineConst(b, to),
                a: false
              };
      });
  } else {
    switch (match) {
      case "string" :
          var match$1 = to.type;
          var exit$2 = 0;
          switch (match$1) {
            case "string" :
                var match$2 = to.const;
                coercion = match$2 !== undefined ? shrinkCoercion : extendCoercion;
                break;
            case "number" :
            case "bigint" :
            case "boolean" :
            case "null" :
            case "undefined" :
            case "nan" :
                exit$2 = 3;
                break;
            default:
              exit = 1;
          }
          if (exit$2 === 3) {
            var $$const = to.const;
            if (isToLiteral) {
              coercion = (function (b, inputVar, failCoercion) {
                  b.c = b.c + (inputVar + "===\"" + $$const + "\"||" + failCoercion + ";");
                  return {
                          b: b,
                          v: _notVar,
                          i: inlineConst(b, to),
                          a: false
                        };
                });
            } else {
              switch (match$1) {
                case "number" :
                    var format = to.format;
                    coercion = (function (b, inputVar, failCoercion) {
                        var output = {
                          b: b,
                          v: _notVar,
                          i: "+" + inputVar,
                          a: false
                        };
                        var outputVar = output.v(b);
                        b.c = b.c + (
                          format !== undefined ? "(" + refinement(b, outputVar, to, true).slice(2) + ")" : "Number.isNaN(" + outputVar + ")"
                        ) + ("&&" + failCoercion + ";");
                        return output;
                      });
                    break;
                case "bigint" :
                    coercion = (function (b, inputVar, failCoercion) {
                        var output = allocateVal(b);
                        b.c = b.c + ("try{" + output.i + "=BigInt(" + inputVar + ")}catch(_){" + failCoercion + "}");
                        return output;
                      });
                    break;
                case "boolean" :
                    coercion = (function (b, inputVar, failCoercion) {
                        var output = allocateVal(b);
                        b.c = b.c + ("(" + output.i + "=" + inputVar + "===\"true\")||" + inputVar + "===\"false\"||" + failCoercion + ";");
                        return output;
                      });
                    break;
                default:
                  exit = 1;
              }
            }
          }
          break;
      case "number" :
          if (fromOutput.format !== undefined) {
            var match$3 = to.type;
            if (match$3 === "number" && to.format === undefined) {
              coercion = extendCoercion;
            } else {
              exit$1 = 2;
            }
          } else {
            exit$1 = 2;
          }
          break;
      case "bigint" :
      case "boolean" :
      case "null" :
      case "undefined" :
      case "nan" :
          exit$1 = 2;
          break;
      default:
        exit = 1;
    }
  }
  if (exit$1 === 2) {
    var $$const$1 = fromOutput.const;
    var match$4 = to.type;
    if (match$4 === "string") {
      if (isFromLiteral) {
        coercion = (function (b, param, param$1) {
            return {
                    b: b,
                    v: _notVar,
                    i: "\"" + $$const$1 + "\"",
                    a: false
                  };
          });
      } else {
        var exit$3 = 0;
        switch (match) {
          case "number" :
          case "bigint" :
          case "boolean" :
              exit$3 = 3;
              break;
          default:
            exit = 1;
        }
        if (exit$3 === 3) {
          var match$5 = to.type;
          if (match$5 === "string") {
            coercion = (function (b, inputVar, param) {
                return {
                        b: b,
                        v: _notVar,
                        i: "\"\"+" + inputVar,
                        a: false
                      };
              });
          } else {
            exit = 1;
          }
        }
        
      }
    } else {
      exit = 1;
    }
  }
  if (exit === 1) {
    var message = "S.coerce from " + toExpression(fromOutput) + " to " + toExpression(to) + " is not supported";
    throw new Error("[" + vendor + "] " + message);
  }
  var mut = copy(from);
  mut.b = (function (b, input, param, path) {
      var input$1 = from.b(b, input, from, path);
      if (coercion === extendCoercion) {
        return to.b(b, input$1, to, path);
      }
      if (coercion === shrinkCoercion) {
        return parseWithTypeValidation(b, to, input$1, path);
      }
      var bb = {
        c: "",
        l: "",
        a: initialAllocate,
        g: b.g
      };
      var inputVar = input$1.v(bb);
      var input$2 = coercion(bb, inputVar, failWithArg(bb, path, (function (input) {
                  return {
                          TAG: "InvalidType",
                          expected: to,
                          received: input
                        };
                }), inputVar));
      var output = to.b(bb, input$2, to, path);
      b.c = b.c + allocateScope(bb);
      return output;
    });
  mut.output = (function () {
      return coerce(reverse(to), fromOutput);
    });
  return toStandard(mut);
}

function preprocess(schema, transformer) {
  var mut = copy(schema);
  var anyOf = schema.anyOf;
  if (anyOf !== undefined) {
    mut.anyOf = anyOf.map(function (unionSchema) {
          return preprocess(unionSchema, transformer);
        });
  } else {
    mut.b = (function (b, input, selfSchema, path) {
        var match = transformer(effectCtx(b, selfSchema, path));
        var parser = match.p;
        if (parser !== undefined) {
          if (match.a !== undefined) {
            return invalidOperation(b, path, "The S.preprocess doesn't allow parser and asyncParser at the same time. Remove parser in favor of asyncParser");
          } else {
            return parseWithTypeValidation(b, schema, embedSyncOperation(b, input, parser), path);
          }
        }
        var asyncParser = match.a;
        if (asyncParser !== undefined) {
          return transform(b, embedAsyncOperation(b, input, asyncParser), (function (b, input) {
                        return parseWithTypeValidation(b, schema, input, path);
                      }));
        } else {
          return parseWithTypeValidation(b, schema, input, path);
        }
      });
    mut.type = "unknown";
    mut.output = (function () {
        var reversed = reverse(schema);
        var mut = copy(reversed);
        mut.b = (function (b, input, param, path) {
            var input$1 = reversed.b(b, input, reversed, path);
            var match = transformer(effectCtx(b, schema, path));
            var serializer = match.s;
            if (serializer !== undefined) {
              return embedSyncOperation(b, input$1, serializer);
            } else {
              return input$1;
            }
          });
        return mut;
      });
  }
  return toStandard(mut);
}

function list(schema) {
  return transform$1(factory$2(schema), (function (param) {
                return {
                        p: Belt_List.fromArray,
                        s: Belt_List.toArray
                      };
              }));
}

function json(validate) {
  return toStandard({
              type: "json",
              b: validate ? (function (b, input, selfSchema, path) {
                    var parse = function (input, pathOpt) {
                      var path$1 = pathOpt !== undefined ? pathOpt : path;
                      var match = typeof input;
                      if (match === "string" || match === "boolean") {
                        return input;
                      }
                      if (match === "object") {
                        if (input === null) {
                          return input;
                        }
                        if (Array.isArray(input)) {
                          var output = [];
                          for(var idx = 0 ,idx_finish = input.length; idx < idx_finish; ++idx){
                            var inputItem = input[idx];
                            var $$location = idx.toString();
                            output.push(parse(inputItem, path$1 + ("[" + fromString($$location) + "]")));
                          }
                          return output;
                        }
                        var keys = Object.keys(input);
                        var output$1 = {};
                        for(var idx$1 = 0 ,idx_finish$1 = keys.length; idx$1 < idx_finish$1; ++idx$1){
                          var key = keys[idx$1];
                          var field = input[key];
                          output$1[key] = parse(field, path$1 + ("[" + fromString(key) + "]"));
                        }
                        return output$1;
                      }
                      if (match === "number" && !Number.isNaN(input)) {
                        return input;
                      }
                      return raise$1(b, {
                                  TAG: "InvalidType",
                                  expected: selfSchema,
                                  received: input
                                }, path$1);
                    };
                    return map(embed(b, parse), input);
                  }) : noop,
              output: (function () {
                  if (validate) {
                    return json(false);
                  } else {
                    return this;
                  }
                })
            });
}

var Catch = {};

function $$catch(schema, getFallbackValue) {
  var mut = copy(schema);
  mut.b = (function (b, input, selfSchema, path) {
      var inputVar = input.v(b);
      return withCatch(b, input, (function (b, errorVar) {
                    return {
                            b: b,
                            v: _notVar,
                            i: embed(b, (function (input, internalError) {
                                    return getFallbackValue({
                                                e: internalError,
                                                i: input,
                                                s: selfSchema,
                                                f: (function (message, customPathOpt) {
                                                    var customPath = customPathOpt !== undefined ? customPathOpt : "";
                                                    return raise$1(b, {
                                                                TAG: "OperationFailed",
                                                                _0: message
                                                              }, path + customPath);
                                                  })
                                              });
                                  })) + "(" + inputVar + "," + errorVar + ")",
                            a: false
                          };
                  }), undefined, (function (b) {
                    return parseWithTypeValidation(b, schema, input, path);
                  }));
    });
  mut.noValidation = true;
  mut.catch = true;
  return toStandard(mut);
}

function deprecated(schema, message) {
  var mut = copy(schema);
  mut.deprecated = message;
  return toStandard(mut);
}

function description(schema, description$1) {
  var mut = copy(schema);
  mut.description = description$1;
  return toStandard(mut);
}

function getFullDitemPath(ditem) {
  switch (ditem.k) {
    case 0 :
        return "[" + ditem.inlinedLocation + "]";
    case 1 :
        return getFullDitemPath(ditem.of) + ditem.p;
    case 2 :
        return ditem.p;
    
  }
}

function getItemReversed(item) {
  switch (item.k) {
    case 1 :
        var schema = item.schema;
        var $$location = item.location;
        if (schema !== undefined) {
          return reverse(schema);
        }
        var targetReversed = getItemReversed(item.of);
        var items = targetReversed.items;
        var fields = targetReversed.fields;
        var maybeReversedItem = fields !== undefined ? fields[$$location] : items[$$location];
        if (maybeReversedItem === undefined) {
          var message = "Impossible to reverse the " + item.inlinedLocation + " access of '" + toExpression(targetReversed) + "' schema";
          throw new Error("[" + vendor + "] " + message);
        }
        return maybeReversedItem.schema;
    case 0 :
    case 2 :
        return reverse(item.schema);
    
  }
}

function definitionToOutput(b, definition, getItemOutput) {
  if (!(typeof definition === "object" && definition !== null)) {
    return {
            b: b,
            v: _var,
            i: embed(b, definition),
            a: false
          };
  }
  var item = definition[itemSymbol];
  if (item !== undefined) {
    return getItemOutput(item);
  }
  var isArray = Array.isArray(definition);
  var keys = Object.keys(definition);
  var objectVal = make$1(b, isArray);
  for(var idx = 0 ,idx_finish = keys.length; idx < idx_finish; ++idx){
    var key = keys[idx];
    add(objectVal, isArray ? "\"" + key + "\"" : fromString(key), definitionToOutput(b, definition[key], getItemOutput));
  }
  return complete(objectVal, isArray);
}

function objectStrictModeCheck(b, input, items, selfSchema, path) {
  if (!(selfSchema.type === "object" && selfSchema.additionalItems === "strict" && b.g.o & 1)) {
    return ;
  }
  var key = allocateVal(b);
  var keyVar = key.i;
  b.c = b.c + ("for(" + keyVar + " in " + input.i + "){if(");
  if (items.length !== 0) {
    for(var idx = 0 ,idx_finish = items.length; idx < idx_finish; ++idx){
      var match = items[idx];
      if (idx !== 0) {
        b.c = b.c + "&&";
      }
      b.c = b.c + (keyVar + "!==" + match.inlinedLocation);
    }
  } else {
    b.c = b.c + "true";
  }
  b.c = b.c + ("){" + failWithArg(b, path, (function (exccessFieldName) {
            return {
                    TAG: "ExcessField",
                    _0: exccessFieldName
                  };
          }), keyVar) + "}}");
}

function proxify(item) {
  return new Proxy(immutableEmpty, {
              get: (function (param, prop) {
                  if (prop === itemSymbol) {
                    return item;
                  }
                  var inlinedLocation = fromString(prop);
                  return proxify({
                              k: 1,
                              inlinedLocation: inlinedLocation,
                              location: prop,
                              of: item,
                              p: "[" + inlinedLocation + "]"
                            });
                })
            });
}

function builder$2(parentB, input, selfSchema, path) {
  var additionalItems = selfSchema.additionalItems;
  var items = selfSchema.items;
  var isArray = selfSchema.type === "array";
  if (parentB.g.o & 64) {
    var objectVal = make$1(parentB, isArray);
    for(var idx = 0 ,idx_finish = items.length; idx < idx_finish; ++idx){
      var match = items[idx];
      var inlinedLocation = match.inlinedLocation;
      add(objectVal, inlinedLocation, input[inlinedLocation]);
    }
    return complete(objectVal, isArray);
  }
  var b = {
    c: "",
    l: "",
    a: initialAllocate,
    g: parentB.g
  };
  var objectVal$1 = make$1(b, isArray);
  for(var idx$1 = 0 ,idx_finish$1 = items.length; idx$1 < idx_finish$1; ++idx$1){
    var match$1 = items[idx$1];
    var inlinedLocation$1 = match$1.inlinedLocation;
    var schema = match$1.schema;
    var itemPath = "[" + inlinedLocation$1 + "]";
    var itemInput = get(b, input, inlinedLocation$1);
    var path$1 = path + itemPath;
    if (b.g.o & 1 ? !isLiteral(schema) : isLiteral(schema) && !(itemInput.v === _var && itemInput.i[0] === "e")) {
      b.c = b.c + typeFilterCode(b, schema, itemInput, path$1);
    }
    add(objectVal$1, inlinedLocation$1, schema.b(b, itemInput, schema, path$1));
  }
  objectStrictModeCheck(b, input, items, selfSchema, path);
  parentB.c = parentB.c + allocateScope(b);
  if ((additionalItems !== "strip" || b.g.o & 32) && selfSchema === reverse(selfSchema)) {
    objectVal$1.v = input.v;
    objectVal$1.i = input.i;
    objectVal$1.a = input.a;
    return objectVal$1;
  } else {
    return complete(objectVal$1, isArray);
  }
}

function definitionToSchema(definition) {
  if (!(typeof definition === "object" && definition !== null)) {
    return parse(definition);
  }
  if (definition["~standard"]) {
    return definition;
  }
  if (Array.isArray(definition)) {
    var reversedItems = [];
    var isTransformed = false;
    for(var idx = 0 ,idx_finish = definition.length; idx < idx_finish; ++idx){
      var schema = definitionToSchema(definition[idx]);
      var reversed = reverse(schema);
      var $$location = idx.toString();
      var inlinedLocation = "\"" + $$location + "\"";
      definition[idx] = {
        schema: schema,
        location: $$location,
        inlinedLocation: inlinedLocation
      };
      reversedItems[idx] = {
        schema: reversed,
        location: $$location,
        inlinedLocation: inlinedLocation
      };
      if (schema !== reversed) {
        isTransformed = true;
      }
      
    }
    return {
            type: "array",
            b: builder$2,
            additionalItems: "strict",
            items: definition,
            output: isTransformed ? (function () {
                  return {
                          type: "array",
                          b: builder$2,
                          additionalItems: "strict",
                          items: reversedItems
                        };
                }) : undefined
          };
  }
  var fieldNames = Object.keys(definition);
  var length = fieldNames.length;
  var items = [];
  for(var idx$1 = 0; idx$1 < length; ++idx$1){
    var $$location$1 = fieldNames[idx$1];
    var inlinedLocation$1 = fromString($$location$1);
    var schema$1 = definitionToSchema(definition[$$location$1]);
    var item = {
      schema: schema$1,
      location: $$location$1,
      inlinedLocation: inlinedLocation$1
    };
    definition[$$location$1] = item;
    items[idx$1] = item;
  }
  return {
          type: "object",
          b: builder$2,
          additionalItems: globalConfig.a,
          items: items,
          fields: definition,
          output: output$1
        };
}

function output$1() {
  var items = this.items;
  var reversedFields = {};
  var reversedItems = [];
  var isTransformed = false;
  for(var idx = 0 ,idx_finish = items.length; idx < idx_finish; ++idx){
    var match = items[idx];
    var $$location = match.location;
    var schema = match.schema;
    var reversed = reverse(schema);
    var item_inlinedLocation = match.inlinedLocation;
    var item = {
      schema: reversed,
      location: $$location,
      inlinedLocation: item_inlinedLocation
    };
    reversedFields[$$location] = item;
    reversedItems.push(item);
    if (schema !== reversed) {
      isTransformed = true;
    }
    
  }
  if (isTransformed) {
    return {
            type: "object",
            b: builder$2,
            additionalItems: globalConfig.a,
            items: reversedItems,
            fields: reversedFields
          };
  } else {
    return this;
  }
}

function nested(fieldName) {
  var parentCtx = this;
  var cacheId = "~" + fieldName;
  var ctx = parentCtx[cacheId];
  if (ctx !== undefined) {
    return Caml_option.valFromOption(ctx);
  }
  var schemas = [];
  var fields = {};
  var items = [];
  var schema = toStandard({
        type: "object",
        b: builder$2,
        additionalItems: globalConfig.a,
        items: items,
        fields: fields,
        output: output$1
      });
  var target = parentCtx.f(fieldName, schema)[itemSymbol];
  var field = function (fieldName, schema) {
    var inlinedLocation = fromString(fieldName);
    if (fields[fieldName]) {
      throw new Error("[" + vendor + "] " + ("The field " + inlinedLocation + " defined twice"));
    }
    var ditem_2 = schema;
    var ditem_4 = "[" + inlinedLocation + "]";
    var ditem = {
      k: 1,
      inlinedLocation: inlinedLocation,
      location: fieldName,
      schema: ditem_2,
      of: target,
      p: ditem_4
    };
    fields[fieldName] = ditem;
    items.push(ditem);
    schemas.push(schema);
    return proxify(ditem);
  };
  var tag = function (tag$1, asValue) {
    field(tag$1, definitionToSchema(asValue));
  };
  var fieldOr = function (fieldName, schema, or) {
    return field(fieldName, getOr(factory$1(schema), or));
  };
  var flatten = function (schema) {
    var match = schema.type;
    if (match === "object") {
      var flattenedItems = schema.items;
      if (schema.advanced) {
        var message = "Unsupported nested flatten for advanced object schema '" + toExpression(schema) + "'";
        throw new Error("[" + vendor + "] " + message);
      }
      var match$1 = reverse(schema);
      var match$2 = match$1.type;
      if (match$2 === "object" && match$1.advanced !== true) {
        var result = {};
        for(var idx = 0 ,idx_finish = flattenedItems.length; idx < idx_finish; ++idx){
          var item = flattenedItems[idx];
          result[item.location] = field(item.location, item.schema);
        }
        return result;
      }
      var message$1 = "Unsupported nested flatten for transformed schema '" + toExpression(schema) + "'";
      throw new Error("[" + vendor + "] " + message$1);
    }
    var message$2 = "The '" + toExpression(schema) + "' schema can't be flattened";
    throw new Error("[" + vendor + "] " + message$2);
  };
  var ctx$1 = {
    field: field,
    f: field,
    fieldOr: fieldOr,
    tag: tag,
    nested: nested,
    flatten: flatten
  };
  parentCtx[cacheId] = ctx$1;
  return ctx$1;
}

function definitionToRitem(definition, path, ritems, ritemsByItemPath) {
  if (!(typeof definition === "object" && definition !== null)) {
    return {
            k: 1,
            p: path,
            s: parse(definition)
          };
  }
  var item = definition[itemSymbol];
  if (item !== undefined) {
    var ritem_2 = getItemReversed(item);
    var ritem = {
      k: 0,
      p: path,
      i: item,
      s: ritem_2
    };
    item.r = ritem;
    ritemsByItemPath[getFullDitemPath(item)] = ritem;
    return ritem;
  }
  if (Array.isArray(definition)) {
    var items = [];
    for(var idx = 0 ,idx_finish = definition.length; idx < idx_finish; ++idx){
      var $$location = idx.toString();
      var inlinedLocation = "\"" + $$location + "\"";
      var ritem$1 = definitionToRitem(definition[idx], path + ("[" + inlinedLocation + "]"), ritems, ritemsByItemPath);
      ritems.push(ritem$1);
      var item_schema = ritem$1.s;
      var item$1 = {
        schema: item_schema,
        location: $$location,
        inlinedLocation: inlinedLocation
      };
      items[idx] = item$1;
    }
    return {
            k: 2,
            p: path,
            s: {
              type: "array",
              b: builder,
              additionalItems: "strict",
              items: items,
              output: output$1
            },
            a: true
          };
  }
  var fieldNames = Object.keys(definition);
  var fields = {};
  var items$1 = [];
  for(var idx$1 = 0 ,idx_finish$1 = fieldNames.length; idx$1 < idx_finish$1; ++idx$1){
    var $$location$1 = fieldNames[idx$1];
    var inlinedLocation$1 = fromString($$location$1);
    var ritem$2 = definitionToRitem(definition[$$location$1], path + ("[" + inlinedLocation$1 + "]"), ritems, ritemsByItemPath);
    ritems.push(ritem$2);
    var item_schema$1 = ritem$2.s;
    var item$2 = {
      schema: item_schema$1,
      location: $$location$1,
      inlinedLocation: inlinedLocation$1
    };
    items$1[idx$1] = item$2;
    fields[$$location$1] = item$2;
  }
  return {
          k: 2,
          p: path,
          s: {
            type: "object",
            b: builder,
            advanced: true,
            additionalItems: globalConfig.a,
            items: items$1,
            fields: fields,
            output: output$1
          },
          a: false
        };
}

function advancedReverse(definition, to, flattened) {
  return function () {
    var originalSchema = this;
    var ritemsByItemPath = {};
    var ritems = [];
    var ritem = definitionToRitem(definition, "", ritems, ritemsByItemPath);
    var mut;
    switch (ritem.k) {
      case 0 :
      case 1 :
          mut = copy(ritem.s);
          break;
      case 2 :
          mut = ritem.s;
          break;
      
    }
    mut.b = (function (b, input, selfSchema, path) {
        var hasTypeValidation = b.g.o & 1;
        for(var idx = 0 ,idx_finish = ritems.length; idx < idx_finish; ++idx){
          var match = ritems[idx];
          switch (match.k) {
            case 0 :
                break;
            case 1 :
                if (!hasTypeValidation) {
                  var rpath = match.p;
                  var itemInput = {
                    b: b,
                    v: _notVar,
                    i: input.v(b) + rpath,
                    a: false
                  };
                  var path$1 = path + rpath;
                  b.c = b.c + typeFilterCode(b, match.s, itemInput, path$1);
                }
                break;
            case 2 :
                if (hasTypeValidation) {
                  invalidOperation(b, path, "Type validation mode is not supported");
                }
                break;
            
          }
        }
        var getRitemInput = function (ritem) {
          if (ritem.p === "") {
            return input;
          } else {
            return {
                    b: b,
                    v: _notVar,
                    i: input.v(b) + ritem.p,
                    a: false
                  };
          }
        };
        var reversedToInput = function (reversed, originalPath) {
          if (isLiteral(reversed)) {
            return {
                    b: b,
                    v: _var,
                    i: embed(b, reversed.const),
                    a: false
                  };
          }
          var tag = reversed.type;
          var items = reversed.items;
          if (items !== undefined) {
            var isArray = tag === "array";
            var objectVal = make$1(b, isArray);
            for(var idx = 0 ,idx_finish = items.length; idx < idx_finish; ++idx){
              var item = items[idx];
              var itemPath = originalPath + ("[" + item.inlinedLocation + "]");
              var ritem = ritemsByItemPath[itemPath];
              var itemInput = ritem !== undefined ? getRitemInput(ritem) : reversedToInput(item.schema, itemPath);
              add(objectVal, item.inlinedLocation, itemInput);
            }
            return complete(objectVal, isArray);
          }
          var tmp = originalPath === "" ? "Schema isn't registered" : "Schema for " + originalPath + " isn't registered";
          return invalidOperation(b, path, tmp);
        };
        var getItemOutput = function (item, itemPath) {
          var ritem = item.r;
          if (ritem !== undefined) {
            var reversed = ritem.s;
            var itemInput = getRitemInput(ritem);
            var path$2 = path + ritem.p;
            if (ritem.p !== "" && (
                hasTypeValidation ? !isLiteral(reversed) : isLiteral(reversed)
              )) {
              b.c = b.c + typeFilterCode(b, reversed, itemInput, path$2);
            }
            return reversed.b(b, itemInput, reversed, path$2);
          }
          var reversed$1 = reverse(item.schema);
          var input = reversedToInput(reversed$1, itemPath);
          var prevFlag = b.g.o;
          b.g.o = (prevFlag | 1) ^ 1;
          var output = reversed$1.b(b, input, reversed$1, path);
          b.g.o = prevFlag;
          return output;
        };
        if (to !== undefined) {
          return getItemOutput(to, "");
        }
        objectStrictModeCheck(b, input, selfSchema.items, selfSchema, path);
        var isArray = originalSchema.type === "array";
        var items = originalSchema.items;
        var objectVal = make$1(b, isArray);
        if (flattened !== undefined) {
          for(var idx$1 = 0 ,idx_finish$1 = flattened.length; idx$1 < idx_finish$1; ++idx$1){
            merge(objectVal, getItemOutput(flattened[idx$1], ""));
          }
        }
        for(var idx$2 = 0 ,idx_finish$2 = items.length; idx$2 < idx_finish$2; ++idx$2){
          var item = items[idx$2];
          if (!objectVal[item.inlinedLocation]) {
            add(objectVal, item.inlinedLocation, getItemOutput(item, "[" + item.inlinedLocation + "]"));
          }
          
        }
        return complete(objectVal, isArray);
      });
    return mut;
  };
}

function advancedBuilder(definition, flattened) {
  return function (parentB, input, selfSchema, path) {
    var isFlatten = parentB.g.o & 64;
    var outputs = isFlatten ? input : ({});
    var b = {
      c: "",
      l: "",
      a: initialAllocate,
      g: parentB.g
    };
    if (!isFlatten) {
      var items = selfSchema.items;
      var inputVar = input.v(b);
      for(var idx = 0 ,idx_finish = items.length; idx < idx_finish; ++idx){
        var match = items[idx];
        var inlinedLocation = match.inlinedLocation;
        var schema = match.schema;
        var itemPath = "[" + inlinedLocation + "]";
        var itemInput = {
          b: b,
          v: _notVar,
          i: inputVar + itemPath,
          a: false
        };
        var path$1 = path + itemPath;
        if (b.g.o & 1 ? !isLiteral(schema) : isLiteral(schema)) {
          b.c = b.c + typeFilterCode(b, schema, itemInput, path$1);
        }
        outputs[inlinedLocation] = schema.b(b, itemInput, schema, path$1);
      }
      objectStrictModeCheck(b, input, items, selfSchema, path);
    }
    if (flattened !== undefined) {
      var prevFlag = b.g.o;
      b.g.o = prevFlag | 64;
      for(var idx$1 = 0 ,idx_finish$1 = flattened.length; idx$1 < idx_finish$1; ++idx$1){
        var item = flattened[idx$1];
        var schema$1 = item.schema;
        outputs[item.i] = schema$1.b(b, outputs, schema$1, path);
      }
      b.g.o = prevFlag;
    }
    var getItemOutput = function (item) {
      switch (item.k) {
        case 0 :
            return outputs[item.inlinedLocation];
        case 1 :
            return get(b, getItemOutput(item.of), item.inlinedLocation);
        case 2 :
            return outputs[item.i];
        
      }
    };
    var output = definitionToOutput(b, definition, getItemOutput);
    parentB.c = parentB.c + allocateScope(b);
    return output;
  };
}

function shape(schema, definer) {
  var mut = copy(schema);
  var item = {
    k: 2,
    schema: schema,
    p: "",
    i: 0
  };
  var definition = definer(proxify(item));
  mut.b = (function (b, input, param, path) {
      var itemOutput = schema.b(b, input, schema, path);
      var bb = {
        c: "",
        l: "",
        a: initialAllocate,
        g: b.g
      };
      var getItemOutput = function (item) {
        switch (item.k) {
          case 1 :
              return get(bb, getItemOutput(item.of), item.inlinedLocation);
          case 0 :
          case 2 :
              return itemOutput;
          
        }
      };
      var output = definitionToOutput(bb, definition, getItemOutput);
      b.c = b.c + allocateScope(bb);
      return output;
    });
  mut.output = advancedReverse(definition, item, undefined);
  return toStandard(mut);
}

function object(definer) {
  var flattened = (void 0);
  var items = [];
  var fields = {};
  var flatten = function (schema) {
    var match = schema.type;
    if (match === "object") {
      var flattenedItems = schema.items;
      for(var idx = 0 ,idx_finish = flattenedItems.length; idx < idx_finish; ++idx){
        var match$1 = flattenedItems[idx];
        var inlinedLocation = match$1.inlinedLocation;
        var $$location = match$1.location;
        var flattenedSchema = match$1.schema;
        var item = fields[$$location];
        if (item !== undefined) {
          if (item.schema !== flattenedSchema) {
            throw new Error("[" + vendor + "] " + ("The field " + inlinedLocation + " defined twice with incompatible schemas"));
          }
          
        } else {
          var item$1 = {
            k: 0,
            schema: flattenedSchema,
            inlinedLocation: inlinedLocation,
            location: $$location
          };
          items.push(item$1);
          fields[$$location] = item$1;
        }
      }
      var f = (flattened || (flattened = []));
      var item_2 = f.length;
      var item$2 = {
        k: 2,
        schema: schema,
        p: "",
        i: item_2
      };
      f.push(item$2);
      return proxify(item$2);
    }
    var message = "The '" + toExpression(schema) + "' schema can't be flattened";
    throw new Error("[" + vendor + "] " + message);
  };
  var field = function (fieldName, schema) {
    var inlinedLocation = fromString(fieldName);
    if (fields[fieldName]) {
      throw new Error("[" + vendor + "] " + ("The field " + inlinedLocation + " defined twice with incompatible schemas"));
    }
    var ditem = {
      k: 0,
      schema: schema,
      inlinedLocation: inlinedLocation,
      location: fieldName
    };
    fields[fieldName] = ditem;
    items.push(ditem);
    return proxify(ditem);
  };
  var tag = function (tag$1, asValue) {
    field(tag$1, definitionToSchema(asValue));
  };
  var fieldOr = function (fieldName, schema, or) {
    return field(fieldName, getOr(factory$1(schema), or));
  };
  var ctx = {
    field: field,
    f: field,
    fieldOr: fieldOr,
    tag: tag,
    nested: nested,
    flatten: flatten
  };
  var definition = definer(ctx);
  return toStandard({
              type: "object",
              b: advancedBuilder(definition, flattened),
              advanced: true,
              additionalItems: globalConfig.a,
              items: items,
              fields: fields,
              output: advancedReverse(definition, undefined, flattened)
            });
}

function tuple(definer) {
  var items = [];
  var item = function (idx, schema) {
    var $$location = idx.toString();
    var inlinedLocation = "\"" + $$location + "\"";
    if (items[idx]) {
      throw new Error("[" + vendor + "] " + ("The item [" + inlinedLocation + "] is defined multiple times"));
    }
    var ditem = {
      k: 0,
      schema: schema,
      inlinedLocation: inlinedLocation,
      location: $$location
    };
    items[idx] = ditem;
    return proxify(ditem);
  };
  var tag = function (idx, asValue) {
    item(idx, definitionToSchema(asValue));
  };
  var ctx = {
    item: item,
    tag: tag
  };
  var definition = definer(ctx);
  for(var idx = 0 ,idx_finish = items.length; idx < idx_finish; ++idx){
    if (!items[idx]) {
      var $$location = idx.toString();
      var inlinedLocation = "\"" + $$location + "\"";
      var ditem = {
        schema: unit,
        location: $$location,
        inlinedLocation: inlinedLocation
      };
      items[idx] = ditem;
    }
    
  }
  return toStandard({
              type: "array",
              b: advancedBuilder(definition, undefined),
              additionalItems: "strict",
              items: items,
              output: advancedReverse(definition, undefined, undefined)
            });
}

function matches(schema) {
  return schema;
}

var ctx = {
  m: matches
};

function factory$5(definer) {
  return toStandard(definitionToSchema(definer(ctx)));
}

function factory$6(item) {
  var reversedItem = reverse(item);
  var $$null$1 = coerce($$null, unit);
  var schema$6 = factory([
        item,
        $$null$1
      ]);
  if (isOptional(reversedItem)) {
    schema$6.output = (function () {
        return factory([
                    reversedItem,
                    reverse($$null$1),
                    coerce(definitionToSchema({
                              BS_PRIVATE_NESTED_SOME_NONE: schema$4
                            }), $$null)
                  ]);
      });
  }
  return schema$6;
}

function js_schema(definition) {
  return toStandard(definitionToSchema(definition));
}

function $$enum(values) {
  return factory(values.map(js_schema));
}

function unnest(schema) {
  if (schema.type === "object") {
    var items = schema.items;
    if (items.length === 0) {
      throw new Error("[" + vendor + "] Invalid empty object for S.unnest schema.");
    }
    return toStandard({
                type: "array",
                b: (function (b, input, param, path) {
                    var inputVar = input.v(b);
                    var iteratorVar = varWithoutAllocation(b.g);
                    var bb = {
                      c: "",
                      l: "",
                      a: initialAllocate,
                      g: b.g
                    };
                    var itemInput = make$1(bb, false);
                    var lengthCode = "";
                    for(var idx = 0 ,idx_finish = items.length; idx < idx_finish; ++idx){
                      var item = items[idx];
                      add(itemInput, item.inlinedLocation, {
                            b: bb,
                            v: _notVar,
                            i: inputVar + "[" + idx + "][" + iteratorVar + "]",
                            a: false
                          });
                      lengthCode = lengthCode + (inputVar + "[" + idx + "].length,");
                    }
                    var output = {
                      b: b,
                      v: _notVar,
                      i: "new Array(Math.max(" + lengthCode + "))",
                      a: false
                    };
                    var outputVar = output.v(b);
                    var itemOutput = withPathPrepend(bb, complete(itemInput, false), path, iteratorVar, (function (bb, itemOutput) {
                            bb.c = bb.c + addKey(bb, output, iteratorVar, itemOutput) + ";";
                          }), (function (b, input, path) {
                            return schema.b(b, input, schema, path);
                          }));
                    var itemCode = allocateScope(bb);
                    b.c = b.c + ("for(let " + iteratorVar + "=0;" + iteratorVar + "<" + outputVar + ".length;++" + iteratorVar + "){" + itemCode + "}");
                    if (itemOutput.a) {
                      return {
                              b: output.b,
                              v: _notVar,
                              i: "Promise.all(" + output.i + ")",
                              a: true
                            };
                    } else {
                      return output;
                    }
                  }),
                additionalItems: "strict",
                items: items.map(function (item, idx) {
                      var $$location = idx.toString();
                      return {
                              schema: factory$2(item.schema),
                              location: $$location,
                              inlinedLocation: "\"" + $$location + "\""
                            };
                    }),
                unnest: true,
                output: (function () {
                    var schema$1 = reverse(schema);
                    return {
                            type: "array",
                            b: (function (b, input, param, path) {
                                var inputVar = input.v(b);
                                var iteratorVar = varWithoutAllocation(b.g);
                                var outputVar = varWithoutAllocation(b.g);
                                var bb = {
                                  c: "",
                                  l: "",
                                  a: initialAllocate,
                                  g: b.g
                                };
                                var itemInput = {
                                  b: bb,
                                  v: _notVar,
                                  i: inputVar + "[" + iteratorVar + "]",
                                  a: false
                                };
                                var itemOutput = withPathPrepend(bb, itemInput, path, iteratorVar, (function (bb, output) {
                                        var initialArraysCode = "";
                                        var settingCode = "";
                                        for(var idx = 0 ,idx_finish = items.length; idx < idx_finish; ++idx){
                                          var item = items[idx];
                                          initialArraysCode = initialArraysCode + ("new Array(" + inputVar + ".length),");
                                          settingCode = settingCode + (outputVar + "[" + idx + "][" + iteratorVar + "]=" + get(b, output, item.inlinedLocation).i + ";");
                                        }
                                        b.a(outputVar + "=[" + initialArraysCode + "]");
                                        bb.c = bb.c + settingCode;
                                      }), (function (b, input, path) {
                                        return parseWithTypeValidation(b, schema$1, input, path);
                                      }));
                                var itemCode = allocateScope(bb);
                                b.c = b.c + ("for(let " + iteratorVar + "=0;" + iteratorVar + "<" + inputVar + ".length;++" + iteratorVar + "){" + itemCode + "}");
                                if (itemOutput.a) {
                                  return {
                                          b: b,
                                          v: _notVar,
                                          i: "Promise.all(" + outputVar + ")",
                                          a: true
                                        };
                                } else {
                                  return {
                                          b: b,
                                          v: _var,
                                          i: outputVar,
                                          a: false
                                        };
                                }
                              }),
                            additionalItems: schema$1,
                            items: immutableEmpty$1
                          };
                  })
              });
  }
  throw new Error("[" + vendor + "] S.unnest supports only object schemas.");
}

function tuple1(v0) {
  return tuple(function (s) {
              return s.item(0, v0);
            });
}

function tuple2(v0, v1) {
  return toStandard(definitionToSchema([
                  v0,
                  v1
                ]));
}

function tuple3(v0, v1, v2) {
  return toStandard(definitionToSchema([
                  v0,
                  v1,
                  v2
                ]));
}

function intMin(schema, minValue, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "Number must be greater than or equal to " + minValue;
  return addRefinement(schema, metadataId$2, {
              kind: {
                TAG: "Min",
                value: minValue
              },
              message: message
            }, (function (b, inputVar, param, path) {
                return "if(" + inputVar + "<" + embed(b, minValue) + "){" + fail(b, message, path) + "}";
              }));
}

function intMax(schema, maxValue, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "Number must be lower than or equal to " + maxValue;
  return addRefinement(schema, metadataId$2, {
              kind: {
                TAG: "Max",
                value: maxValue
              },
              message: message
            }, (function (b, inputVar, param, path) {
                return "if(" + inputVar + ">" + embed(b, maxValue) + "){" + fail(b, message, path) + "}";
              }));
}

function port(schema, messageOpt) {
  var message = messageOpt !== undefined ? messageOpt : "Invalid port";
  return addRefinement(schema, metadataId$2, {
              kind: "Port",
              message: message
            }, (function (b, inputVar, param, path) {
                return "if(" + inputVar + "<1||" + inputVar + ">65535){" + fail(b, message, path) + "}";
              }));
}

function floatMin(schema, minValue, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "Number must be greater than or equal to " + minValue;
  return addRefinement(schema, metadataId$3, {
              kind: {
                TAG: "Min",
                value: minValue
              },
              message: message
            }, (function (b, inputVar, param, path) {
                return "if(" + inputVar + "<" + embed(b, minValue) + "){" + fail(b, message, path) + "}";
              }));
}

function floatMax(schema, maxValue, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "Number must be lower than or equal to " + maxValue;
  return addRefinement(schema, metadataId$3, {
              kind: {
                TAG: "Max",
                value: maxValue
              },
              message: message
            }, (function (b, inputVar, param, path) {
                return "if(" + inputVar + ">" + embed(b, maxValue) + "){" + fail(b, message, path) + "}";
              }));
}

function arrayMinLength(schema, length, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "Array must be " + length + " or more items long";
  return addRefinement(schema, metadataId, {
              kind: {
                TAG: "Min",
                length: length
              },
              message: message
            }, (function (b, inputVar, param, path) {
                return "if(" + inputVar + ".length<" + embed(b, length) + "){" + fail(b, message, path) + "}";
              }));
}

function arrayMaxLength(schema, length, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "Array must be " + length + " or fewer items long";
  return addRefinement(schema, metadataId, {
              kind: {
                TAG: "Max",
                length: length
              },
              message: message
            }, (function (b, inputVar, param, path) {
                return "if(" + inputVar + ".length>" + embed(b, length) + "){" + fail(b, message, path) + "}";
              }));
}

function arrayLength(schema, length, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "Array must be exactly " + length + " items long";
  return addRefinement(schema, metadataId, {
              kind: {
                TAG: "Length",
                length: length
              },
              message: message
            }, (function (b, inputVar, param, path) {
                return "if(" + inputVar + ".length!==" + embed(b, length) + "){" + fail(b, message, path) + "}";
              }));
}

function stringMinLength(schema, length, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "String must be " + length + " or more characters long";
  return addRefinement(schema, metadataId$1, {
              kind: {
                TAG: "Min",
                length: length
              },
              message: message
            }, (function (b, inputVar, param, path) {
                return "if(" + inputVar + ".length<" + embed(b, length) + "){" + fail(b, message, path) + "}";
              }));
}

function stringMaxLength(schema, length, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "String must be " + length + " or fewer characters long";
  return addRefinement(schema, metadataId$1, {
              kind: {
                TAG: "Max",
                length: length
              },
              message: message
            }, (function (b, inputVar, param, path) {
                return "if(" + inputVar + ".length>" + embed(b, length) + "){" + fail(b, message, path) + "}";
              }));
}

function stringLength(schema, length, maybeMessage) {
  var message = maybeMessage !== undefined ? maybeMessage : "String must be exactly " + length + " characters long";
  return addRefinement(schema, metadataId$1, {
              kind: {
                TAG: "Length",
                length: length
              },
              message: message
            }, (function (b, inputVar, param, path) {
                return "if(" + inputVar + ".length!==" + embed(b, length) + "){" + fail(b, message, path) + "}";
              }));
}

function email(schema, messageOpt) {
  var message = messageOpt !== undefined ? messageOpt : "Invalid email address";
  return addRefinement(schema, metadataId$1, {
              kind: "Email",
              message: message
            }, (function (b, inputVar, param, path) {
                return "if(!" + embed(b, emailRegex) + ".test(" + inputVar + ")){" + fail(b, message, path) + "}";
              }));
}

function uuid(schema, messageOpt) {
  var message = messageOpt !== undefined ? messageOpt : "Invalid UUID";
  return addRefinement(schema, metadataId$1, {
              kind: "Uuid",
              message: message
            }, (function (b, inputVar, param, path) {
                return "if(!" + embed(b, uuidRegex) + ".test(" + inputVar + ")){" + fail(b, message, path) + "}";
              }));
}

function cuid(schema, messageOpt) {
  var message = messageOpt !== undefined ? messageOpt : "Invalid CUID";
  return addRefinement(schema, metadataId$1, {
              kind: "Cuid",
              message: message
            }, (function (b, inputVar, param, path) {
                return "if(!" + embed(b, cuidRegex) + ".test(" + inputVar + ")){" + fail(b, message, path) + "}";
              }));
}

function url(schema, messageOpt) {
  var message = messageOpt !== undefined ? messageOpt : "Invalid url";
  return addRefinement(schema, metadataId$1, {
              kind: "Url",
              message: message
            }, (function (b, inputVar, param, path) {
                return "try{new URL(" + inputVar + ")}catch(_){" + fail(b, message, path) + "}";
              }));
}

function pattern(schema, re, messageOpt) {
  var message = messageOpt !== undefined ? messageOpt : "Invalid";
  return addRefinement(schema, metadataId$1, {
              kind: {
                TAG: "Pattern",
                re: re
              },
              message: message
            }, (function (b, inputVar, param, path) {
                var reVal = {
                  b: b,
                  v: _var,
                  i: embed(b, re),
                  a: false
                };
                return reVal.i + ".lastIndex=0;if(!" + reVal.i + ".test(" + inputVar + ")){" + fail(b, message, path) + "}";
              }));
}

function datetime(schema, messageOpt) {
  var message = messageOpt !== undefined ? messageOpt : "Invalid datetime string! Must be UTC";
  var refinement = {
    kind: "Datetime",
    message: message
  };
  var refinements = schema[metadataId$1];
  return transform$1(set$1(schema, metadataId$1, refinements !== undefined ? refinements.concat(refinement) : [refinement]), (function (s) {
                return {
                        p: (function (string) {
                            if (!datetimeRe.test(string)) {
                              s.fail(message, undefined);
                            }
                            return new Date(string);
                          }),
                        s: (function (date) {
                            return date.toISOString();
                          })
                      };
              }));
}

function trim(schema) {
  var transformer = function (string) {
    return string.trim();
  };
  return transform$1(schema, (function (param) {
                return {
                        p: transformer,
                        s: transformer
                      };
              }));
}

function nullish(schema) {
  return factory([
              schema,
              unit,
              $$null
            ]);
}

function nullable(schema) {
  return factory([
              schema,
              coerce($$null, unit)
            ]);
}

function js_union(values) {
  return factory(values.map(definitionToSchema));
}

function js_transform(schema, maybeParser, maybeSerializer) {
  return transform$1(schema, (function (s) {
                return {
                        p: maybeParser !== undefined ? (function (v) {
                              return maybeParser(v, s);
                            }) : undefined,
                        s: maybeSerializer !== undefined ? (function (v) {
                              return maybeSerializer(v, s);
                            }) : undefined
                      };
              }));
}

function js_refine(schema, refiner) {
  return refine(schema, (function (s) {
                return function (v) {
                  refiner(v, s);
                };
              }));
}

function noop$1(a) {
  return a;
}

function js_asyncParserRefine(schema, refine) {
  return transform$1(schema, (function (s) {
                return {
                        a: (function (v) {
                            return refine(v, s).then(function () {
                                        return v;
                                      });
                          }),
                        s: noop$1
                      };
              }));
}

function js_optional(schema, maybeOr) {
  var schema$1 = factory$1(schema);
  if (maybeOr === undefined) {
    return schema$1;
  }
  var or = Caml_option.valFromOption(maybeOr);
  if (typeof or === "function") {
    return getOrWith(schema$1, or);
  } else {
    return getOr(schema$1, or);
  }
}

function js_custom(name, maybeParser, maybeSerializer, param) {
  return custom(name, (function (s) {
                return {
                        p: maybeParser !== undefined ? (function (v) {
                              return maybeParser(v, s);
                            }) : undefined,
                        s: maybeSerializer !== undefined ? (function (v) {
                              return maybeSerializer(v, s);
                            }) : undefined
                      };
              }));
}

function js_merge(s1, s2) {
  if (s1.type === "object") {
    if (s2.type === "object") {
      var items2 = s2.items;
      var items = [].concat(s1.items);
      var fields = Object.assign({}, s1.fields);
      for(var idx = 0 ,idx_finish = items2.length; idx < idx_finish; ++idx){
        var item = items2[idx];
        if (fields[item.location]) {
          throw new Error("[" + vendor + "] " + ("The field " + item.inlinedLocation + " is defined multiple times"));
        }
        items.push(item);
        fields[item.location] = item;
      }
      return toStandard({
                  type: "object",
                  b: (function (b, input, param, path) {
                      var s1Result = s1.b(b, input, s1, path);
                      var s2Result = s2.b(b, input, s2, path);
                      return {
                              b: b,
                              v: _notVar,
                              i: "{..." + s1Result.i + ", ..." + s2Result.i + "}",
                              a: false
                            };
                    }),
                  advanced: true,
                  additionalItems: s2.additionalItems,
                  items: items,
                  fields: fields,
                  output: (function () {
                      return {
                              type: "unknown",
                              b: (function (b, param, param$1, path) {
                                  return invalidOperation(b, path, "The S.merge serializing is not supported yet");
                                })
                            };
                    })
                });
    }
    throw new Error("[" + vendor + "] The merge supports only Object schemas");
  }
  throw new Error("[" + vendor + "] The merge supports only Object schemas");
}

function setGlobalConfig(override) {
  globalConfig.r = 0;
  var defaultAdditionalItems = override.defaultAdditionalItems;
  globalConfig.a = defaultAdditionalItems !== undefined ? defaultAdditionalItems : "strip";
  var prevDisableNanNumberCheck = globalConfig.n;
  var disableNanNumberValidation = override.disableNanNumberValidation;
  globalConfig.n = disableNanNumberValidation !== undefined ? disableNanNumberValidation : false;
  if (prevDisableNanNumberCheck !== globalConfig.n) {
    return resetOperationsCache(schema$4);
  }
  
}

var Path = {
  empty: "",
  dynamic: "[]",
  toArray: toArray,
  fromArray: fromArray,
  fromLocation: fromLocation,
  concat: concat
};

var Flag = {
  none: 0,
  typeValidation: 1,
  async: 2,
  assertOutput: 4,
  jsonableOutput: 8,
  jsonStringOutput: 16,
  reverse: 32,
  has: has
};

var $$Error$1 = {
  $$class: $$class,
  make: make,
  raise: raise,
  message: message,
  reason: reason$1
};

var never = schema;

var string = schema$1;

var bool = schema$2;

var $$int = schema$3;

var $$float = schema$4;

var bigint = schema$5;

var literal = js_schema;

var array = factory$2;

var dict = factory$3;

var option = factory$1;

var $$null$1 = factory$6;

var jsonString = factory$4;

var union = factory;

var parseJsonOrThrow = parseOrThrow;

var Schema = {};

var schema$6 = factory$5;

var $$Object = {};

var $$Option = {
  $$default: $$default,
  getOr: getOr,
  getOrWith: getOrWith
};

var String_Refinement = {};

var $$String = {
  Refinement: String_Refinement,
  refinements: refinements$1
};

var Int_Refinement = {};

var Int = {
  Refinement: Int_Refinement,
  refinements: refinements$2
};

var Float_Refinement = {};

var Float = {
  Refinement: Float_Refinement,
  refinements: refinements$3
};

var Array_Refinement = {};

var $$Array = {
  Refinement: Array_Refinement,
  refinements: refinements
};

var Metadata = {
  Id: Id,
  get: get$1,
  set: set$1
};

export {
  Path ,
  SchemaError ,
  Flag ,
  $$Error$1 as $$Error,
  never ,
  unknown ,
  unit ,
  string ,
  bool ,
  $$int ,
  $$float ,
  bigint ,
  json ,
  literal ,
  array ,
  unnest ,
  list ,
  dict ,
  option ,
  $$null$1 as $$null,
  nullable ,
  nullish ,
  jsonString ,
  union ,
  $$enum ,
  Catch ,
  $$catch ,
  description ,
  deprecated ,
  transform$1 as transform,
  preprocess ,
  custom ,
  refine ,
  shape ,
  coerce ,
  compile ,
  parseOrThrow ,
  parseJsonOrThrow ,
  parseJsonStringOrThrow ,
  parseAsyncOrThrow ,
  convertOrThrow ,
  convertToJsonOrThrow ,
  convertToJsonStringOrThrow ,
  convertAsyncOrThrow ,
  reverseConvertOrThrow ,
  reverseConvertToJsonOrThrow ,
  reverseConvertToJsonStringOrThrow ,
  assertOrThrow ,
  isAsync ,
  recursive ,
  name ,
  noValidation ,
  toExpression ,
  Schema ,
  schema$6 as schema,
  $$Object ,
  object ,
  strip ,
  deepStrip ,
  strict ,
  deepStrict ,
  Tuple ,
  tuple ,
  tuple1 ,
  tuple2 ,
  tuple3 ,
  $$Option ,
  $$String ,
  Int ,
  Float ,
  $$Array ,
  Metadata ,
  reverse ,
  intMin ,
  intMax ,
  port ,
  floatMin ,
  floatMax ,
  arrayMinLength ,
  arrayMaxLength ,
  arrayLength ,
  stringMinLength ,
  stringMaxLength ,
  stringLength ,
  email ,
  uuid ,
  cuid ,
  url ,
  pattern ,
  datetime ,
  trim ,
  js_safe ,
  js_safeAsync ,
  js_union ,
  js_optional ,
  js_custom ,
  js_asyncParserRefine ,
  js_refine ,
  js_transform ,
  js_schema ,
  js_merge ,
  setGlobalConfig ,
}
/* symbol Not a pure module */
